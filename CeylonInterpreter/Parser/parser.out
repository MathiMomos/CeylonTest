Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CASE
    CLASS
    DOT
    FALSE
    FSTRING
    IN
    LBRACKET
    RBRACKET
    SWITCH
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> block
Rule 2     block -> statement_list
Rule 3     statement_list -> statement statement_list
Rule 4     statement_list -> empty
Rule 5     statement -> var_assign SEMI
Rule 6     statement -> final_assign SEMI
Rule 7     statement -> var_compound_assign SEMI
Rule 8     statement -> concat_assign SEMI
Rule 9     statement -> var_auto SEMI
Rule 10    statement -> expr SEMI
Rule 11    statement -> func_stmt
Rule 12    statement -> if_stmt
Rule 13    statement -> while_stmt
Rule 14    statement -> for_stmt
Rule 15    statement -> print_stmt SEMI
Rule 16    statement -> empty
Rule 17    scoped_block -> scoped_statement_list
Rule 18    scoped_statement_list -> scoped_statement scoped_statement_list
Rule 19    scoped_statement_list -> empty
Rule 20    scoped_statement -> var_assign SEMI
Rule 21    scoped_statement -> final_assign SEMI
Rule 22    scoped_statement -> var_compound_assign SEMI
Rule 23    scoped_statement -> concat_assign SEMI
Rule 24    scoped_statement -> var_auto SEMI
Rule 25    scoped_statement -> expr SEMI
Rule 26    scoped_statement -> func_stmt
Rule 27    scoped_statement -> scoped_if_stmt
Rule 28    scoped_statement -> scoped_while_stmt
Rule 29    scoped_statement -> scoped_for_stmt
Rule 30    scoped_statement -> print_stmt SEMI
Rule 31    scoped_statement -> return SEMI
Rule 32    scoped_statement -> empty
Rule 33    return -> RETURN expr
Rule 34    func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
Rule 35    func_call -> var LPAREN arguments_list RPAREN
Rule 36    arguments_list -> non_empty_arguments_list
Rule 37    arguments_list -> empty
Rule 38    non_empty_arguments_list -> expr COMMA non_empty_arguments_list
Rule 39    non_empty_arguments_list -> expr
Rule 40    parameters_list -> non_empty_parameters_list
Rule 41    parameters_list -> empty
Rule 42    non_empty_parameters_list -> var COMMA non_empty_parameters_list
Rule 43    non_empty_parameters_list -> var
Rule 44    if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
Rule 45    elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
Rule 46    elif_stmt -> else_stmt
Rule 47    elif_stmt -> empty
Rule 48    else_stmt -> ELSE LBRACE block RBRACE
Rule 49    scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
Rule 50    scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
Rule 51    scoped_elif_stmt -> scoped_else_stmt
Rule 52    scoped_elif_stmt -> empty
Rule 53    scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE
Rule 54    scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
Rule 55    scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
Rule 56    print_stmt -> PRINT LPAREN expr RPAREN
Rule 57    while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
Rule 58    for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
Rule 59    var -> ID
Rule 60    var_assign -> var ASSIGN expr
Rule 61    final_assign -> FINAL var ASSIGN expr
Rule 62    var_compound_assign -> var PLUS_ASSIGN num_expr
Rule 63    var_compound_assign -> var MINUS_ASSIGN num_expr
Rule 64    var_compound_assign -> var TIMES_ASSIGN num_expr
Rule 65    var_compound_assign -> var DIVIDE_ASSIGN num_expr
Rule 66    var_compound_assign -> var POWER_ASSIGN num_expr
Rule 67    var_compound_assign -> var MODULO_ASSIGN num_expr
Rule 68    var_compound_assign -> var INT_DIVIDE_ASSIGN num_expr
Rule 69    concat_assign -> var CONCAT_ASSIGN string_expr
Rule 70    var_auto -> var INCREMENT
Rule 71    var_auto -> var DECREMENT
Rule 72    expr -> string_expr
Rule 73    expr -> num_expr
Rule 74    expr -> boolean_expr
Rule 75    expr -> null_expr
Rule 76    expr -> ternary_expr
Rule 77    expr -> var
Rule 78    expr -> func_call
Rule 79    num_factor -> PLUS num_factor
Rule 80    num_factor -> MINUS num_factor
Rule 81    num_factor -> INTEGER
Rule 82    num_factor -> FLOAT
Rule 83    num_factor -> LPAREN num_expr RPAREN
Rule 84    num_factor -> func_call
Rule 85    num_factor -> var
Rule 86    num_expr -> num_expr PLUS num_expr
Rule 87    num_expr -> num_expr MINUS num_expr
Rule 88    num_expr -> num_expr TIMES num_expr
Rule 89    num_expr -> num_expr DIVIDE num_expr
Rule 90    num_expr -> num_expr INT_DIVIDE num_expr
Rule 91    num_expr -> num_expr POWER num_expr
Rule 92    num_expr -> num_expr MODULO num_expr
Rule 93    num_expr -> num_factor
Rule 94    string_expr -> string_expr CONCAT string_expr
Rule 95    string_expr -> STRING
Rule 96    string_expr -> var
Rule 97    boolean_expr -> boolean_expr AND boolean_expr
Rule 98    boolean_expr -> boolean_expr OR boolean_expr
Rule 99    boolean_expr -> NOT boolean_expr
Rule 100   boolean_expr -> boolean_factor
Rule 101   boolean_factor -> LPAREN boolean_expr RPAREN
Rule 102   boolean_factor -> BOOLEAN
Rule 103   boolean_factor -> comparison
Rule 104   boolean_factor -> var
Rule 105   comparison -> expr EQ expr
Rule 106   comparison -> expr NE expr
Rule 107   comparison -> expr LT expr
Rule 108   comparison -> expr GT expr
Rule 109   comparison -> expr LE expr
Rule 110   comparison -> expr GE expr
Rule 111   null_expr -> NULL
Rule 112   ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr
Rule 113   empty -> <empty>

Terminals, with rules where they appear

AND                  : 97
ASSIGN               : 60 61
BOOLEAN              : 102
CASE                 : 
CLASS                : 
COMMA                : 38 42
CONCAT               : 94
CONCAT_ASSIGN        : 69
DECREMENT            : 71
DIVIDE               : 89
DIVIDE_ASSIGN        : 65
DOT                  : 
ELIF                 : 45 50
ELSE                 : 48 53
EQ                   : 105
FALSE                : 
FINAL                : 61
FLOAT                : 82
FN                   : 34
FOR                  : 55 58
FSTRING              : 
GE                   : 110
GT                   : 108
ID                   : 59
IF                   : 44 49
IN                   : 
INCREMENT            : 70
INTEGER              : 81
INT_DIVIDE           : 90
INT_DIVIDE_ASSIGN    : 68
LBRACE               : 34 44 45 48 49 50 53 54 55 57 58
LBRACKET             : 
LE                   : 109
LPAREN               : 34 35 44 45 49 50 54 55 56 57 58 83 101
LT                   : 107
MINUS                : 80 87
MINUS_ASSIGN         : 63
MODULO               : 92
MODULO_ASSIGN        : 67
NE                   : 106
NOT                  : 99
NULL                 : 111
OR                   : 98
PLUS                 : 79 86
PLUS_ASSIGN          : 62
POWER                : 91
POWER_ASSIGN         : 66
PRINT                : 56
RBRACE               : 34 44 45 48 49 50 53 54 55 57 58
RBRACKET             : 
RETURN               : 33
RPAREN               : 34 35 44 45 49 50 54 55 56 57 58 83 101
SEMI                 : 5 6 7 8 9 10 15 20 21 22 23 24 25 30 31 55 55 58 58
STRING               : 95
SWITCH               : 
TERNARY_C            : 112
TERNARY_Q            : 112
TIMES                : 88
TIMES_ASSIGN         : 64
TRUE                 : 
WHILE                : 54 57
error                : 

Nonterminals, with rules where they appear

arguments_list       : 35
block                : 1 44 45 48 57 58
boolean_expr         : 44 45 49 50 54 55 57 58 74 97 97 98 98 99 101 112
boolean_factor       : 100
comparison           : 103
concat_assign        : 8 23
elif_stmt            : 44 45
else_stmt            : 46
empty                : 4 16 19 32 37 41 47 52
expr                 : 10 25 33 38 39 56 60 61 105 105 106 106 107 107 108 108 109 109 110 110 112 112
final_assign         : 6 21
for_stmt             : 14
func_call            : 78 84
func_stmt            : 11 26
if_stmt              : 12
non_empty_arguments_list : 36 38
non_empty_parameters_list : 40 42
null_expr            : 75
num_expr             : 62 63 64 65 66 67 68 73 83 86 86 87 87 88 88 89 89 90 90 91 91 92 92
num_factor           : 79 80 93
parameters_list      : 34
print_stmt           : 15 30
program              : 0
return               : 31
scoped_block         : 34 49 50 53 54 55
scoped_elif_stmt     : 49 50
scoped_else_stmt     : 51
scoped_for_stmt      : 29
scoped_if_stmt       : 27
scoped_statement     : 18
scoped_statement_list : 17 18
scoped_while_stmt    : 28
statement            : 3
statement_list       : 2 3
string_expr          : 69 72 94 94
ternary_expr         : 76
var                  : 34 35 42 43 60 61 62 63 64 65 66 67 68 69 70 71 77 85 96 104
var_assign           : 5 20 55 58
var_auto             : 9 24 55 58
var_compound_assign  : 7 22
while_stmt           : 13

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . block
    (2) block -> . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . concat_assign SEMI
    (9) statement -> . var_auto SEMI
    (10) statement -> . expr SEMI
    (11) statement -> . func_stmt
    (12) statement -> . if_stmt
    (13) statement -> . while_stmt
    (14) statement -> . for_stmt
    (15) statement -> . print_stmt SEMI
    (16) statement -> . empty
    (113) empty -> .
    (60) var_assign -> . var ASSIGN expr
    (61) final_assign -> . FINAL var ASSIGN expr
    (62) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (63) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (64) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (65) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (66) var_compound_assign -> . var POWER_ASSIGN num_expr
    (67) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (68) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (69) concat_assign -> . var CONCAT_ASSIGN string_expr
    (70) var_auto -> . var INCREMENT
    (71) var_auto -> . var DECREMENT
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (34) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (44) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (57) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (58) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (56) print_stmt -> . PRINT LPAREN expr RPAREN
    (59) var -> . ID
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    $end            reduce using rule 113 (empty -> .)
    FINAL           shift and go to state 18
    FN              shift and go to state 25
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    PRINT           shift and go to state 30
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

  ! FINAL           [ reduce using rule 113 (empty -> .) ]
  ! FN              [ reduce using rule 113 (empty -> .) ]
  ! IF              [ reduce using rule 113 (empty -> .) ]
  ! WHILE           [ reduce using rule 113 (empty -> .) ]
  ! FOR             [ reduce using rule 113 (empty -> .) ]
  ! PRINT           [ reduce using rule 113 (empty -> .) ]
  ! ID              [ reduce using rule 113 (empty -> .) ]
  ! STRING          [ reduce using rule 113 (empty -> .) ]
  ! NOT             [ reduce using rule 113 (empty -> .) ]
  ! NULL            [ reduce using rule 113 (empty -> .) ]
  ! PLUS            [ reduce using rule 113 (empty -> .) ]
  ! MINUS           [ reduce using rule 113 (empty -> .) ]
  ! INTEGER         [ reduce using rule 113 (empty -> .) ]
  ! FLOAT           [ reduce using rule 113 (empty -> .) ]
  ! LPAREN          [ reduce using rule 113 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 113 (empty -> .) ]

    program                        shift and go to state 1
    block                          shift and go to state 2
    statement_list                 shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 5
    var_assign                     shift and go to state 6
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    concat_assign                  shift and go to state 9
    var_auto                       shift and go to state 10
    expr                           shift and go to state 11
    func_stmt                      shift and go to state 12
    if_stmt                        shift and go to state 13
    while_stmt                     shift and go to state 14
    for_stmt                       shift and go to state 15
    print_stmt                     shift and go to state 16
    var                            shift and go to state 17
    num_expr                       shift and go to state 19
    string_expr                    shift and go to state 20
    boolean_expr                   shift and go to state 21
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 1

    (0) S' -> program .



state 2

    (1) program -> block .

    $end            reduce using rule 1 (program -> block .)


state 3

    (2) block -> statement_list .

    $end            reduce using rule 2 (block -> statement_list .)
    RBRACE          reduce using rule 2 (block -> statement_list .)


state 4

    (3) statement_list -> statement . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . concat_assign SEMI
    (9) statement -> . var_auto SEMI
    (10) statement -> . expr SEMI
    (11) statement -> . func_stmt
    (12) statement -> . if_stmt
    (13) statement -> . while_stmt
    (14) statement -> . for_stmt
    (15) statement -> . print_stmt SEMI
    (16) statement -> . empty
    (113) empty -> .
    (60) var_assign -> . var ASSIGN expr
    (61) final_assign -> . FINAL var ASSIGN expr
    (62) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (63) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (64) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (65) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (66) var_compound_assign -> . var POWER_ASSIGN num_expr
    (67) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (68) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (69) concat_assign -> . var CONCAT_ASSIGN string_expr
    (70) var_auto -> . var INCREMENT
    (71) var_auto -> . var DECREMENT
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (34) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (44) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (57) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (58) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (56) print_stmt -> . PRINT LPAREN expr RPAREN
    (59) var -> . ID
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    $end            reduce using rule 113 (empty -> .)
    RBRACE          reduce using rule 113 (empty -> .)
    FINAL           shift and go to state 18
    FN              shift and go to state 25
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    PRINT           shift and go to state 30
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

  ! FINAL           [ reduce using rule 113 (empty -> .) ]
  ! FN              [ reduce using rule 113 (empty -> .) ]
  ! IF              [ reduce using rule 113 (empty -> .) ]
  ! WHILE           [ reduce using rule 113 (empty -> .) ]
  ! FOR             [ reduce using rule 113 (empty -> .) ]
  ! PRINT           [ reduce using rule 113 (empty -> .) ]
  ! ID              [ reduce using rule 113 (empty -> .) ]
  ! STRING          [ reduce using rule 113 (empty -> .) ]
  ! NOT             [ reduce using rule 113 (empty -> .) ]
  ! NULL            [ reduce using rule 113 (empty -> .) ]
  ! PLUS            [ reduce using rule 113 (empty -> .) ]
  ! MINUS           [ reduce using rule 113 (empty -> .) ]
  ! INTEGER         [ reduce using rule 113 (empty -> .) ]
  ! FLOAT           [ reduce using rule 113 (empty -> .) ]
  ! LPAREN          [ reduce using rule 113 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 113 (empty -> .) ]

    statement                      shift and go to state 4
    statement_list                 shift and go to state 43
    empty                          shift and go to state 5
    var_assign                     shift and go to state 6
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    concat_assign                  shift and go to state 9
    var_auto                       shift and go to state 10
    expr                           shift and go to state 11
    func_stmt                      shift and go to state 12
    if_stmt                        shift and go to state 13
    while_stmt                     shift and go to state 14
    for_stmt                       shift and go to state 15
    print_stmt                     shift and go to state 16
    var                            shift and go to state 17
    num_expr                       shift and go to state 19
    string_expr                    shift and go to state 20
    boolean_expr                   shift and go to state 21
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 5

    (4) statement_list -> empty .
    (16) statement -> empty .

  ! reduce/reduce conflict for $end resolved using rule 4 (statement_list -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 4 (statement_list -> empty .)
    $end            reduce using rule 4 (statement_list -> empty .)
    RBRACE          reduce using rule 4 (statement_list -> empty .)
    FINAL           reduce using rule 16 (statement -> empty .)
    FN              reduce using rule 16 (statement -> empty .)
    IF              reduce using rule 16 (statement -> empty .)
    WHILE           reduce using rule 16 (statement -> empty .)
    FOR             reduce using rule 16 (statement -> empty .)
    PRINT           reduce using rule 16 (statement -> empty .)
    ID              reduce using rule 16 (statement -> empty .)
    STRING          reduce using rule 16 (statement -> empty .)
    NOT             reduce using rule 16 (statement -> empty .)
    NULL            reduce using rule 16 (statement -> empty .)
    PLUS            reduce using rule 16 (statement -> empty .)
    MINUS           reduce using rule 16 (statement -> empty .)
    INTEGER         reduce using rule 16 (statement -> empty .)
    FLOAT           reduce using rule 16 (statement -> empty .)
    LPAREN          reduce using rule 16 (statement -> empty .)
    BOOLEAN         reduce using rule 16 (statement -> empty .)

  ! $end            [ reduce using rule 16 (statement -> empty .) ]
  ! RBRACE          [ reduce using rule 16 (statement -> empty .) ]


state 6

    (5) statement -> var_assign . SEMI

    SEMI            shift and go to state 44


state 7

    (6) statement -> final_assign . SEMI

    SEMI            shift and go to state 45


state 8

    (7) statement -> var_compound_assign . SEMI

    SEMI            shift and go to state 46


state 9

    (8) statement -> concat_assign . SEMI

    SEMI            shift and go to state 47


state 10

    (9) statement -> var_auto . SEMI

    SEMI            shift and go to state 48


state 11

    (10) statement -> expr . SEMI
    (105) comparison -> expr . EQ expr
    (106) comparison -> expr . NE expr
    (107) comparison -> expr . LT expr
    (108) comparison -> expr . GT expr
    (109) comparison -> expr . LE expr
    (110) comparison -> expr . GE expr

    SEMI            shift and go to state 49
    EQ              shift and go to state 50
    NE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    LE              shift and go to state 54
    GE              shift and go to state 55


state 12

    (11) statement -> func_stmt .

    FINAL           reduce using rule 11 (statement -> func_stmt .)
    FN              reduce using rule 11 (statement -> func_stmt .)
    IF              reduce using rule 11 (statement -> func_stmt .)
    WHILE           reduce using rule 11 (statement -> func_stmt .)
    FOR             reduce using rule 11 (statement -> func_stmt .)
    PRINT           reduce using rule 11 (statement -> func_stmt .)
    ID              reduce using rule 11 (statement -> func_stmt .)
    STRING          reduce using rule 11 (statement -> func_stmt .)
    NOT             reduce using rule 11 (statement -> func_stmt .)
    NULL            reduce using rule 11 (statement -> func_stmt .)
    PLUS            reduce using rule 11 (statement -> func_stmt .)
    MINUS           reduce using rule 11 (statement -> func_stmt .)
    INTEGER         reduce using rule 11 (statement -> func_stmt .)
    FLOAT           reduce using rule 11 (statement -> func_stmt .)
    LPAREN          reduce using rule 11 (statement -> func_stmt .)
    BOOLEAN         reduce using rule 11 (statement -> func_stmt .)
    $end            reduce using rule 11 (statement -> func_stmt .)
    RBRACE          reduce using rule 11 (statement -> func_stmt .)


state 13

    (12) statement -> if_stmt .

    FINAL           reduce using rule 12 (statement -> if_stmt .)
    FN              reduce using rule 12 (statement -> if_stmt .)
    IF              reduce using rule 12 (statement -> if_stmt .)
    WHILE           reduce using rule 12 (statement -> if_stmt .)
    FOR             reduce using rule 12 (statement -> if_stmt .)
    PRINT           reduce using rule 12 (statement -> if_stmt .)
    ID              reduce using rule 12 (statement -> if_stmt .)
    STRING          reduce using rule 12 (statement -> if_stmt .)
    NOT             reduce using rule 12 (statement -> if_stmt .)
    NULL            reduce using rule 12 (statement -> if_stmt .)
    PLUS            reduce using rule 12 (statement -> if_stmt .)
    MINUS           reduce using rule 12 (statement -> if_stmt .)
    INTEGER         reduce using rule 12 (statement -> if_stmt .)
    FLOAT           reduce using rule 12 (statement -> if_stmt .)
    LPAREN          reduce using rule 12 (statement -> if_stmt .)
    BOOLEAN         reduce using rule 12 (statement -> if_stmt .)
    $end            reduce using rule 12 (statement -> if_stmt .)
    RBRACE          reduce using rule 12 (statement -> if_stmt .)


state 14

    (13) statement -> while_stmt .

    FINAL           reduce using rule 13 (statement -> while_stmt .)
    FN              reduce using rule 13 (statement -> while_stmt .)
    IF              reduce using rule 13 (statement -> while_stmt .)
    WHILE           reduce using rule 13 (statement -> while_stmt .)
    FOR             reduce using rule 13 (statement -> while_stmt .)
    PRINT           reduce using rule 13 (statement -> while_stmt .)
    ID              reduce using rule 13 (statement -> while_stmt .)
    STRING          reduce using rule 13 (statement -> while_stmt .)
    NOT             reduce using rule 13 (statement -> while_stmt .)
    NULL            reduce using rule 13 (statement -> while_stmt .)
    PLUS            reduce using rule 13 (statement -> while_stmt .)
    MINUS           reduce using rule 13 (statement -> while_stmt .)
    INTEGER         reduce using rule 13 (statement -> while_stmt .)
    FLOAT           reduce using rule 13 (statement -> while_stmt .)
    LPAREN          reduce using rule 13 (statement -> while_stmt .)
    BOOLEAN         reduce using rule 13 (statement -> while_stmt .)
    $end            reduce using rule 13 (statement -> while_stmt .)
    RBRACE          reduce using rule 13 (statement -> while_stmt .)


state 15

    (14) statement -> for_stmt .

    FINAL           reduce using rule 14 (statement -> for_stmt .)
    FN              reduce using rule 14 (statement -> for_stmt .)
    IF              reduce using rule 14 (statement -> for_stmt .)
    WHILE           reduce using rule 14 (statement -> for_stmt .)
    FOR             reduce using rule 14 (statement -> for_stmt .)
    PRINT           reduce using rule 14 (statement -> for_stmt .)
    ID              reduce using rule 14 (statement -> for_stmt .)
    STRING          reduce using rule 14 (statement -> for_stmt .)
    NOT             reduce using rule 14 (statement -> for_stmt .)
    NULL            reduce using rule 14 (statement -> for_stmt .)
    PLUS            reduce using rule 14 (statement -> for_stmt .)
    MINUS           reduce using rule 14 (statement -> for_stmt .)
    INTEGER         reduce using rule 14 (statement -> for_stmt .)
    FLOAT           reduce using rule 14 (statement -> for_stmt .)
    LPAREN          reduce using rule 14 (statement -> for_stmt .)
    BOOLEAN         reduce using rule 14 (statement -> for_stmt .)
    $end            reduce using rule 14 (statement -> for_stmt .)
    RBRACE          reduce using rule 14 (statement -> for_stmt .)


state 16

    (15) statement -> print_stmt . SEMI

    SEMI            shift and go to state 56


state 17

    (60) var_assign -> var . ASSIGN expr
    (62) var_compound_assign -> var . PLUS_ASSIGN num_expr
    (63) var_compound_assign -> var . MINUS_ASSIGN num_expr
    (64) var_compound_assign -> var . TIMES_ASSIGN num_expr
    (65) var_compound_assign -> var . DIVIDE_ASSIGN num_expr
    (66) var_compound_assign -> var . POWER_ASSIGN num_expr
    (67) var_compound_assign -> var . MODULO_ASSIGN num_expr
    (68) var_compound_assign -> var . INT_DIVIDE_ASSIGN num_expr
    (69) concat_assign -> var . CONCAT_ASSIGN string_expr
    (70) var_auto -> var . INCREMENT
    (71) var_auto -> var . DECREMENT
    (77) expr -> var .
    (96) string_expr -> var .
    (35) func_call -> var . LPAREN arguments_list RPAREN
    (85) num_factor -> var .
    (104) boolean_factor -> var .

  ! reduce/reduce conflict for SEMI resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for SEMI resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for SEMI resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 77 (expr -> var .)
    ASSIGN          shift and go to state 57
    PLUS_ASSIGN     shift and go to state 58
    MINUS_ASSIGN    shift and go to state 59
    TIMES_ASSIGN    shift and go to state 60
    DIVIDE_ASSIGN   shift and go to state 61
    POWER_ASSIGN    shift and go to state 62
    MODULO_ASSIGN   shift and go to state 63
    INT_DIVIDE_ASSIGN shift and go to state 64
    CONCAT_ASSIGN   shift and go to state 65
    INCREMENT       shift and go to state 66
    DECREMENT       shift and go to state 67
    SEMI            reduce using rule 77 (expr -> var .)
    EQ              reduce using rule 77 (expr -> var .)
    NE              reduce using rule 77 (expr -> var .)
    LT              reduce using rule 77 (expr -> var .)
    GT              reduce using rule 77 (expr -> var .)
    LE              reduce using rule 77 (expr -> var .)
    GE              reduce using rule 77 (expr -> var .)
    CONCAT          reduce using rule 96 (string_expr -> var .)
    LPAREN          shift and go to state 68
    PLUS            reduce using rule 85 (num_factor -> var .)
    MINUS           reduce using rule 85 (num_factor -> var .)
    TIMES           reduce using rule 85 (num_factor -> var .)
    DIVIDE          reduce using rule 85 (num_factor -> var .)
    INT_DIVIDE      reduce using rule 85 (num_factor -> var .)
    POWER           reduce using rule 85 (num_factor -> var .)
    MODULO          reduce using rule 85 (num_factor -> var .)
    AND             reduce using rule 104 (boolean_factor -> var .)
    OR              reduce using rule 104 (boolean_factor -> var .)
    TERNARY_Q       reduce using rule 104 (boolean_factor -> var .)

  ! SEMI            [ reduce using rule 96 (string_expr -> var .) ]
  ! EQ              [ reduce using rule 96 (string_expr -> var .) ]
  ! NE              [ reduce using rule 96 (string_expr -> var .) ]
  ! LT              [ reduce using rule 96 (string_expr -> var .) ]
  ! GT              [ reduce using rule 96 (string_expr -> var .) ]
  ! LE              [ reduce using rule 96 (string_expr -> var .) ]
  ! GE              [ reduce using rule 96 (string_expr -> var .) ]
  ! SEMI            [ reduce using rule 85 (num_factor -> var .) ]
  ! EQ              [ reduce using rule 85 (num_factor -> var .) ]
  ! NE              [ reduce using rule 85 (num_factor -> var .) ]
  ! LT              [ reduce using rule 85 (num_factor -> var .) ]
  ! GT              [ reduce using rule 85 (num_factor -> var .) ]
  ! LE              [ reduce using rule 85 (num_factor -> var .) ]
  ! GE              [ reduce using rule 85 (num_factor -> var .) ]
  ! SEMI            [ reduce using rule 104 (boolean_factor -> var .) ]
  ! EQ              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! NE              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! LT              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! GT              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! LE              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! GE              [ reduce using rule 104 (boolean_factor -> var .) ]


state 18

    (61) final_assign -> FINAL . var ASSIGN expr
    (59) var -> . ID

    ID              shift and go to state 31

    var                            shift and go to state 69

state 19

    (73) expr -> num_expr .
    (86) num_expr -> num_expr . PLUS num_expr
    (87) num_expr -> num_expr . MINUS num_expr
    (88) num_expr -> num_expr . TIMES num_expr
    (89) num_expr -> num_expr . DIVIDE num_expr
    (90) num_expr -> num_expr . INT_DIVIDE num_expr
    (91) num_expr -> num_expr . POWER num_expr
    (92) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 73 (expr -> num_expr .)
    EQ              reduce using rule 73 (expr -> num_expr .)
    NE              reduce using rule 73 (expr -> num_expr .)
    LT              reduce using rule 73 (expr -> num_expr .)
    GT              reduce using rule 73 (expr -> num_expr .)
    LE              reduce using rule 73 (expr -> num_expr .)
    GE              reduce using rule 73 (expr -> num_expr .)
    AND             reduce using rule 73 (expr -> num_expr .)
    OR              reduce using rule 73 (expr -> num_expr .)
    TERNARY_Q       reduce using rule 73 (expr -> num_expr .)
    RPAREN          reduce using rule 73 (expr -> num_expr .)
    COMMA           reduce using rule 73 (expr -> num_expr .)
    TERNARY_C       reduce using rule 73 (expr -> num_expr .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73
    INT_DIVIDE      shift and go to state 74
    POWER           shift and go to state 75
    MODULO          shift and go to state 76


state 20

    (72) expr -> string_expr .
    (94) string_expr -> string_expr . CONCAT string_expr

    SEMI            reduce using rule 72 (expr -> string_expr .)
    EQ              reduce using rule 72 (expr -> string_expr .)
    NE              reduce using rule 72 (expr -> string_expr .)
    LT              reduce using rule 72 (expr -> string_expr .)
    GT              reduce using rule 72 (expr -> string_expr .)
    LE              reduce using rule 72 (expr -> string_expr .)
    GE              reduce using rule 72 (expr -> string_expr .)
    AND             reduce using rule 72 (expr -> string_expr .)
    OR              reduce using rule 72 (expr -> string_expr .)
    TERNARY_Q       reduce using rule 72 (expr -> string_expr .)
    RPAREN          reduce using rule 72 (expr -> string_expr .)
    COMMA           reduce using rule 72 (expr -> string_expr .)
    TERNARY_C       reduce using rule 72 (expr -> string_expr .)
    CONCAT          shift and go to state 77


state 21

    (74) expr -> boolean_expr .
    (97) boolean_expr -> boolean_expr . AND boolean_expr
    (98) boolean_expr -> boolean_expr . OR boolean_expr
    (112) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for TERNARY_Q resolved as shift
    SEMI            reduce using rule 74 (expr -> boolean_expr .)
    EQ              reduce using rule 74 (expr -> boolean_expr .)
    NE              reduce using rule 74 (expr -> boolean_expr .)
    LT              reduce using rule 74 (expr -> boolean_expr .)
    GT              reduce using rule 74 (expr -> boolean_expr .)
    LE              reduce using rule 74 (expr -> boolean_expr .)
    GE              reduce using rule 74 (expr -> boolean_expr .)
    RPAREN          reduce using rule 74 (expr -> boolean_expr .)
    COMMA           reduce using rule 74 (expr -> boolean_expr .)
    TERNARY_C       reduce using rule 74 (expr -> boolean_expr .)
    AND             shift and go to state 78
    OR              shift and go to state 79
    TERNARY_Q       shift and go to state 80

  ! AND             [ reduce using rule 74 (expr -> boolean_expr .) ]
  ! OR              [ reduce using rule 74 (expr -> boolean_expr .) ]
  ! TERNARY_Q       [ reduce using rule 74 (expr -> boolean_expr .) ]


state 22

    (75) expr -> null_expr .

    SEMI            reduce using rule 75 (expr -> null_expr .)
    EQ              reduce using rule 75 (expr -> null_expr .)
    NE              reduce using rule 75 (expr -> null_expr .)
    LT              reduce using rule 75 (expr -> null_expr .)
    GT              reduce using rule 75 (expr -> null_expr .)
    LE              reduce using rule 75 (expr -> null_expr .)
    GE              reduce using rule 75 (expr -> null_expr .)
    AND             reduce using rule 75 (expr -> null_expr .)
    OR              reduce using rule 75 (expr -> null_expr .)
    TERNARY_Q       reduce using rule 75 (expr -> null_expr .)
    RPAREN          reduce using rule 75 (expr -> null_expr .)
    COMMA           reduce using rule 75 (expr -> null_expr .)
    TERNARY_C       reduce using rule 75 (expr -> null_expr .)


state 23

    (76) expr -> ternary_expr .

    SEMI            reduce using rule 76 (expr -> ternary_expr .)
    EQ              reduce using rule 76 (expr -> ternary_expr .)
    NE              reduce using rule 76 (expr -> ternary_expr .)
    LT              reduce using rule 76 (expr -> ternary_expr .)
    GT              reduce using rule 76 (expr -> ternary_expr .)
    LE              reduce using rule 76 (expr -> ternary_expr .)
    GE              reduce using rule 76 (expr -> ternary_expr .)
    AND             reduce using rule 76 (expr -> ternary_expr .)
    OR              reduce using rule 76 (expr -> ternary_expr .)
    TERNARY_Q       reduce using rule 76 (expr -> ternary_expr .)
    RPAREN          reduce using rule 76 (expr -> ternary_expr .)
    COMMA           reduce using rule 76 (expr -> ternary_expr .)
    TERNARY_C       reduce using rule 76 (expr -> ternary_expr .)


state 24

    (78) expr -> func_call .
    (84) num_factor -> func_call .

  ! reduce/reduce conflict for SEMI resolved using rule 78 (expr -> func_call .)
  ! reduce/reduce conflict for EQ resolved using rule 78 (expr -> func_call .)
  ! reduce/reduce conflict for NE resolved using rule 78 (expr -> func_call .)
  ! reduce/reduce conflict for LT resolved using rule 78 (expr -> func_call .)
  ! reduce/reduce conflict for GT resolved using rule 78 (expr -> func_call .)
  ! reduce/reduce conflict for LE resolved using rule 78 (expr -> func_call .)
  ! reduce/reduce conflict for GE resolved using rule 78 (expr -> func_call .)
  ! reduce/reduce conflict for AND resolved using rule 78 (expr -> func_call .)
  ! reduce/reduce conflict for OR resolved using rule 78 (expr -> func_call .)
  ! reduce/reduce conflict for TERNARY_Q resolved using rule 78 (expr -> func_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 78 (expr -> func_call .)
  ! reduce/reduce conflict for COMMA resolved using rule 78 (expr -> func_call .)
  ! reduce/reduce conflict for TERNARY_C resolved using rule 78 (expr -> func_call .)
    SEMI            reduce using rule 78 (expr -> func_call .)
    EQ              reduce using rule 78 (expr -> func_call .)
    NE              reduce using rule 78 (expr -> func_call .)
    LT              reduce using rule 78 (expr -> func_call .)
    GT              reduce using rule 78 (expr -> func_call .)
    LE              reduce using rule 78 (expr -> func_call .)
    GE              reduce using rule 78 (expr -> func_call .)
    AND             reduce using rule 78 (expr -> func_call .)
    OR              reduce using rule 78 (expr -> func_call .)
    TERNARY_Q       reduce using rule 78 (expr -> func_call .)
    RPAREN          reduce using rule 78 (expr -> func_call .)
    COMMA           reduce using rule 78 (expr -> func_call .)
    TERNARY_C       reduce using rule 78 (expr -> func_call .)
    PLUS            reduce using rule 84 (num_factor -> func_call .)
    MINUS           reduce using rule 84 (num_factor -> func_call .)
    TIMES           reduce using rule 84 (num_factor -> func_call .)
    DIVIDE          reduce using rule 84 (num_factor -> func_call .)
    INT_DIVIDE      reduce using rule 84 (num_factor -> func_call .)
    POWER           reduce using rule 84 (num_factor -> func_call .)
    MODULO          reduce using rule 84 (num_factor -> func_call .)

  ! SEMI            [ reduce using rule 84 (num_factor -> func_call .) ]
  ! EQ              [ reduce using rule 84 (num_factor -> func_call .) ]
  ! NE              [ reduce using rule 84 (num_factor -> func_call .) ]
  ! LT              [ reduce using rule 84 (num_factor -> func_call .) ]
  ! GT              [ reduce using rule 84 (num_factor -> func_call .) ]
  ! LE              [ reduce using rule 84 (num_factor -> func_call .) ]
  ! GE              [ reduce using rule 84 (num_factor -> func_call .) ]
  ! AND             [ reduce using rule 84 (num_factor -> func_call .) ]
  ! OR              [ reduce using rule 84 (num_factor -> func_call .) ]
  ! TERNARY_Q       [ reduce using rule 84 (num_factor -> func_call .) ]
  ! RPAREN          [ reduce using rule 84 (num_factor -> func_call .) ]
  ! COMMA           [ reduce using rule 84 (num_factor -> func_call .) ]
  ! TERNARY_C       [ reduce using rule 84 (num_factor -> func_call .) ]


state 25

    (34) func_stmt -> FN . var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (59) var -> . ID

    ID              shift and go to state 31

    var                            shift and go to state 81

state 26

    (83) num_factor -> LPAREN . num_expr RPAREN
    (101) boolean_factor -> LPAREN . boolean_expr RPAREN
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (59) var -> . ID
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr

    NOT             shift and go to state 36
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NULL            shift and go to state 38

    num_expr                       shift and go to state 82
    boolean_expr                   shift and go to state 83
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    func_call                      shift and go to state 84
    var                            shift and go to state 85
    comparison                     shift and go to state 42
    expr                           shift and go to state 86
    string_expr                    shift and go to state 20
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23

state 27

    (44) if_stmt -> IF . LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt

    LPAREN          shift and go to state 87


state 28

    (57) while_stmt -> WHILE . LPAREN boolean_expr RPAREN LBRACE block RBRACE

    LPAREN          shift and go to state 88


state 29

    (58) for_stmt -> FOR . LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE

    LPAREN          shift and go to state 89


state 30

    (56) print_stmt -> PRINT . LPAREN expr RPAREN

    LPAREN          shift and go to state 90


state 31

    (59) var -> ID .

    ASSIGN          reduce using rule 59 (var -> ID .)
    PLUS_ASSIGN     reduce using rule 59 (var -> ID .)
    MINUS_ASSIGN    reduce using rule 59 (var -> ID .)
    TIMES_ASSIGN    reduce using rule 59 (var -> ID .)
    DIVIDE_ASSIGN   reduce using rule 59 (var -> ID .)
    POWER_ASSIGN    reduce using rule 59 (var -> ID .)
    MODULO_ASSIGN   reduce using rule 59 (var -> ID .)
    INT_DIVIDE_ASSIGN reduce using rule 59 (var -> ID .)
    CONCAT_ASSIGN   reduce using rule 59 (var -> ID .)
    INCREMENT       reduce using rule 59 (var -> ID .)
    DECREMENT       reduce using rule 59 (var -> ID .)
    LPAREN          reduce using rule 59 (var -> ID .)
    SEMI            reduce using rule 59 (var -> ID .)
    EQ              reduce using rule 59 (var -> ID .)
    NE              reduce using rule 59 (var -> ID .)
    LT              reduce using rule 59 (var -> ID .)
    GT              reduce using rule 59 (var -> ID .)
    LE              reduce using rule 59 (var -> ID .)
    GE              reduce using rule 59 (var -> ID .)
    CONCAT          reduce using rule 59 (var -> ID .)
    PLUS            reduce using rule 59 (var -> ID .)
    MINUS           reduce using rule 59 (var -> ID .)
    TIMES           reduce using rule 59 (var -> ID .)
    DIVIDE          reduce using rule 59 (var -> ID .)
    INT_DIVIDE      reduce using rule 59 (var -> ID .)
    POWER           reduce using rule 59 (var -> ID .)
    MODULO          reduce using rule 59 (var -> ID .)
    AND             reduce using rule 59 (var -> ID .)
    OR              reduce using rule 59 (var -> ID .)
    TERNARY_Q       reduce using rule 59 (var -> ID .)
    RPAREN          reduce using rule 59 (var -> ID .)
    COMMA           reduce using rule 59 (var -> ID .)
    TERNARY_C       reduce using rule 59 (var -> ID .)


state 32

    (95) string_expr -> STRING .

    CONCAT          reduce using rule 95 (string_expr -> STRING .)
    SEMI            reduce using rule 95 (string_expr -> STRING .)
    EQ              reduce using rule 95 (string_expr -> STRING .)
    NE              reduce using rule 95 (string_expr -> STRING .)
    LT              reduce using rule 95 (string_expr -> STRING .)
    GT              reduce using rule 95 (string_expr -> STRING .)
    LE              reduce using rule 95 (string_expr -> STRING .)
    GE              reduce using rule 95 (string_expr -> STRING .)
    AND             reduce using rule 95 (string_expr -> STRING .)
    OR              reduce using rule 95 (string_expr -> STRING .)
    TERNARY_Q       reduce using rule 95 (string_expr -> STRING .)
    RPAREN          reduce using rule 95 (string_expr -> STRING .)
    COMMA           reduce using rule 95 (string_expr -> STRING .)
    TERNARY_C       reduce using rule 95 (string_expr -> STRING .)


state 33

    (79) num_factor -> PLUS . num_factor
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (59) var -> . ID

    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 92
    ID              shift and go to state 31

    num_factor                     shift and go to state 91
    func_call                      shift and go to state 93
    var                            shift and go to state 94

state 34

    (80) num_factor -> MINUS . num_factor
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (59) var -> . ID

    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 92
    ID              shift and go to state 31

    num_factor                     shift and go to state 95
    func_call                      shift and go to state 93
    var                            shift and go to state 94

state 35

    (93) num_expr -> num_factor .

    PLUS            reduce using rule 93 (num_expr -> num_factor .)
    MINUS           reduce using rule 93 (num_expr -> num_factor .)
    TIMES           reduce using rule 93 (num_expr -> num_factor .)
    DIVIDE          reduce using rule 93 (num_expr -> num_factor .)
    INT_DIVIDE      reduce using rule 93 (num_expr -> num_factor .)
    POWER           reduce using rule 93 (num_expr -> num_factor .)
    MODULO          reduce using rule 93 (num_expr -> num_factor .)
    SEMI            reduce using rule 93 (num_expr -> num_factor .)
    EQ              reduce using rule 93 (num_expr -> num_factor .)
    NE              reduce using rule 93 (num_expr -> num_factor .)
    LT              reduce using rule 93 (num_expr -> num_factor .)
    GT              reduce using rule 93 (num_expr -> num_factor .)
    LE              reduce using rule 93 (num_expr -> num_factor .)
    GE              reduce using rule 93 (num_expr -> num_factor .)
    RPAREN          reduce using rule 93 (num_expr -> num_factor .)
    AND             reduce using rule 93 (num_expr -> num_factor .)
    OR              reduce using rule 93 (num_expr -> num_factor .)
    TERNARY_Q       reduce using rule 93 (num_expr -> num_factor .)
    COMMA           reduce using rule 93 (num_expr -> num_factor .)
    TERNARY_C       reduce using rule 93 (num_expr -> num_factor .)


state 36

    (99) boolean_expr -> NOT . boolean_expr
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr
    (59) var -> . ID
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var

    NOT             shift and go to state 36
    LPAREN          shift and go to state 97
    BOOLEAN         shift and go to state 41
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    boolean_expr                   shift and go to state 96
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42
    var                            shift and go to state 98
    expr                           shift and go to state 86
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35

state 37

    (100) boolean_expr -> boolean_factor .

    AND             reduce using rule 100 (boolean_expr -> boolean_factor .)
    OR              reduce using rule 100 (boolean_expr -> boolean_factor .)
    TERNARY_Q       reduce using rule 100 (boolean_expr -> boolean_factor .)
    SEMI            reduce using rule 100 (boolean_expr -> boolean_factor .)
    EQ              reduce using rule 100 (boolean_expr -> boolean_factor .)
    NE              reduce using rule 100 (boolean_expr -> boolean_factor .)
    LT              reduce using rule 100 (boolean_expr -> boolean_factor .)
    GT              reduce using rule 100 (boolean_expr -> boolean_factor .)
    LE              reduce using rule 100 (boolean_expr -> boolean_factor .)
    GE              reduce using rule 100 (boolean_expr -> boolean_factor .)
    RPAREN          reduce using rule 100 (boolean_expr -> boolean_factor .)
    COMMA           reduce using rule 100 (boolean_expr -> boolean_factor .)
    TERNARY_C       reduce using rule 100 (boolean_expr -> boolean_factor .)


state 38

    (111) null_expr -> NULL .

    SEMI            reduce using rule 111 (null_expr -> NULL .)
    EQ              reduce using rule 111 (null_expr -> NULL .)
    NE              reduce using rule 111 (null_expr -> NULL .)
    LT              reduce using rule 111 (null_expr -> NULL .)
    GT              reduce using rule 111 (null_expr -> NULL .)
    LE              reduce using rule 111 (null_expr -> NULL .)
    GE              reduce using rule 111 (null_expr -> NULL .)
    AND             reduce using rule 111 (null_expr -> NULL .)
    OR              reduce using rule 111 (null_expr -> NULL .)
    TERNARY_Q       reduce using rule 111 (null_expr -> NULL .)
    RPAREN          reduce using rule 111 (null_expr -> NULL .)
    COMMA           reduce using rule 111 (null_expr -> NULL .)
    TERNARY_C       reduce using rule 111 (null_expr -> NULL .)


state 39

    (81) num_factor -> INTEGER .

    PLUS            reduce using rule 81 (num_factor -> INTEGER .)
    MINUS           reduce using rule 81 (num_factor -> INTEGER .)
    TIMES           reduce using rule 81 (num_factor -> INTEGER .)
    DIVIDE          reduce using rule 81 (num_factor -> INTEGER .)
    INT_DIVIDE      reduce using rule 81 (num_factor -> INTEGER .)
    POWER           reduce using rule 81 (num_factor -> INTEGER .)
    MODULO          reduce using rule 81 (num_factor -> INTEGER .)
    SEMI            reduce using rule 81 (num_factor -> INTEGER .)
    EQ              reduce using rule 81 (num_factor -> INTEGER .)
    NE              reduce using rule 81 (num_factor -> INTEGER .)
    LT              reduce using rule 81 (num_factor -> INTEGER .)
    GT              reduce using rule 81 (num_factor -> INTEGER .)
    LE              reduce using rule 81 (num_factor -> INTEGER .)
    GE              reduce using rule 81 (num_factor -> INTEGER .)
    RPAREN          reduce using rule 81 (num_factor -> INTEGER .)
    AND             reduce using rule 81 (num_factor -> INTEGER .)
    OR              reduce using rule 81 (num_factor -> INTEGER .)
    TERNARY_Q       reduce using rule 81 (num_factor -> INTEGER .)
    COMMA           reduce using rule 81 (num_factor -> INTEGER .)
    TERNARY_C       reduce using rule 81 (num_factor -> INTEGER .)


state 40

    (82) num_factor -> FLOAT .

    PLUS            reduce using rule 82 (num_factor -> FLOAT .)
    MINUS           reduce using rule 82 (num_factor -> FLOAT .)
    TIMES           reduce using rule 82 (num_factor -> FLOAT .)
    DIVIDE          reduce using rule 82 (num_factor -> FLOAT .)
    INT_DIVIDE      reduce using rule 82 (num_factor -> FLOAT .)
    POWER           reduce using rule 82 (num_factor -> FLOAT .)
    MODULO          reduce using rule 82 (num_factor -> FLOAT .)
    SEMI            reduce using rule 82 (num_factor -> FLOAT .)
    EQ              reduce using rule 82 (num_factor -> FLOAT .)
    NE              reduce using rule 82 (num_factor -> FLOAT .)
    LT              reduce using rule 82 (num_factor -> FLOAT .)
    GT              reduce using rule 82 (num_factor -> FLOAT .)
    LE              reduce using rule 82 (num_factor -> FLOAT .)
    GE              reduce using rule 82 (num_factor -> FLOAT .)
    RPAREN          reduce using rule 82 (num_factor -> FLOAT .)
    AND             reduce using rule 82 (num_factor -> FLOAT .)
    OR              reduce using rule 82 (num_factor -> FLOAT .)
    TERNARY_Q       reduce using rule 82 (num_factor -> FLOAT .)
    COMMA           reduce using rule 82 (num_factor -> FLOAT .)
    TERNARY_C       reduce using rule 82 (num_factor -> FLOAT .)


state 41

    (102) boolean_factor -> BOOLEAN .

    AND             reduce using rule 102 (boolean_factor -> BOOLEAN .)
    OR              reduce using rule 102 (boolean_factor -> BOOLEAN .)
    TERNARY_Q       reduce using rule 102 (boolean_factor -> BOOLEAN .)
    SEMI            reduce using rule 102 (boolean_factor -> BOOLEAN .)
    EQ              reduce using rule 102 (boolean_factor -> BOOLEAN .)
    NE              reduce using rule 102 (boolean_factor -> BOOLEAN .)
    LT              reduce using rule 102 (boolean_factor -> BOOLEAN .)
    GT              reduce using rule 102 (boolean_factor -> BOOLEAN .)
    LE              reduce using rule 102 (boolean_factor -> BOOLEAN .)
    GE              reduce using rule 102 (boolean_factor -> BOOLEAN .)
    RPAREN          reduce using rule 102 (boolean_factor -> BOOLEAN .)
    COMMA           reduce using rule 102 (boolean_factor -> BOOLEAN .)
    TERNARY_C       reduce using rule 102 (boolean_factor -> BOOLEAN .)


state 42

    (103) boolean_factor -> comparison .

    AND             reduce using rule 103 (boolean_factor -> comparison .)
    OR              reduce using rule 103 (boolean_factor -> comparison .)
    TERNARY_Q       reduce using rule 103 (boolean_factor -> comparison .)
    SEMI            reduce using rule 103 (boolean_factor -> comparison .)
    EQ              reduce using rule 103 (boolean_factor -> comparison .)
    NE              reduce using rule 103 (boolean_factor -> comparison .)
    LT              reduce using rule 103 (boolean_factor -> comparison .)
    GT              reduce using rule 103 (boolean_factor -> comparison .)
    LE              reduce using rule 103 (boolean_factor -> comparison .)
    GE              reduce using rule 103 (boolean_factor -> comparison .)
    RPAREN          reduce using rule 103 (boolean_factor -> comparison .)
    COMMA           reduce using rule 103 (boolean_factor -> comparison .)
    TERNARY_C       reduce using rule 103 (boolean_factor -> comparison .)


state 43

    (3) statement_list -> statement statement_list .

    $end            reduce using rule 3 (statement_list -> statement statement_list .)
    RBRACE          reduce using rule 3 (statement_list -> statement statement_list .)


state 44

    (5) statement -> var_assign SEMI .

    FINAL           reduce using rule 5 (statement -> var_assign SEMI .)
    FN              reduce using rule 5 (statement -> var_assign SEMI .)
    IF              reduce using rule 5 (statement -> var_assign SEMI .)
    WHILE           reduce using rule 5 (statement -> var_assign SEMI .)
    FOR             reduce using rule 5 (statement -> var_assign SEMI .)
    PRINT           reduce using rule 5 (statement -> var_assign SEMI .)
    ID              reduce using rule 5 (statement -> var_assign SEMI .)
    STRING          reduce using rule 5 (statement -> var_assign SEMI .)
    NOT             reduce using rule 5 (statement -> var_assign SEMI .)
    NULL            reduce using rule 5 (statement -> var_assign SEMI .)
    PLUS            reduce using rule 5 (statement -> var_assign SEMI .)
    MINUS           reduce using rule 5 (statement -> var_assign SEMI .)
    INTEGER         reduce using rule 5 (statement -> var_assign SEMI .)
    FLOAT           reduce using rule 5 (statement -> var_assign SEMI .)
    LPAREN          reduce using rule 5 (statement -> var_assign SEMI .)
    BOOLEAN         reduce using rule 5 (statement -> var_assign SEMI .)
    $end            reduce using rule 5 (statement -> var_assign SEMI .)
    RBRACE          reduce using rule 5 (statement -> var_assign SEMI .)


state 45

    (6) statement -> final_assign SEMI .

    FINAL           reduce using rule 6 (statement -> final_assign SEMI .)
    FN              reduce using rule 6 (statement -> final_assign SEMI .)
    IF              reduce using rule 6 (statement -> final_assign SEMI .)
    WHILE           reduce using rule 6 (statement -> final_assign SEMI .)
    FOR             reduce using rule 6 (statement -> final_assign SEMI .)
    PRINT           reduce using rule 6 (statement -> final_assign SEMI .)
    ID              reduce using rule 6 (statement -> final_assign SEMI .)
    STRING          reduce using rule 6 (statement -> final_assign SEMI .)
    NOT             reduce using rule 6 (statement -> final_assign SEMI .)
    NULL            reduce using rule 6 (statement -> final_assign SEMI .)
    PLUS            reduce using rule 6 (statement -> final_assign SEMI .)
    MINUS           reduce using rule 6 (statement -> final_assign SEMI .)
    INTEGER         reduce using rule 6 (statement -> final_assign SEMI .)
    FLOAT           reduce using rule 6 (statement -> final_assign SEMI .)
    LPAREN          reduce using rule 6 (statement -> final_assign SEMI .)
    BOOLEAN         reduce using rule 6 (statement -> final_assign SEMI .)
    $end            reduce using rule 6 (statement -> final_assign SEMI .)
    RBRACE          reduce using rule 6 (statement -> final_assign SEMI .)


state 46

    (7) statement -> var_compound_assign SEMI .

    FINAL           reduce using rule 7 (statement -> var_compound_assign SEMI .)
    FN              reduce using rule 7 (statement -> var_compound_assign SEMI .)
    IF              reduce using rule 7 (statement -> var_compound_assign SEMI .)
    WHILE           reduce using rule 7 (statement -> var_compound_assign SEMI .)
    FOR             reduce using rule 7 (statement -> var_compound_assign SEMI .)
    PRINT           reduce using rule 7 (statement -> var_compound_assign SEMI .)
    ID              reduce using rule 7 (statement -> var_compound_assign SEMI .)
    STRING          reduce using rule 7 (statement -> var_compound_assign SEMI .)
    NOT             reduce using rule 7 (statement -> var_compound_assign SEMI .)
    NULL            reduce using rule 7 (statement -> var_compound_assign SEMI .)
    PLUS            reduce using rule 7 (statement -> var_compound_assign SEMI .)
    MINUS           reduce using rule 7 (statement -> var_compound_assign SEMI .)
    INTEGER         reduce using rule 7 (statement -> var_compound_assign SEMI .)
    FLOAT           reduce using rule 7 (statement -> var_compound_assign SEMI .)
    LPAREN          reduce using rule 7 (statement -> var_compound_assign SEMI .)
    BOOLEAN         reduce using rule 7 (statement -> var_compound_assign SEMI .)
    $end            reduce using rule 7 (statement -> var_compound_assign SEMI .)
    RBRACE          reduce using rule 7 (statement -> var_compound_assign SEMI .)


state 47

    (8) statement -> concat_assign SEMI .

    FINAL           reduce using rule 8 (statement -> concat_assign SEMI .)
    FN              reduce using rule 8 (statement -> concat_assign SEMI .)
    IF              reduce using rule 8 (statement -> concat_assign SEMI .)
    WHILE           reduce using rule 8 (statement -> concat_assign SEMI .)
    FOR             reduce using rule 8 (statement -> concat_assign SEMI .)
    PRINT           reduce using rule 8 (statement -> concat_assign SEMI .)
    ID              reduce using rule 8 (statement -> concat_assign SEMI .)
    STRING          reduce using rule 8 (statement -> concat_assign SEMI .)
    NOT             reduce using rule 8 (statement -> concat_assign SEMI .)
    NULL            reduce using rule 8 (statement -> concat_assign SEMI .)
    PLUS            reduce using rule 8 (statement -> concat_assign SEMI .)
    MINUS           reduce using rule 8 (statement -> concat_assign SEMI .)
    INTEGER         reduce using rule 8 (statement -> concat_assign SEMI .)
    FLOAT           reduce using rule 8 (statement -> concat_assign SEMI .)
    LPAREN          reduce using rule 8 (statement -> concat_assign SEMI .)
    BOOLEAN         reduce using rule 8 (statement -> concat_assign SEMI .)
    $end            reduce using rule 8 (statement -> concat_assign SEMI .)
    RBRACE          reduce using rule 8 (statement -> concat_assign SEMI .)


state 48

    (9) statement -> var_auto SEMI .

    FINAL           reduce using rule 9 (statement -> var_auto SEMI .)
    FN              reduce using rule 9 (statement -> var_auto SEMI .)
    IF              reduce using rule 9 (statement -> var_auto SEMI .)
    WHILE           reduce using rule 9 (statement -> var_auto SEMI .)
    FOR             reduce using rule 9 (statement -> var_auto SEMI .)
    PRINT           reduce using rule 9 (statement -> var_auto SEMI .)
    ID              reduce using rule 9 (statement -> var_auto SEMI .)
    STRING          reduce using rule 9 (statement -> var_auto SEMI .)
    NOT             reduce using rule 9 (statement -> var_auto SEMI .)
    NULL            reduce using rule 9 (statement -> var_auto SEMI .)
    PLUS            reduce using rule 9 (statement -> var_auto SEMI .)
    MINUS           reduce using rule 9 (statement -> var_auto SEMI .)
    INTEGER         reduce using rule 9 (statement -> var_auto SEMI .)
    FLOAT           reduce using rule 9 (statement -> var_auto SEMI .)
    LPAREN          reduce using rule 9 (statement -> var_auto SEMI .)
    BOOLEAN         reduce using rule 9 (statement -> var_auto SEMI .)
    $end            reduce using rule 9 (statement -> var_auto SEMI .)
    RBRACE          reduce using rule 9 (statement -> var_auto SEMI .)


state 49

    (10) statement -> expr SEMI .

    FINAL           reduce using rule 10 (statement -> expr SEMI .)
    FN              reduce using rule 10 (statement -> expr SEMI .)
    IF              reduce using rule 10 (statement -> expr SEMI .)
    WHILE           reduce using rule 10 (statement -> expr SEMI .)
    FOR             reduce using rule 10 (statement -> expr SEMI .)
    PRINT           reduce using rule 10 (statement -> expr SEMI .)
    ID              reduce using rule 10 (statement -> expr SEMI .)
    STRING          reduce using rule 10 (statement -> expr SEMI .)
    NOT             reduce using rule 10 (statement -> expr SEMI .)
    NULL            reduce using rule 10 (statement -> expr SEMI .)
    PLUS            reduce using rule 10 (statement -> expr SEMI .)
    MINUS           reduce using rule 10 (statement -> expr SEMI .)
    INTEGER         reduce using rule 10 (statement -> expr SEMI .)
    FLOAT           reduce using rule 10 (statement -> expr SEMI .)
    LPAREN          reduce using rule 10 (statement -> expr SEMI .)
    BOOLEAN         reduce using rule 10 (statement -> expr SEMI .)
    $end            reduce using rule 10 (statement -> expr SEMI .)
    RBRACE          reduce using rule 10 (statement -> expr SEMI .)


state 50

    (105) comparison -> expr EQ . expr
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (59) var -> . ID
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    ID              shift and go to state 31
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

    expr                           shift and go to state 99
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    boolean_expr                   shift and go to state 21
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    var                            shift and go to state 100
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 51

    (106) comparison -> expr NE . expr
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (59) var -> . ID
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    ID              shift and go to state 31
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

    expr                           shift and go to state 101
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    boolean_expr                   shift and go to state 21
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    var                            shift and go to state 100
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 52

    (107) comparison -> expr LT . expr
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (59) var -> . ID
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    ID              shift and go to state 31
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

    expr                           shift and go to state 102
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    boolean_expr                   shift and go to state 21
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    var                            shift and go to state 100
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 53

    (108) comparison -> expr GT . expr
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (59) var -> . ID
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    ID              shift and go to state 31
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

    expr                           shift and go to state 103
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    boolean_expr                   shift and go to state 21
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    var                            shift and go to state 100
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 54

    (109) comparison -> expr LE . expr
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (59) var -> . ID
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    ID              shift and go to state 31
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

    expr                           shift and go to state 104
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    boolean_expr                   shift and go to state 21
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    var                            shift and go to state 100
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 55

    (110) comparison -> expr GE . expr
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (59) var -> . ID
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    ID              shift and go to state 31
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

    expr                           shift and go to state 105
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    boolean_expr                   shift and go to state 21
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    var                            shift and go to state 100
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 56

    (15) statement -> print_stmt SEMI .

    FINAL           reduce using rule 15 (statement -> print_stmt SEMI .)
    FN              reduce using rule 15 (statement -> print_stmt SEMI .)
    IF              reduce using rule 15 (statement -> print_stmt SEMI .)
    WHILE           reduce using rule 15 (statement -> print_stmt SEMI .)
    FOR             reduce using rule 15 (statement -> print_stmt SEMI .)
    PRINT           reduce using rule 15 (statement -> print_stmt SEMI .)
    ID              reduce using rule 15 (statement -> print_stmt SEMI .)
    STRING          reduce using rule 15 (statement -> print_stmt SEMI .)
    NOT             reduce using rule 15 (statement -> print_stmt SEMI .)
    NULL            reduce using rule 15 (statement -> print_stmt SEMI .)
    PLUS            reduce using rule 15 (statement -> print_stmt SEMI .)
    MINUS           reduce using rule 15 (statement -> print_stmt SEMI .)
    INTEGER         reduce using rule 15 (statement -> print_stmt SEMI .)
    FLOAT           reduce using rule 15 (statement -> print_stmt SEMI .)
    LPAREN          reduce using rule 15 (statement -> print_stmt SEMI .)
    BOOLEAN         reduce using rule 15 (statement -> print_stmt SEMI .)
    $end            reduce using rule 15 (statement -> print_stmt SEMI .)
    RBRACE          reduce using rule 15 (statement -> print_stmt SEMI .)


state 57

    (60) var_assign -> var ASSIGN . expr
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (59) var -> . ID
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    ID              shift and go to state 31
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

    var                            shift and go to state 100
    expr                           shift and go to state 106
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    boolean_expr                   shift and go to state 21
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 58

    (62) var_compound_assign -> var PLUS_ASSIGN . num_expr
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (59) var -> . ID

    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 92
    ID              shift and go to state 31

    var                            shift and go to state 94
    num_expr                       shift and go to state 107
    num_factor                     shift and go to state 35
    func_call                      shift and go to state 93

state 59

    (63) var_compound_assign -> var MINUS_ASSIGN . num_expr
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (59) var -> . ID

    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 92
    ID              shift and go to state 31

    var                            shift and go to state 94
    num_expr                       shift and go to state 108
    num_factor                     shift and go to state 35
    func_call                      shift and go to state 93

state 60

    (64) var_compound_assign -> var TIMES_ASSIGN . num_expr
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (59) var -> . ID

    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 92
    ID              shift and go to state 31

    var                            shift and go to state 94
    num_expr                       shift and go to state 109
    num_factor                     shift and go to state 35
    func_call                      shift and go to state 93

state 61

    (65) var_compound_assign -> var DIVIDE_ASSIGN . num_expr
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (59) var -> . ID

    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 92
    ID              shift and go to state 31

    var                            shift and go to state 94
    num_expr                       shift and go to state 110
    num_factor                     shift and go to state 35
    func_call                      shift and go to state 93

state 62

    (66) var_compound_assign -> var POWER_ASSIGN . num_expr
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (59) var -> . ID

    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 92
    ID              shift and go to state 31

    var                            shift and go to state 94
    num_expr                       shift and go to state 111
    num_factor                     shift and go to state 35
    func_call                      shift and go to state 93

state 63

    (67) var_compound_assign -> var MODULO_ASSIGN . num_expr
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (59) var -> . ID

    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 92
    ID              shift and go to state 31

    var                            shift and go to state 94
    num_expr                       shift and go to state 112
    num_factor                     shift and go to state 35
    func_call                      shift and go to state 93

state 64

    (68) var_compound_assign -> var INT_DIVIDE_ASSIGN . num_expr
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (59) var -> . ID

    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 92
    ID              shift and go to state 31

    var                            shift and go to state 94
    num_expr                       shift and go to state 113
    num_factor                     shift and go to state 35
    func_call                      shift and go to state 93

state 65

    (69) concat_assign -> var CONCAT_ASSIGN . string_expr
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (59) var -> . ID

    STRING          shift and go to state 32
    ID              shift and go to state 31

    var                            shift and go to state 114
    string_expr                    shift and go to state 115

state 66

    (70) var_auto -> var INCREMENT .

    SEMI            reduce using rule 70 (var_auto -> var INCREMENT .)
    RPAREN          reduce using rule 70 (var_auto -> var INCREMENT .)


state 67

    (71) var_auto -> var DECREMENT .

    SEMI            reduce using rule 71 (var_auto -> var DECREMENT .)
    RPAREN          reduce using rule 71 (var_auto -> var DECREMENT .)


state 68

    (35) func_call -> var LPAREN . arguments_list RPAREN
    (36) arguments_list -> . non_empty_arguments_list
    (37) arguments_list -> . empty
    (38) non_empty_arguments_list -> . expr COMMA non_empty_arguments_list
    (39) non_empty_arguments_list -> . expr
    (113) empty -> .
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (59) var -> . ID
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

    RPAREN          reduce using rule 113 (empty -> .)
    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    ID              shift and go to state 31
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

    var                            shift and go to state 100
    arguments_list                 shift and go to state 116
    non_empty_arguments_list       shift and go to state 117
    empty                          shift and go to state 118
    expr                           shift and go to state 119
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    boolean_expr                   shift and go to state 21
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 69

    (61) final_assign -> FINAL var . ASSIGN expr

    ASSIGN          shift and go to state 120


state 70

    (86) num_expr -> num_expr PLUS . num_expr
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (59) var -> . ID

    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 92
    ID              shift and go to state 31

    num_expr                       shift and go to state 121
    num_factor                     shift and go to state 35
    func_call                      shift and go to state 93
    var                            shift and go to state 94

state 71

    (87) num_expr -> num_expr MINUS . num_expr
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (59) var -> . ID

    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 92
    ID              shift and go to state 31

    num_expr                       shift and go to state 122
    num_factor                     shift and go to state 35
    func_call                      shift and go to state 93
    var                            shift and go to state 94

state 72

    (88) num_expr -> num_expr TIMES . num_expr
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (59) var -> . ID

    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 92
    ID              shift and go to state 31

    num_expr                       shift and go to state 123
    num_factor                     shift and go to state 35
    func_call                      shift and go to state 93
    var                            shift and go to state 94

state 73

    (89) num_expr -> num_expr DIVIDE . num_expr
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (59) var -> . ID

    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 92
    ID              shift and go to state 31

    num_expr                       shift and go to state 124
    num_factor                     shift and go to state 35
    func_call                      shift and go to state 93
    var                            shift and go to state 94

state 74

    (90) num_expr -> num_expr INT_DIVIDE . num_expr
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (59) var -> . ID

    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 92
    ID              shift and go to state 31

    num_expr                       shift and go to state 125
    num_factor                     shift and go to state 35
    func_call                      shift and go to state 93
    var                            shift and go to state 94

state 75

    (91) num_expr -> num_expr POWER . num_expr
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (59) var -> . ID

    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 92
    ID              shift and go to state 31

    num_expr                       shift and go to state 126
    num_factor                     shift and go to state 35
    func_call                      shift and go to state 93
    var                            shift and go to state 94

state 76

    (92) num_expr -> num_expr MODULO . num_expr
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (59) var -> . ID

    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 92
    ID              shift and go to state 31

    num_expr                       shift and go to state 127
    num_factor                     shift and go to state 35
    func_call                      shift and go to state 93
    var                            shift and go to state 94

state 77

    (94) string_expr -> string_expr CONCAT . string_expr
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (59) var -> . ID

    STRING          shift and go to state 32
    ID              shift and go to state 31

    string_expr                    shift and go to state 128
    var                            shift and go to state 114

state 78

    (97) boolean_expr -> boolean_expr AND . boolean_expr
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr
    (59) var -> . ID
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var

    NOT             shift and go to state 36
    LPAREN          shift and go to state 97
    BOOLEAN         shift and go to state 41
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    boolean_expr                   shift and go to state 129
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42
    var                            shift and go to state 98
    expr                           shift and go to state 86
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35

state 79

    (98) boolean_expr -> boolean_expr OR . boolean_expr
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr
    (59) var -> . ID
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var

    NOT             shift and go to state 36
    LPAREN          shift and go to state 97
    BOOLEAN         shift and go to state 41
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    boolean_expr                   shift and go to state 130
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42
    var                            shift and go to state 98
    expr                           shift and go to state 86
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35

state 80

    (112) ternary_expr -> boolean_expr TERNARY_Q . expr TERNARY_C expr
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (59) var -> . ID
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    ID              shift and go to state 31
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

    boolean_expr                   shift and go to state 21
    expr                           shift and go to state 131
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    var                            shift and go to state 100
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 81

    (34) func_stmt -> FN var . LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE

    LPAREN          shift and go to state 132


state 82

    (83) num_factor -> LPAREN num_expr . RPAREN
    (86) num_expr -> num_expr . PLUS num_expr
    (87) num_expr -> num_expr . MINUS num_expr
    (88) num_expr -> num_expr . TIMES num_expr
    (89) num_expr -> num_expr . DIVIDE num_expr
    (90) num_expr -> num_expr . INT_DIVIDE num_expr
    (91) num_expr -> num_expr . POWER num_expr
    (92) num_expr -> num_expr . MODULO num_expr
    (73) expr -> num_expr .

    RPAREN          shift and go to state 133
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73
    INT_DIVIDE      shift and go to state 74
    POWER           shift and go to state 75
    MODULO          shift and go to state 76
    EQ              reduce using rule 73 (expr -> num_expr .)
    NE              reduce using rule 73 (expr -> num_expr .)
    LT              reduce using rule 73 (expr -> num_expr .)
    GT              reduce using rule 73 (expr -> num_expr .)
    LE              reduce using rule 73 (expr -> num_expr .)
    GE              reduce using rule 73 (expr -> num_expr .)


state 83

    (101) boolean_factor -> LPAREN boolean_expr . RPAREN
    (97) boolean_expr -> boolean_expr . AND boolean_expr
    (98) boolean_expr -> boolean_expr . OR boolean_expr
    (74) expr -> boolean_expr .
    (112) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    RPAREN          shift and go to state 134
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQ              reduce using rule 74 (expr -> boolean_expr .)
    NE              reduce using rule 74 (expr -> boolean_expr .)
    LT              reduce using rule 74 (expr -> boolean_expr .)
    GT              reduce using rule 74 (expr -> boolean_expr .)
    LE              reduce using rule 74 (expr -> boolean_expr .)
    GE              reduce using rule 74 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 80


state 84

    (84) num_factor -> func_call .
    (78) expr -> func_call .

  ! reduce/reduce conflict for EQ resolved using rule 78 (expr -> func_call .)
  ! reduce/reduce conflict for NE resolved using rule 78 (expr -> func_call .)
  ! reduce/reduce conflict for LT resolved using rule 78 (expr -> func_call .)
  ! reduce/reduce conflict for GT resolved using rule 78 (expr -> func_call .)
  ! reduce/reduce conflict for LE resolved using rule 78 (expr -> func_call .)
  ! reduce/reduce conflict for GE resolved using rule 78 (expr -> func_call .)
    RPAREN          reduce using rule 84 (num_factor -> func_call .)
    PLUS            reduce using rule 84 (num_factor -> func_call .)
    MINUS           reduce using rule 84 (num_factor -> func_call .)
    TIMES           reduce using rule 84 (num_factor -> func_call .)
    DIVIDE          reduce using rule 84 (num_factor -> func_call .)
    INT_DIVIDE      reduce using rule 84 (num_factor -> func_call .)
    POWER           reduce using rule 84 (num_factor -> func_call .)
    MODULO          reduce using rule 84 (num_factor -> func_call .)
    EQ              reduce using rule 78 (expr -> func_call .)
    NE              reduce using rule 78 (expr -> func_call .)
    LT              reduce using rule 78 (expr -> func_call .)
    GT              reduce using rule 78 (expr -> func_call .)
    LE              reduce using rule 78 (expr -> func_call .)
    GE              reduce using rule 78 (expr -> func_call .)

  ! EQ              [ reduce using rule 84 (num_factor -> func_call .) ]
  ! NE              [ reduce using rule 84 (num_factor -> func_call .) ]
  ! LT              [ reduce using rule 84 (num_factor -> func_call .) ]
  ! GT              [ reduce using rule 84 (num_factor -> func_call .) ]
  ! LE              [ reduce using rule 84 (num_factor -> func_call .) ]
  ! GE              [ reduce using rule 84 (num_factor -> func_call .) ]


state 85

    (85) num_factor -> var .
    (104) boolean_factor -> var .
    (35) func_call -> var . LPAREN arguments_list RPAREN
    (77) expr -> var .
    (96) string_expr -> var .

  ! reduce/reduce conflict for RPAREN resolved using rule 85 (num_factor -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 85 (num_factor -> var .)
  ! reduce/reduce conflict for NE resolved using rule 85 (num_factor -> var .)
  ! reduce/reduce conflict for LT resolved using rule 85 (num_factor -> var .)
  ! reduce/reduce conflict for GT resolved using rule 85 (num_factor -> var .)
  ! reduce/reduce conflict for LE resolved using rule 85 (num_factor -> var .)
  ! reduce/reduce conflict for GE resolved using rule 85 (num_factor -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 77 (expr -> var .)
    RPAREN          reduce using rule 85 (num_factor -> var .)
    PLUS            reduce using rule 85 (num_factor -> var .)
    MINUS           reduce using rule 85 (num_factor -> var .)
    TIMES           reduce using rule 85 (num_factor -> var .)
    DIVIDE          reduce using rule 85 (num_factor -> var .)
    INT_DIVIDE      reduce using rule 85 (num_factor -> var .)
    POWER           reduce using rule 85 (num_factor -> var .)
    MODULO          reduce using rule 85 (num_factor -> var .)
    AND             reduce using rule 104 (boolean_factor -> var .)
    OR              reduce using rule 104 (boolean_factor -> var .)
    TERNARY_Q       reduce using rule 104 (boolean_factor -> var .)
    LPAREN          shift and go to state 68
    EQ              reduce using rule 77 (expr -> var .)
    NE              reduce using rule 77 (expr -> var .)
    LT              reduce using rule 77 (expr -> var .)
    GT              reduce using rule 77 (expr -> var .)
    LE              reduce using rule 77 (expr -> var .)
    GE              reduce using rule 77 (expr -> var .)
    CONCAT          reduce using rule 96 (string_expr -> var .)

  ! EQ              [ reduce using rule 85 (num_factor -> var .) ]
  ! NE              [ reduce using rule 85 (num_factor -> var .) ]
  ! LT              [ reduce using rule 85 (num_factor -> var .) ]
  ! GT              [ reduce using rule 85 (num_factor -> var .) ]
  ! LE              [ reduce using rule 85 (num_factor -> var .) ]
  ! GE              [ reduce using rule 85 (num_factor -> var .) ]
  ! RPAREN          [ reduce using rule 104 (boolean_factor -> var .) ]
  ! EQ              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! NE              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! LT              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! GT              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! LE              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! GE              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! EQ              [ reduce using rule 96 (string_expr -> var .) ]
  ! NE              [ reduce using rule 96 (string_expr -> var .) ]
  ! LT              [ reduce using rule 96 (string_expr -> var .) ]
  ! GT              [ reduce using rule 96 (string_expr -> var .) ]
  ! LE              [ reduce using rule 96 (string_expr -> var .) ]
  ! GE              [ reduce using rule 96 (string_expr -> var .) ]


state 86

    (105) comparison -> expr . EQ expr
    (106) comparison -> expr . NE expr
    (107) comparison -> expr . LT expr
    (108) comparison -> expr . GT expr
    (109) comparison -> expr . LE expr
    (110) comparison -> expr . GE expr

    EQ              shift and go to state 50
    NE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    LE              shift and go to state 54
    GE              shift and go to state 55


state 87

    (44) if_stmt -> IF LPAREN . boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr
    (59) var -> . ID
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var

    NOT             shift and go to state 36
    LPAREN          shift and go to state 97
    BOOLEAN         shift and go to state 41
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    boolean_expr                   shift and go to state 135
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42
    var                            shift and go to state 98
    expr                           shift and go to state 86
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35

state 88

    (57) while_stmt -> WHILE LPAREN . boolean_expr RPAREN LBRACE block RBRACE
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr
    (59) var -> . ID
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var

    NOT             shift and go to state 36
    LPAREN          shift and go to state 97
    BOOLEAN         shift and go to state 41
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    boolean_expr                   shift and go to state 136
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42
    var                            shift and go to state 98
    expr                           shift and go to state 86
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35

state 89

    (58) for_stmt -> FOR LPAREN . var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (60) var_assign -> . var ASSIGN expr
    (59) var -> . ID

    ID              shift and go to state 31

    var_assign                     shift and go to state 137
    var                            shift and go to state 138

state 90

    (56) print_stmt -> PRINT LPAREN . expr RPAREN
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (59) var -> . ID
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    ID              shift and go to state 31
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

    expr                           shift and go to state 139
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    boolean_expr                   shift and go to state 21
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    var                            shift and go to state 100
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 91

    (79) num_factor -> PLUS num_factor .

    PLUS            reduce using rule 79 (num_factor -> PLUS num_factor .)
    MINUS           reduce using rule 79 (num_factor -> PLUS num_factor .)
    TIMES           reduce using rule 79 (num_factor -> PLUS num_factor .)
    DIVIDE          reduce using rule 79 (num_factor -> PLUS num_factor .)
    INT_DIVIDE      reduce using rule 79 (num_factor -> PLUS num_factor .)
    POWER           reduce using rule 79 (num_factor -> PLUS num_factor .)
    MODULO          reduce using rule 79 (num_factor -> PLUS num_factor .)
    SEMI            reduce using rule 79 (num_factor -> PLUS num_factor .)
    EQ              reduce using rule 79 (num_factor -> PLUS num_factor .)
    NE              reduce using rule 79 (num_factor -> PLUS num_factor .)
    LT              reduce using rule 79 (num_factor -> PLUS num_factor .)
    GT              reduce using rule 79 (num_factor -> PLUS num_factor .)
    LE              reduce using rule 79 (num_factor -> PLUS num_factor .)
    GE              reduce using rule 79 (num_factor -> PLUS num_factor .)
    RPAREN          reduce using rule 79 (num_factor -> PLUS num_factor .)
    AND             reduce using rule 79 (num_factor -> PLUS num_factor .)
    OR              reduce using rule 79 (num_factor -> PLUS num_factor .)
    TERNARY_Q       reduce using rule 79 (num_factor -> PLUS num_factor .)
    COMMA           reduce using rule 79 (num_factor -> PLUS num_factor .)
    TERNARY_C       reduce using rule 79 (num_factor -> PLUS num_factor .)


state 92

    (83) num_factor -> LPAREN . num_expr RPAREN
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (59) var -> . ID

    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 92
    ID              shift and go to state 31

    num_expr                       shift and go to state 140
    num_factor                     shift and go to state 35
    func_call                      shift and go to state 93
    var                            shift and go to state 94

state 93

    (84) num_factor -> func_call .

    PLUS            reduce using rule 84 (num_factor -> func_call .)
    MINUS           reduce using rule 84 (num_factor -> func_call .)
    TIMES           reduce using rule 84 (num_factor -> func_call .)
    DIVIDE          reduce using rule 84 (num_factor -> func_call .)
    INT_DIVIDE      reduce using rule 84 (num_factor -> func_call .)
    POWER           reduce using rule 84 (num_factor -> func_call .)
    MODULO          reduce using rule 84 (num_factor -> func_call .)
    SEMI            reduce using rule 84 (num_factor -> func_call .)
    EQ              reduce using rule 84 (num_factor -> func_call .)
    NE              reduce using rule 84 (num_factor -> func_call .)
    LT              reduce using rule 84 (num_factor -> func_call .)
    GT              reduce using rule 84 (num_factor -> func_call .)
    LE              reduce using rule 84 (num_factor -> func_call .)
    GE              reduce using rule 84 (num_factor -> func_call .)
    RPAREN          reduce using rule 84 (num_factor -> func_call .)
    AND             reduce using rule 84 (num_factor -> func_call .)
    OR              reduce using rule 84 (num_factor -> func_call .)
    TERNARY_Q       reduce using rule 84 (num_factor -> func_call .)
    COMMA           reduce using rule 84 (num_factor -> func_call .)
    TERNARY_C       reduce using rule 84 (num_factor -> func_call .)


state 94

    (85) num_factor -> var .
    (35) func_call -> var . LPAREN arguments_list RPAREN

    PLUS            reduce using rule 85 (num_factor -> var .)
    MINUS           reduce using rule 85 (num_factor -> var .)
    TIMES           reduce using rule 85 (num_factor -> var .)
    DIVIDE          reduce using rule 85 (num_factor -> var .)
    INT_DIVIDE      reduce using rule 85 (num_factor -> var .)
    POWER           reduce using rule 85 (num_factor -> var .)
    MODULO          reduce using rule 85 (num_factor -> var .)
    SEMI            reduce using rule 85 (num_factor -> var .)
    EQ              reduce using rule 85 (num_factor -> var .)
    NE              reduce using rule 85 (num_factor -> var .)
    LT              reduce using rule 85 (num_factor -> var .)
    GT              reduce using rule 85 (num_factor -> var .)
    LE              reduce using rule 85 (num_factor -> var .)
    GE              reduce using rule 85 (num_factor -> var .)
    RPAREN          reduce using rule 85 (num_factor -> var .)
    AND             reduce using rule 85 (num_factor -> var .)
    OR              reduce using rule 85 (num_factor -> var .)
    TERNARY_Q       reduce using rule 85 (num_factor -> var .)
    COMMA           reduce using rule 85 (num_factor -> var .)
    TERNARY_C       reduce using rule 85 (num_factor -> var .)
    LPAREN          shift and go to state 68


state 95

    (80) num_factor -> MINUS num_factor .

    PLUS            reduce using rule 80 (num_factor -> MINUS num_factor .)
    MINUS           reduce using rule 80 (num_factor -> MINUS num_factor .)
    TIMES           reduce using rule 80 (num_factor -> MINUS num_factor .)
    DIVIDE          reduce using rule 80 (num_factor -> MINUS num_factor .)
    INT_DIVIDE      reduce using rule 80 (num_factor -> MINUS num_factor .)
    POWER           reduce using rule 80 (num_factor -> MINUS num_factor .)
    MODULO          reduce using rule 80 (num_factor -> MINUS num_factor .)
    SEMI            reduce using rule 80 (num_factor -> MINUS num_factor .)
    EQ              reduce using rule 80 (num_factor -> MINUS num_factor .)
    NE              reduce using rule 80 (num_factor -> MINUS num_factor .)
    LT              reduce using rule 80 (num_factor -> MINUS num_factor .)
    GT              reduce using rule 80 (num_factor -> MINUS num_factor .)
    LE              reduce using rule 80 (num_factor -> MINUS num_factor .)
    GE              reduce using rule 80 (num_factor -> MINUS num_factor .)
    RPAREN          reduce using rule 80 (num_factor -> MINUS num_factor .)
    AND             reduce using rule 80 (num_factor -> MINUS num_factor .)
    OR              reduce using rule 80 (num_factor -> MINUS num_factor .)
    TERNARY_Q       reduce using rule 80 (num_factor -> MINUS num_factor .)
    COMMA           reduce using rule 80 (num_factor -> MINUS num_factor .)
    TERNARY_C       reduce using rule 80 (num_factor -> MINUS num_factor .)


state 96

    (99) boolean_expr -> NOT boolean_expr .
    (97) boolean_expr -> boolean_expr . AND boolean_expr
    (98) boolean_expr -> boolean_expr . OR boolean_expr
    (74) expr -> boolean_expr .
    (112) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for EQ resolved using rule 74 (expr -> boolean_expr .)
  ! reduce/reduce conflict for NE resolved using rule 74 (expr -> boolean_expr .)
  ! reduce/reduce conflict for LT resolved using rule 74 (expr -> boolean_expr .)
  ! reduce/reduce conflict for GT resolved using rule 74 (expr -> boolean_expr .)
  ! reduce/reduce conflict for LE resolved using rule 74 (expr -> boolean_expr .)
  ! reduce/reduce conflict for GE resolved using rule 74 (expr -> boolean_expr .)
  ! shift/reduce conflict for TERNARY_Q resolved as shift
    SEMI            reduce using rule 99 (boolean_expr -> NOT boolean_expr .)
    RPAREN          reduce using rule 99 (boolean_expr -> NOT boolean_expr .)
    COMMA           reduce using rule 99 (boolean_expr -> NOT boolean_expr .)
    TERNARY_C       reduce using rule 99 (boolean_expr -> NOT boolean_expr .)
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQ              reduce using rule 74 (expr -> boolean_expr .)
    NE              reduce using rule 74 (expr -> boolean_expr .)
    LT              reduce using rule 74 (expr -> boolean_expr .)
    GT              reduce using rule 74 (expr -> boolean_expr .)
    LE              reduce using rule 74 (expr -> boolean_expr .)
    GE              reduce using rule 74 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 80

  ! AND             [ reduce using rule 99 (boolean_expr -> NOT boolean_expr .) ]
  ! OR              [ reduce using rule 99 (boolean_expr -> NOT boolean_expr .) ]
  ! TERNARY_Q       [ reduce using rule 99 (boolean_expr -> NOT boolean_expr .) ]
  ! EQ              [ reduce using rule 99 (boolean_expr -> NOT boolean_expr .) ]
  ! NE              [ reduce using rule 99 (boolean_expr -> NOT boolean_expr .) ]
  ! LT              [ reduce using rule 99 (boolean_expr -> NOT boolean_expr .) ]
  ! GT              [ reduce using rule 99 (boolean_expr -> NOT boolean_expr .) ]
  ! LE              [ reduce using rule 99 (boolean_expr -> NOT boolean_expr .) ]
  ! GE              [ reduce using rule 99 (boolean_expr -> NOT boolean_expr .) ]


state 97

    (101) boolean_factor -> LPAREN . boolean_expr RPAREN
    (83) num_factor -> LPAREN . num_expr RPAREN
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr
    (59) var -> . ID
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr

    NOT             shift and go to state 36
    LPAREN          shift and go to state 97
    BOOLEAN         shift and go to state 41
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NULL            shift and go to state 38

    boolean_expr                   shift and go to state 83
    num_expr                       shift and go to state 82
    boolean_factor                 shift and go to state 37
    num_factor                     shift and go to state 35
    comparison                     shift and go to state 42
    var                            shift and go to state 141
    func_call                      shift and go to state 84
    expr                           shift and go to state 86
    string_expr                    shift and go to state 20
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23

state 98

    (104) boolean_factor -> var .
    (77) expr -> var .
    (96) string_expr -> var .
    (35) func_call -> var . LPAREN arguments_list RPAREN
    (85) num_factor -> var .

  ! reduce/reduce conflict for EQ resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 77 (expr -> var .)
    AND             reduce using rule 104 (boolean_factor -> var .)
    OR              reduce using rule 104 (boolean_factor -> var .)
    TERNARY_Q       reduce using rule 104 (boolean_factor -> var .)
    SEMI            reduce using rule 104 (boolean_factor -> var .)
    RPAREN          reduce using rule 104 (boolean_factor -> var .)
    COMMA           reduce using rule 104 (boolean_factor -> var .)
    TERNARY_C       reduce using rule 104 (boolean_factor -> var .)
    EQ              reduce using rule 77 (expr -> var .)
    NE              reduce using rule 77 (expr -> var .)
    LT              reduce using rule 77 (expr -> var .)
    GT              reduce using rule 77 (expr -> var .)
    LE              reduce using rule 77 (expr -> var .)
    GE              reduce using rule 77 (expr -> var .)
    CONCAT          reduce using rule 96 (string_expr -> var .)
    LPAREN          shift and go to state 68
    PLUS            reduce using rule 85 (num_factor -> var .)
    MINUS           reduce using rule 85 (num_factor -> var .)
    TIMES           reduce using rule 85 (num_factor -> var .)
    DIVIDE          reduce using rule 85 (num_factor -> var .)
    INT_DIVIDE      reduce using rule 85 (num_factor -> var .)
    POWER           reduce using rule 85 (num_factor -> var .)
    MODULO          reduce using rule 85 (num_factor -> var .)

  ! EQ              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! NE              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! LT              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! GT              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! LE              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! GE              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! EQ              [ reduce using rule 96 (string_expr -> var .) ]
  ! NE              [ reduce using rule 96 (string_expr -> var .) ]
  ! LT              [ reduce using rule 96 (string_expr -> var .) ]
  ! GT              [ reduce using rule 96 (string_expr -> var .) ]
  ! LE              [ reduce using rule 96 (string_expr -> var .) ]
  ! GE              [ reduce using rule 96 (string_expr -> var .) ]
  ! EQ              [ reduce using rule 85 (num_factor -> var .) ]
  ! NE              [ reduce using rule 85 (num_factor -> var .) ]
  ! LT              [ reduce using rule 85 (num_factor -> var .) ]
  ! GT              [ reduce using rule 85 (num_factor -> var .) ]
  ! LE              [ reduce using rule 85 (num_factor -> var .) ]
  ! GE              [ reduce using rule 85 (num_factor -> var .) ]


state 99

    (105) comparison -> expr EQ expr .
    (105) comparison -> expr . EQ expr
    (106) comparison -> expr . NE expr
    (107) comparison -> expr . LT expr
    (108) comparison -> expr . GT expr
    (109) comparison -> expr . LE expr
    (110) comparison -> expr . GE expr

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    AND             reduce using rule 105 (comparison -> expr EQ expr .)
    OR              reduce using rule 105 (comparison -> expr EQ expr .)
    TERNARY_Q       reduce using rule 105 (comparison -> expr EQ expr .)
    SEMI            reduce using rule 105 (comparison -> expr EQ expr .)
    RPAREN          reduce using rule 105 (comparison -> expr EQ expr .)
    COMMA           reduce using rule 105 (comparison -> expr EQ expr .)
    TERNARY_C       reduce using rule 105 (comparison -> expr EQ expr .)
    EQ              shift and go to state 50
    NE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    LE              shift and go to state 54
    GE              shift and go to state 55

  ! EQ              [ reduce using rule 105 (comparison -> expr EQ expr .) ]
  ! NE              [ reduce using rule 105 (comparison -> expr EQ expr .) ]
  ! LT              [ reduce using rule 105 (comparison -> expr EQ expr .) ]
  ! GT              [ reduce using rule 105 (comparison -> expr EQ expr .) ]
  ! LE              [ reduce using rule 105 (comparison -> expr EQ expr .) ]
  ! GE              [ reduce using rule 105 (comparison -> expr EQ expr .) ]


state 100

    (77) expr -> var .
    (96) string_expr -> var .
    (35) func_call -> var . LPAREN arguments_list RPAREN
    (85) num_factor -> var .
    (104) boolean_factor -> var .

  ! reduce/reduce conflict for EQ resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for AND resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for OR resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for TERNARY_Q resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for SEMI resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for RPAREN resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for COMMA resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for TERNARY_C resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for AND resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for OR resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for TERNARY_Q resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for SEMI resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for RPAREN resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for COMMA resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for TERNARY_C resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for AND resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for OR resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for TERNARY_Q resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for SEMI resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for RPAREN resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for COMMA resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for TERNARY_C resolved using rule 77 (expr -> var .)
    EQ              reduce using rule 77 (expr -> var .)
    NE              reduce using rule 77 (expr -> var .)
    LT              reduce using rule 77 (expr -> var .)
    GT              reduce using rule 77 (expr -> var .)
    LE              reduce using rule 77 (expr -> var .)
    GE              reduce using rule 77 (expr -> var .)
    AND             reduce using rule 77 (expr -> var .)
    OR              reduce using rule 77 (expr -> var .)
    TERNARY_Q       reduce using rule 77 (expr -> var .)
    SEMI            reduce using rule 77 (expr -> var .)
    RPAREN          reduce using rule 77 (expr -> var .)
    COMMA           reduce using rule 77 (expr -> var .)
    TERNARY_C       reduce using rule 77 (expr -> var .)
    CONCAT          reduce using rule 96 (string_expr -> var .)
    LPAREN          shift and go to state 68
    PLUS            reduce using rule 85 (num_factor -> var .)
    MINUS           reduce using rule 85 (num_factor -> var .)
    TIMES           reduce using rule 85 (num_factor -> var .)
    DIVIDE          reduce using rule 85 (num_factor -> var .)
    INT_DIVIDE      reduce using rule 85 (num_factor -> var .)
    POWER           reduce using rule 85 (num_factor -> var .)
    MODULO          reduce using rule 85 (num_factor -> var .)

  ! EQ              [ reduce using rule 96 (string_expr -> var .) ]
  ! NE              [ reduce using rule 96 (string_expr -> var .) ]
  ! LT              [ reduce using rule 96 (string_expr -> var .) ]
  ! GT              [ reduce using rule 96 (string_expr -> var .) ]
  ! LE              [ reduce using rule 96 (string_expr -> var .) ]
  ! GE              [ reduce using rule 96 (string_expr -> var .) ]
  ! AND             [ reduce using rule 96 (string_expr -> var .) ]
  ! OR              [ reduce using rule 96 (string_expr -> var .) ]
  ! TERNARY_Q       [ reduce using rule 96 (string_expr -> var .) ]
  ! SEMI            [ reduce using rule 96 (string_expr -> var .) ]
  ! RPAREN          [ reduce using rule 96 (string_expr -> var .) ]
  ! COMMA           [ reduce using rule 96 (string_expr -> var .) ]
  ! TERNARY_C       [ reduce using rule 96 (string_expr -> var .) ]
  ! EQ              [ reduce using rule 85 (num_factor -> var .) ]
  ! NE              [ reduce using rule 85 (num_factor -> var .) ]
  ! LT              [ reduce using rule 85 (num_factor -> var .) ]
  ! GT              [ reduce using rule 85 (num_factor -> var .) ]
  ! LE              [ reduce using rule 85 (num_factor -> var .) ]
  ! GE              [ reduce using rule 85 (num_factor -> var .) ]
  ! AND             [ reduce using rule 85 (num_factor -> var .) ]
  ! OR              [ reduce using rule 85 (num_factor -> var .) ]
  ! TERNARY_Q       [ reduce using rule 85 (num_factor -> var .) ]
  ! SEMI            [ reduce using rule 85 (num_factor -> var .) ]
  ! RPAREN          [ reduce using rule 85 (num_factor -> var .) ]
  ! COMMA           [ reduce using rule 85 (num_factor -> var .) ]
  ! TERNARY_C       [ reduce using rule 85 (num_factor -> var .) ]
  ! EQ              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! NE              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! LT              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! GT              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! LE              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! GE              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! AND             [ reduce using rule 104 (boolean_factor -> var .) ]
  ! OR              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! TERNARY_Q       [ reduce using rule 104 (boolean_factor -> var .) ]
  ! SEMI            [ reduce using rule 104 (boolean_factor -> var .) ]
  ! RPAREN          [ reduce using rule 104 (boolean_factor -> var .) ]
  ! COMMA           [ reduce using rule 104 (boolean_factor -> var .) ]
  ! TERNARY_C       [ reduce using rule 104 (boolean_factor -> var .) ]


state 101

    (106) comparison -> expr NE expr .
    (105) comparison -> expr . EQ expr
    (106) comparison -> expr . NE expr
    (107) comparison -> expr . LT expr
    (108) comparison -> expr . GT expr
    (109) comparison -> expr . LE expr
    (110) comparison -> expr . GE expr

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    AND             reduce using rule 106 (comparison -> expr NE expr .)
    OR              reduce using rule 106 (comparison -> expr NE expr .)
    TERNARY_Q       reduce using rule 106 (comparison -> expr NE expr .)
    SEMI            reduce using rule 106 (comparison -> expr NE expr .)
    RPAREN          reduce using rule 106 (comparison -> expr NE expr .)
    COMMA           reduce using rule 106 (comparison -> expr NE expr .)
    TERNARY_C       reduce using rule 106 (comparison -> expr NE expr .)
    EQ              shift and go to state 50
    NE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    LE              shift and go to state 54
    GE              shift and go to state 55

  ! EQ              [ reduce using rule 106 (comparison -> expr NE expr .) ]
  ! NE              [ reduce using rule 106 (comparison -> expr NE expr .) ]
  ! LT              [ reduce using rule 106 (comparison -> expr NE expr .) ]
  ! GT              [ reduce using rule 106 (comparison -> expr NE expr .) ]
  ! LE              [ reduce using rule 106 (comparison -> expr NE expr .) ]
  ! GE              [ reduce using rule 106 (comparison -> expr NE expr .) ]


state 102

    (107) comparison -> expr LT expr .
    (105) comparison -> expr . EQ expr
    (106) comparison -> expr . NE expr
    (107) comparison -> expr . LT expr
    (108) comparison -> expr . GT expr
    (109) comparison -> expr . LE expr
    (110) comparison -> expr . GE expr

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    AND             reduce using rule 107 (comparison -> expr LT expr .)
    OR              reduce using rule 107 (comparison -> expr LT expr .)
    TERNARY_Q       reduce using rule 107 (comparison -> expr LT expr .)
    SEMI            reduce using rule 107 (comparison -> expr LT expr .)
    RPAREN          reduce using rule 107 (comparison -> expr LT expr .)
    COMMA           reduce using rule 107 (comparison -> expr LT expr .)
    TERNARY_C       reduce using rule 107 (comparison -> expr LT expr .)
    EQ              shift and go to state 50
    NE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    LE              shift and go to state 54
    GE              shift and go to state 55

  ! EQ              [ reduce using rule 107 (comparison -> expr LT expr .) ]
  ! NE              [ reduce using rule 107 (comparison -> expr LT expr .) ]
  ! LT              [ reduce using rule 107 (comparison -> expr LT expr .) ]
  ! GT              [ reduce using rule 107 (comparison -> expr LT expr .) ]
  ! LE              [ reduce using rule 107 (comparison -> expr LT expr .) ]
  ! GE              [ reduce using rule 107 (comparison -> expr LT expr .) ]


state 103

    (108) comparison -> expr GT expr .
    (105) comparison -> expr . EQ expr
    (106) comparison -> expr . NE expr
    (107) comparison -> expr . LT expr
    (108) comparison -> expr . GT expr
    (109) comparison -> expr . LE expr
    (110) comparison -> expr . GE expr

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    AND             reduce using rule 108 (comparison -> expr GT expr .)
    OR              reduce using rule 108 (comparison -> expr GT expr .)
    TERNARY_Q       reduce using rule 108 (comparison -> expr GT expr .)
    SEMI            reduce using rule 108 (comparison -> expr GT expr .)
    RPAREN          reduce using rule 108 (comparison -> expr GT expr .)
    COMMA           reduce using rule 108 (comparison -> expr GT expr .)
    TERNARY_C       reduce using rule 108 (comparison -> expr GT expr .)
    EQ              shift and go to state 50
    NE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    LE              shift and go to state 54
    GE              shift and go to state 55

  ! EQ              [ reduce using rule 108 (comparison -> expr GT expr .) ]
  ! NE              [ reduce using rule 108 (comparison -> expr GT expr .) ]
  ! LT              [ reduce using rule 108 (comparison -> expr GT expr .) ]
  ! GT              [ reduce using rule 108 (comparison -> expr GT expr .) ]
  ! LE              [ reduce using rule 108 (comparison -> expr GT expr .) ]
  ! GE              [ reduce using rule 108 (comparison -> expr GT expr .) ]


state 104

    (109) comparison -> expr LE expr .
    (105) comparison -> expr . EQ expr
    (106) comparison -> expr . NE expr
    (107) comparison -> expr . LT expr
    (108) comparison -> expr . GT expr
    (109) comparison -> expr . LE expr
    (110) comparison -> expr . GE expr

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    AND             reduce using rule 109 (comparison -> expr LE expr .)
    OR              reduce using rule 109 (comparison -> expr LE expr .)
    TERNARY_Q       reduce using rule 109 (comparison -> expr LE expr .)
    SEMI            reduce using rule 109 (comparison -> expr LE expr .)
    RPAREN          reduce using rule 109 (comparison -> expr LE expr .)
    COMMA           reduce using rule 109 (comparison -> expr LE expr .)
    TERNARY_C       reduce using rule 109 (comparison -> expr LE expr .)
    EQ              shift and go to state 50
    NE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    LE              shift and go to state 54
    GE              shift and go to state 55

  ! EQ              [ reduce using rule 109 (comparison -> expr LE expr .) ]
  ! NE              [ reduce using rule 109 (comparison -> expr LE expr .) ]
  ! LT              [ reduce using rule 109 (comparison -> expr LE expr .) ]
  ! GT              [ reduce using rule 109 (comparison -> expr LE expr .) ]
  ! LE              [ reduce using rule 109 (comparison -> expr LE expr .) ]
  ! GE              [ reduce using rule 109 (comparison -> expr LE expr .) ]


state 105

    (110) comparison -> expr GE expr .
    (105) comparison -> expr . EQ expr
    (106) comparison -> expr . NE expr
    (107) comparison -> expr . LT expr
    (108) comparison -> expr . GT expr
    (109) comparison -> expr . LE expr
    (110) comparison -> expr . GE expr

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    AND             reduce using rule 110 (comparison -> expr GE expr .)
    OR              reduce using rule 110 (comparison -> expr GE expr .)
    TERNARY_Q       reduce using rule 110 (comparison -> expr GE expr .)
    SEMI            reduce using rule 110 (comparison -> expr GE expr .)
    RPAREN          reduce using rule 110 (comparison -> expr GE expr .)
    COMMA           reduce using rule 110 (comparison -> expr GE expr .)
    TERNARY_C       reduce using rule 110 (comparison -> expr GE expr .)
    EQ              shift and go to state 50
    NE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    LE              shift and go to state 54
    GE              shift and go to state 55

  ! EQ              [ reduce using rule 110 (comparison -> expr GE expr .) ]
  ! NE              [ reduce using rule 110 (comparison -> expr GE expr .) ]
  ! LT              [ reduce using rule 110 (comparison -> expr GE expr .) ]
  ! GT              [ reduce using rule 110 (comparison -> expr GE expr .) ]
  ! LE              [ reduce using rule 110 (comparison -> expr GE expr .) ]
  ! GE              [ reduce using rule 110 (comparison -> expr GE expr .) ]


state 106

    (60) var_assign -> var ASSIGN expr .
    (105) comparison -> expr . EQ expr
    (106) comparison -> expr . NE expr
    (107) comparison -> expr . LT expr
    (108) comparison -> expr . GT expr
    (109) comparison -> expr . LE expr
    (110) comparison -> expr . GE expr

    SEMI            reduce using rule 60 (var_assign -> var ASSIGN expr .)
    EQ              shift and go to state 50
    NE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    LE              shift and go to state 54
    GE              shift and go to state 55


state 107

    (62) var_compound_assign -> var PLUS_ASSIGN num_expr .
    (86) num_expr -> num_expr . PLUS num_expr
    (87) num_expr -> num_expr . MINUS num_expr
    (88) num_expr -> num_expr . TIMES num_expr
    (89) num_expr -> num_expr . DIVIDE num_expr
    (90) num_expr -> num_expr . INT_DIVIDE num_expr
    (91) num_expr -> num_expr . POWER num_expr
    (92) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 62 (var_compound_assign -> var PLUS_ASSIGN num_expr .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73
    INT_DIVIDE      shift and go to state 74
    POWER           shift and go to state 75
    MODULO          shift and go to state 76


state 108

    (63) var_compound_assign -> var MINUS_ASSIGN num_expr .
    (86) num_expr -> num_expr . PLUS num_expr
    (87) num_expr -> num_expr . MINUS num_expr
    (88) num_expr -> num_expr . TIMES num_expr
    (89) num_expr -> num_expr . DIVIDE num_expr
    (90) num_expr -> num_expr . INT_DIVIDE num_expr
    (91) num_expr -> num_expr . POWER num_expr
    (92) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 63 (var_compound_assign -> var MINUS_ASSIGN num_expr .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73
    INT_DIVIDE      shift and go to state 74
    POWER           shift and go to state 75
    MODULO          shift and go to state 76


state 109

    (64) var_compound_assign -> var TIMES_ASSIGN num_expr .
    (86) num_expr -> num_expr . PLUS num_expr
    (87) num_expr -> num_expr . MINUS num_expr
    (88) num_expr -> num_expr . TIMES num_expr
    (89) num_expr -> num_expr . DIVIDE num_expr
    (90) num_expr -> num_expr . INT_DIVIDE num_expr
    (91) num_expr -> num_expr . POWER num_expr
    (92) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 64 (var_compound_assign -> var TIMES_ASSIGN num_expr .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73
    INT_DIVIDE      shift and go to state 74
    POWER           shift and go to state 75
    MODULO          shift and go to state 76


state 110

    (65) var_compound_assign -> var DIVIDE_ASSIGN num_expr .
    (86) num_expr -> num_expr . PLUS num_expr
    (87) num_expr -> num_expr . MINUS num_expr
    (88) num_expr -> num_expr . TIMES num_expr
    (89) num_expr -> num_expr . DIVIDE num_expr
    (90) num_expr -> num_expr . INT_DIVIDE num_expr
    (91) num_expr -> num_expr . POWER num_expr
    (92) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 65 (var_compound_assign -> var DIVIDE_ASSIGN num_expr .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73
    INT_DIVIDE      shift and go to state 74
    POWER           shift and go to state 75
    MODULO          shift and go to state 76


state 111

    (66) var_compound_assign -> var POWER_ASSIGN num_expr .
    (86) num_expr -> num_expr . PLUS num_expr
    (87) num_expr -> num_expr . MINUS num_expr
    (88) num_expr -> num_expr . TIMES num_expr
    (89) num_expr -> num_expr . DIVIDE num_expr
    (90) num_expr -> num_expr . INT_DIVIDE num_expr
    (91) num_expr -> num_expr . POWER num_expr
    (92) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 66 (var_compound_assign -> var POWER_ASSIGN num_expr .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73
    INT_DIVIDE      shift and go to state 74
    POWER           shift and go to state 75
    MODULO          shift and go to state 76


state 112

    (67) var_compound_assign -> var MODULO_ASSIGN num_expr .
    (86) num_expr -> num_expr . PLUS num_expr
    (87) num_expr -> num_expr . MINUS num_expr
    (88) num_expr -> num_expr . TIMES num_expr
    (89) num_expr -> num_expr . DIVIDE num_expr
    (90) num_expr -> num_expr . INT_DIVIDE num_expr
    (91) num_expr -> num_expr . POWER num_expr
    (92) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 67 (var_compound_assign -> var MODULO_ASSIGN num_expr .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73
    INT_DIVIDE      shift and go to state 74
    POWER           shift and go to state 75
    MODULO          shift and go to state 76


state 113

    (68) var_compound_assign -> var INT_DIVIDE_ASSIGN num_expr .
    (86) num_expr -> num_expr . PLUS num_expr
    (87) num_expr -> num_expr . MINUS num_expr
    (88) num_expr -> num_expr . TIMES num_expr
    (89) num_expr -> num_expr . DIVIDE num_expr
    (90) num_expr -> num_expr . INT_DIVIDE num_expr
    (91) num_expr -> num_expr . POWER num_expr
    (92) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 68 (var_compound_assign -> var INT_DIVIDE_ASSIGN num_expr .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73
    INT_DIVIDE      shift and go to state 74
    POWER           shift and go to state 75
    MODULO          shift and go to state 76


state 114

    (96) string_expr -> var .

    CONCAT          reduce using rule 96 (string_expr -> var .)
    SEMI            reduce using rule 96 (string_expr -> var .)
    EQ              reduce using rule 96 (string_expr -> var .)
    NE              reduce using rule 96 (string_expr -> var .)
    LT              reduce using rule 96 (string_expr -> var .)
    GT              reduce using rule 96 (string_expr -> var .)
    LE              reduce using rule 96 (string_expr -> var .)
    GE              reduce using rule 96 (string_expr -> var .)
    AND             reduce using rule 96 (string_expr -> var .)
    OR              reduce using rule 96 (string_expr -> var .)
    TERNARY_Q       reduce using rule 96 (string_expr -> var .)
    RPAREN          reduce using rule 96 (string_expr -> var .)
    COMMA           reduce using rule 96 (string_expr -> var .)
    TERNARY_C       reduce using rule 96 (string_expr -> var .)


state 115

    (69) concat_assign -> var CONCAT_ASSIGN string_expr .
    (94) string_expr -> string_expr . CONCAT string_expr

    SEMI            reduce using rule 69 (concat_assign -> var CONCAT_ASSIGN string_expr .)
    CONCAT          shift and go to state 77


state 116

    (35) func_call -> var LPAREN arguments_list . RPAREN

    RPAREN          shift and go to state 142


state 117

    (36) arguments_list -> non_empty_arguments_list .

    RPAREN          reduce using rule 36 (arguments_list -> non_empty_arguments_list .)


state 118

    (37) arguments_list -> empty .

    RPAREN          reduce using rule 37 (arguments_list -> empty .)


state 119

    (38) non_empty_arguments_list -> expr . COMMA non_empty_arguments_list
    (39) non_empty_arguments_list -> expr .
    (105) comparison -> expr . EQ expr
    (106) comparison -> expr . NE expr
    (107) comparison -> expr . LT expr
    (108) comparison -> expr . GT expr
    (109) comparison -> expr . LE expr
    (110) comparison -> expr . GE expr

    COMMA           shift and go to state 143
    RPAREN          reduce using rule 39 (non_empty_arguments_list -> expr .)
    EQ              shift and go to state 50
    NE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    LE              shift and go to state 54
    GE              shift and go to state 55


state 120

    (61) final_assign -> FINAL var ASSIGN . expr
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (59) var -> . ID
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    ID              shift and go to state 31
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

    var                            shift and go to state 100
    expr                           shift and go to state 144
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    boolean_expr                   shift and go to state 21
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 121

    (86) num_expr -> num_expr PLUS num_expr .
    (86) num_expr -> num_expr . PLUS num_expr
    (87) num_expr -> num_expr . MINUS num_expr
    (88) num_expr -> num_expr . TIMES num_expr
    (89) num_expr -> num_expr . DIVIDE num_expr
    (90) num_expr -> num_expr . INT_DIVIDE num_expr
    (91) num_expr -> num_expr . POWER num_expr
    (92) num_expr -> num_expr . MODULO num_expr

    PLUS            reduce using rule 86 (num_expr -> num_expr PLUS num_expr .)
    MINUS           reduce using rule 86 (num_expr -> num_expr PLUS num_expr .)
    MODULO          reduce using rule 86 (num_expr -> num_expr PLUS num_expr .)
    SEMI            reduce using rule 86 (num_expr -> num_expr PLUS num_expr .)
    EQ              reduce using rule 86 (num_expr -> num_expr PLUS num_expr .)
    NE              reduce using rule 86 (num_expr -> num_expr PLUS num_expr .)
    LT              reduce using rule 86 (num_expr -> num_expr PLUS num_expr .)
    GT              reduce using rule 86 (num_expr -> num_expr PLUS num_expr .)
    LE              reduce using rule 86 (num_expr -> num_expr PLUS num_expr .)
    GE              reduce using rule 86 (num_expr -> num_expr PLUS num_expr .)
    RPAREN          reduce using rule 86 (num_expr -> num_expr PLUS num_expr .)
    AND             reduce using rule 86 (num_expr -> num_expr PLUS num_expr .)
    OR              reduce using rule 86 (num_expr -> num_expr PLUS num_expr .)
    TERNARY_Q       reduce using rule 86 (num_expr -> num_expr PLUS num_expr .)
    COMMA           reduce using rule 86 (num_expr -> num_expr PLUS num_expr .)
    TERNARY_C       reduce using rule 86 (num_expr -> num_expr PLUS num_expr .)
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73
    INT_DIVIDE      shift and go to state 74
    POWER           shift and go to state 75

  ! TIMES           [ reduce using rule 86 (num_expr -> num_expr PLUS num_expr .) ]
  ! DIVIDE          [ reduce using rule 86 (num_expr -> num_expr PLUS num_expr .) ]
  ! INT_DIVIDE      [ reduce using rule 86 (num_expr -> num_expr PLUS num_expr .) ]
  ! POWER           [ reduce using rule 86 (num_expr -> num_expr PLUS num_expr .) ]
  ! PLUS            [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 71 ]
  ! MODULO          [ shift and go to state 76 ]


state 122

    (87) num_expr -> num_expr MINUS num_expr .
    (86) num_expr -> num_expr . PLUS num_expr
    (87) num_expr -> num_expr . MINUS num_expr
    (88) num_expr -> num_expr . TIMES num_expr
    (89) num_expr -> num_expr . DIVIDE num_expr
    (90) num_expr -> num_expr . INT_DIVIDE num_expr
    (91) num_expr -> num_expr . POWER num_expr
    (92) num_expr -> num_expr . MODULO num_expr

    PLUS            reduce using rule 87 (num_expr -> num_expr MINUS num_expr .)
    MINUS           reduce using rule 87 (num_expr -> num_expr MINUS num_expr .)
    MODULO          reduce using rule 87 (num_expr -> num_expr MINUS num_expr .)
    SEMI            reduce using rule 87 (num_expr -> num_expr MINUS num_expr .)
    EQ              reduce using rule 87 (num_expr -> num_expr MINUS num_expr .)
    NE              reduce using rule 87 (num_expr -> num_expr MINUS num_expr .)
    LT              reduce using rule 87 (num_expr -> num_expr MINUS num_expr .)
    GT              reduce using rule 87 (num_expr -> num_expr MINUS num_expr .)
    LE              reduce using rule 87 (num_expr -> num_expr MINUS num_expr .)
    GE              reduce using rule 87 (num_expr -> num_expr MINUS num_expr .)
    RPAREN          reduce using rule 87 (num_expr -> num_expr MINUS num_expr .)
    AND             reduce using rule 87 (num_expr -> num_expr MINUS num_expr .)
    OR              reduce using rule 87 (num_expr -> num_expr MINUS num_expr .)
    TERNARY_Q       reduce using rule 87 (num_expr -> num_expr MINUS num_expr .)
    COMMA           reduce using rule 87 (num_expr -> num_expr MINUS num_expr .)
    TERNARY_C       reduce using rule 87 (num_expr -> num_expr MINUS num_expr .)
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73
    INT_DIVIDE      shift and go to state 74
    POWER           shift and go to state 75

  ! TIMES           [ reduce using rule 87 (num_expr -> num_expr MINUS num_expr .) ]
  ! DIVIDE          [ reduce using rule 87 (num_expr -> num_expr MINUS num_expr .) ]
  ! INT_DIVIDE      [ reduce using rule 87 (num_expr -> num_expr MINUS num_expr .) ]
  ! POWER           [ reduce using rule 87 (num_expr -> num_expr MINUS num_expr .) ]
  ! PLUS            [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 71 ]
  ! MODULO          [ shift and go to state 76 ]


state 123

    (88) num_expr -> num_expr TIMES num_expr .
    (86) num_expr -> num_expr . PLUS num_expr
    (87) num_expr -> num_expr . MINUS num_expr
    (88) num_expr -> num_expr . TIMES num_expr
    (89) num_expr -> num_expr . DIVIDE num_expr
    (90) num_expr -> num_expr . INT_DIVIDE num_expr
    (91) num_expr -> num_expr . POWER num_expr
    (92) num_expr -> num_expr . MODULO num_expr

    PLUS            reduce using rule 88 (num_expr -> num_expr TIMES num_expr .)
    MINUS           reduce using rule 88 (num_expr -> num_expr TIMES num_expr .)
    TIMES           reduce using rule 88 (num_expr -> num_expr TIMES num_expr .)
    DIVIDE          reduce using rule 88 (num_expr -> num_expr TIMES num_expr .)
    INT_DIVIDE      reduce using rule 88 (num_expr -> num_expr TIMES num_expr .)
    MODULO          reduce using rule 88 (num_expr -> num_expr TIMES num_expr .)
    SEMI            reduce using rule 88 (num_expr -> num_expr TIMES num_expr .)
    EQ              reduce using rule 88 (num_expr -> num_expr TIMES num_expr .)
    NE              reduce using rule 88 (num_expr -> num_expr TIMES num_expr .)
    LT              reduce using rule 88 (num_expr -> num_expr TIMES num_expr .)
    GT              reduce using rule 88 (num_expr -> num_expr TIMES num_expr .)
    LE              reduce using rule 88 (num_expr -> num_expr TIMES num_expr .)
    GE              reduce using rule 88 (num_expr -> num_expr TIMES num_expr .)
    RPAREN          reduce using rule 88 (num_expr -> num_expr TIMES num_expr .)
    AND             reduce using rule 88 (num_expr -> num_expr TIMES num_expr .)
    OR              reduce using rule 88 (num_expr -> num_expr TIMES num_expr .)
    TERNARY_Q       reduce using rule 88 (num_expr -> num_expr TIMES num_expr .)
    COMMA           reduce using rule 88 (num_expr -> num_expr TIMES num_expr .)
    TERNARY_C       reduce using rule 88 (num_expr -> num_expr TIMES num_expr .)
    POWER           shift and go to state 75

  ! POWER           [ reduce using rule 88 (num_expr -> num_expr TIMES num_expr .) ]
  ! PLUS            [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 71 ]
  ! TIMES           [ shift and go to state 72 ]
  ! DIVIDE          [ shift and go to state 73 ]
  ! INT_DIVIDE      [ shift and go to state 74 ]
  ! MODULO          [ shift and go to state 76 ]


state 124

    (89) num_expr -> num_expr DIVIDE num_expr .
    (86) num_expr -> num_expr . PLUS num_expr
    (87) num_expr -> num_expr . MINUS num_expr
    (88) num_expr -> num_expr . TIMES num_expr
    (89) num_expr -> num_expr . DIVIDE num_expr
    (90) num_expr -> num_expr . INT_DIVIDE num_expr
    (91) num_expr -> num_expr . POWER num_expr
    (92) num_expr -> num_expr . MODULO num_expr

    PLUS            reduce using rule 89 (num_expr -> num_expr DIVIDE num_expr .)
    MINUS           reduce using rule 89 (num_expr -> num_expr DIVIDE num_expr .)
    TIMES           reduce using rule 89 (num_expr -> num_expr DIVIDE num_expr .)
    DIVIDE          reduce using rule 89 (num_expr -> num_expr DIVIDE num_expr .)
    INT_DIVIDE      reduce using rule 89 (num_expr -> num_expr DIVIDE num_expr .)
    MODULO          reduce using rule 89 (num_expr -> num_expr DIVIDE num_expr .)
    SEMI            reduce using rule 89 (num_expr -> num_expr DIVIDE num_expr .)
    EQ              reduce using rule 89 (num_expr -> num_expr DIVIDE num_expr .)
    NE              reduce using rule 89 (num_expr -> num_expr DIVIDE num_expr .)
    LT              reduce using rule 89 (num_expr -> num_expr DIVIDE num_expr .)
    GT              reduce using rule 89 (num_expr -> num_expr DIVIDE num_expr .)
    LE              reduce using rule 89 (num_expr -> num_expr DIVIDE num_expr .)
    GE              reduce using rule 89 (num_expr -> num_expr DIVIDE num_expr .)
    RPAREN          reduce using rule 89 (num_expr -> num_expr DIVIDE num_expr .)
    AND             reduce using rule 89 (num_expr -> num_expr DIVIDE num_expr .)
    OR              reduce using rule 89 (num_expr -> num_expr DIVIDE num_expr .)
    TERNARY_Q       reduce using rule 89 (num_expr -> num_expr DIVIDE num_expr .)
    COMMA           reduce using rule 89 (num_expr -> num_expr DIVIDE num_expr .)
    TERNARY_C       reduce using rule 89 (num_expr -> num_expr DIVIDE num_expr .)
    POWER           shift and go to state 75

  ! POWER           [ reduce using rule 89 (num_expr -> num_expr DIVIDE num_expr .) ]
  ! PLUS            [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 71 ]
  ! TIMES           [ shift and go to state 72 ]
  ! DIVIDE          [ shift and go to state 73 ]
  ! INT_DIVIDE      [ shift and go to state 74 ]
  ! MODULO          [ shift and go to state 76 ]


state 125

    (90) num_expr -> num_expr INT_DIVIDE num_expr .
    (86) num_expr -> num_expr . PLUS num_expr
    (87) num_expr -> num_expr . MINUS num_expr
    (88) num_expr -> num_expr . TIMES num_expr
    (89) num_expr -> num_expr . DIVIDE num_expr
    (90) num_expr -> num_expr . INT_DIVIDE num_expr
    (91) num_expr -> num_expr . POWER num_expr
    (92) num_expr -> num_expr . MODULO num_expr

    PLUS            reduce using rule 90 (num_expr -> num_expr INT_DIVIDE num_expr .)
    MINUS           reduce using rule 90 (num_expr -> num_expr INT_DIVIDE num_expr .)
    TIMES           reduce using rule 90 (num_expr -> num_expr INT_DIVIDE num_expr .)
    DIVIDE          reduce using rule 90 (num_expr -> num_expr INT_DIVIDE num_expr .)
    INT_DIVIDE      reduce using rule 90 (num_expr -> num_expr INT_DIVIDE num_expr .)
    MODULO          reduce using rule 90 (num_expr -> num_expr INT_DIVIDE num_expr .)
    SEMI            reduce using rule 90 (num_expr -> num_expr INT_DIVIDE num_expr .)
    EQ              reduce using rule 90 (num_expr -> num_expr INT_DIVIDE num_expr .)
    NE              reduce using rule 90 (num_expr -> num_expr INT_DIVIDE num_expr .)
    LT              reduce using rule 90 (num_expr -> num_expr INT_DIVIDE num_expr .)
    GT              reduce using rule 90 (num_expr -> num_expr INT_DIVIDE num_expr .)
    LE              reduce using rule 90 (num_expr -> num_expr INT_DIVIDE num_expr .)
    GE              reduce using rule 90 (num_expr -> num_expr INT_DIVIDE num_expr .)
    RPAREN          reduce using rule 90 (num_expr -> num_expr INT_DIVIDE num_expr .)
    AND             reduce using rule 90 (num_expr -> num_expr INT_DIVIDE num_expr .)
    OR              reduce using rule 90 (num_expr -> num_expr INT_DIVIDE num_expr .)
    TERNARY_Q       reduce using rule 90 (num_expr -> num_expr INT_DIVIDE num_expr .)
    COMMA           reduce using rule 90 (num_expr -> num_expr INT_DIVIDE num_expr .)
    TERNARY_C       reduce using rule 90 (num_expr -> num_expr INT_DIVIDE num_expr .)
    POWER           shift and go to state 75

  ! POWER           [ reduce using rule 90 (num_expr -> num_expr INT_DIVIDE num_expr .) ]
  ! PLUS            [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 71 ]
  ! TIMES           [ shift and go to state 72 ]
  ! DIVIDE          [ shift and go to state 73 ]
  ! INT_DIVIDE      [ shift and go to state 74 ]
  ! MODULO          [ shift and go to state 76 ]


state 126

    (91) num_expr -> num_expr POWER num_expr .
    (86) num_expr -> num_expr . PLUS num_expr
    (87) num_expr -> num_expr . MINUS num_expr
    (88) num_expr -> num_expr . TIMES num_expr
    (89) num_expr -> num_expr . DIVIDE num_expr
    (90) num_expr -> num_expr . INT_DIVIDE num_expr
    (91) num_expr -> num_expr . POWER num_expr
    (92) num_expr -> num_expr . MODULO num_expr

    PLUS            reduce using rule 91 (num_expr -> num_expr POWER num_expr .)
    MINUS           reduce using rule 91 (num_expr -> num_expr POWER num_expr .)
    TIMES           reduce using rule 91 (num_expr -> num_expr POWER num_expr .)
    DIVIDE          reduce using rule 91 (num_expr -> num_expr POWER num_expr .)
    INT_DIVIDE      reduce using rule 91 (num_expr -> num_expr POWER num_expr .)
    MODULO          reduce using rule 91 (num_expr -> num_expr POWER num_expr .)
    SEMI            reduce using rule 91 (num_expr -> num_expr POWER num_expr .)
    EQ              reduce using rule 91 (num_expr -> num_expr POWER num_expr .)
    NE              reduce using rule 91 (num_expr -> num_expr POWER num_expr .)
    LT              reduce using rule 91 (num_expr -> num_expr POWER num_expr .)
    GT              reduce using rule 91 (num_expr -> num_expr POWER num_expr .)
    LE              reduce using rule 91 (num_expr -> num_expr POWER num_expr .)
    GE              reduce using rule 91 (num_expr -> num_expr POWER num_expr .)
    RPAREN          reduce using rule 91 (num_expr -> num_expr POWER num_expr .)
    AND             reduce using rule 91 (num_expr -> num_expr POWER num_expr .)
    OR              reduce using rule 91 (num_expr -> num_expr POWER num_expr .)
    TERNARY_Q       reduce using rule 91 (num_expr -> num_expr POWER num_expr .)
    COMMA           reduce using rule 91 (num_expr -> num_expr POWER num_expr .)
    TERNARY_C       reduce using rule 91 (num_expr -> num_expr POWER num_expr .)
    POWER           shift and go to state 75

  ! POWER           [ reduce using rule 91 (num_expr -> num_expr POWER num_expr .) ]
  ! PLUS            [ shift and go to state 70 ]
  ! MINUS           [ shift and go to state 71 ]
  ! TIMES           [ shift and go to state 72 ]
  ! DIVIDE          [ shift and go to state 73 ]
  ! INT_DIVIDE      [ shift and go to state 74 ]
  ! MODULO          [ shift and go to state 76 ]


state 127

    (92) num_expr -> num_expr MODULO num_expr .
    (86) num_expr -> num_expr . PLUS num_expr
    (87) num_expr -> num_expr . MINUS num_expr
    (88) num_expr -> num_expr . TIMES num_expr
    (89) num_expr -> num_expr . DIVIDE num_expr
    (90) num_expr -> num_expr . INT_DIVIDE num_expr
    (91) num_expr -> num_expr . POWER num_expr
    (92) num_expr -> num_expr . MODULO num_expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for INT_DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    SEMI            reduce using rule 92 (num_expr -> num_expr MODULO num_expr .)
    EQ              reduce using rule 92 (num_expr -> num_expr MODULO num_expr .)
    NE              reduce using rule 92 (num_expr -> num_expr MODULO num_expr .)
    LT              reduce using rule 92 (num_expr -> num_expr MODULO num_expr .)
    GT              reduce using rule 92 (num_expr -> num_expr MODULO num_expr .)
    LE              reduce using rule 92 (num_expr -> num_expr MODULO num_expr .)
    GE              reduce using rule 92 (num_expr -> num_expr MODULO num_expr .)
    RPAREN          reduce using rule 92 (num_expr -> num_expr MODULO num_expr .)
    AND             reduce using rule 92 (num_expr -> num_expr MODULO num_expr .)
    OR              reduce using rule 92 (num_expr -> num_expr MODULO num_expr .)
    TERNARY_Q       reduce using rule 92 (num_expr -> num_expr MODULO num_expr .)
    COMMA           reduce using rule 92 (num_expr -> num_expr MODULO num_expr .)
    TERNARY_C       reduce using rule 92 (num_expr -> num_expr MODULO num_expr .)
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73
    INT_DIVIDE      shift and go to state 74
    POWER           shift and go to state 75
    MODULO          shift and go to state 76

  ! PLUS            [ reduce using rule 92 (num_expr -> num_expr MODULO num_expr .) ]
  ! MINUS           [ reduce using rule 92 (num_expr -> num_expr MODULO num_expr .) ]
  ! TIMES           [ reduce using rule 92 (num_expr -> num_expr MODULO num_expr .) ]
  ! DIVIDE          [ reduce using rule 92 (num_expr -> num_expr MODULO num_expr .) ]
  ! INT_DIVIDE      [ reduce using rule 92 (num_expr -> num_expr MODULO num_expr .) ]
  ! POWER           [ reduce using rule 92 (num_expr -> num_expr MODULO num_expr .) ]
  ! MODULO          [ reduce using rule 92 (num_expr -> num_expr MODULO num_expr .) ]


state 128

    (94) string_expr -> string_expr CONCAT string_expr .
    (94) string_expr -> string_expr . CONCAT string_expr

  ! shift/reduce conflict for CONCAT resolved as shift
    SEMI            reduce using rule 94 (string_expr -> string_expr CONCAT string_expr .)
    EQ              reduce using rule 94 (string_expr -> string_expr CONCAT string_expr .)
    NE              reduce using rule 94 (string_expr -> string_expr CONCAT string_expr .)
    LT              reduce using rule 94 (string_expr -> string_expr CONCAT string_expr .)
    GT              reduce using rule 94 (string_expr -> string_expr CONCAT string_expr .)
    LE              reduce using rule 94 (string_expr -> string_expr CONCAT string_expr .)
    GE              reduce using rule 94 (string_expr -> string_expr CONCAT string_expr .)
    AND             reduce using rule 94 (string_expr -> string_expr CONCAT string_expr .)
    OR              reduce using rule 94 (string_expr -> string_expr CONCAT string_expr .)
    TERNARY_Q       reduce using rule 94 (string_expr -> string_expr CONCAT string_expr .)
    RPAREN          reduce using rule 94 (string_expr -> string_expr CONCAT string_expr .)
    COMMA           reduce using rule 94 (string_expr -> string_expr CONCAT string_expr .)
    TERNARY_C       reduce using rule 94 (string_expr -> string_expr CONCAT string_expr .)
    CONCAT          shift and go to state 77

  ! CONCAT          [ reduce using rule 94 (string_expr -> string_expr CONCAT string_expr .) ]


state 129

    (97) boolean_expr -> boolean_expr AND boolean_expr .
    (97) boolean_expr -> boolean_expr . AND boolean_expr
    (98) boolean_expr -> boolean_expr . OR boolean_expr
    (74) expr -> boolean_expr .
    (112) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for EQ resolved using rule 74 (expr -> boolean_expr .)
  ! reduce/reduce conflict for NE resolved using rule 74 (expr -> boolean_expr .)
  ! reduce/reduce conflict for LT resolved using rule 74 (expr -> boolean_expr .)
  ! reduce/reduce conflict for GT resolved using rule 74 (expr -> boolean_expr .)
  ! reduce/reduce conflict for LE resolved using rule 74 (expr -> boolean_expr .)
  ! reduce/reduce conflict for GE resolved using rule 74 (expr -> boolean_expr .)
  ! shift/reduce conflict for TERNARY_Q resolved as shift
    SEMI            reduce using rule 97 (boolean_expr -> boolean_expr AND boolean_expr .)
    RPAREN          reduce using rule 97 (boolean_expr -> boolean_expr AND boolean_expr .)
    COMMA           reduce using rule 97 (boolean_expr -> boolean_expr AND boolean_expr .)
    TERNARY_C       reduce using rule 97 (boolean_expr -> boolean_expr AND boolean_expr .)
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQ              reduce using rule 74 (expr -> boolean_expr .)
    NE              reduce using rule 74 (expr -> boolean_expr .)
    LT              reduce using rule 74 (expr -> boolean_expr .)
    GT              reduce using rule 74 (expr -> boolean_expr .)
    LE              reduce using rule 74 (expr -> boolean_expr .)
    GE              reduce using rule 74 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 80

  ! AND             [ reduce using rule 97 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! OR              [ reduce using rule 97 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! TERNARY_Q       [ reduce using rule 97 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! EQ              [ reduce using rule 97 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! NE              [ reduce using rule 97 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! LT              [ reduce using rule 97 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! GT              [ reduce using rule 97 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! LE              [ reduce using rule 97 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! GE              [ reduce using rule 97 (boolean_expr -> boolean_expr AND boolean_expr .) ]


state 130

    (98) boolean_expr -> boolean_expr OR boolean_expr .
    (97) boolean_expr -> boolean_expr . AND boolean_expr
    (98) boolean_expr -> boolean_expr . OR boolean_expr
    (74) expr -> boolean_expr .
    (112) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for EQ resolved using rule 74 (expr -> boolean_expr .)
  ! reduce/reduce conflict for NE resolved using rule 74 (expr -> boolean_expr .)
  ! reduce/reduce conflict for LT resolved using rule 74 (expr -> boolean_expr .)
  ! reduce/reduce conflict for GT resolved using rule 74 (expr -> boolean_expr .)
  ! reduce/reduce conflict for LE resolved using rule 74 (expr -> boolean_expr .)
  ! reduce/reduce conflict for GE resolved using rule 74 (expr -> boolean_expr .)
  ! shift/reduce conflict for TERNARY_Q resolved as shift
    SEMI            reduce using rule 98 (boolean_expr -> boolean_expr OR boolean_expr .)
    RPAREN          reduce using rule 98 (boolean_expr -> boolean_expr OR boolean_expr .)
    COMMA           reduce using rule 98 (boolean_expr -> boolean_expr OR boolean_expr .)
    TERNARY_C       reduce using rule 98 (boolean_expr -> boolean_expr OR boolean_expr .)
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQ              reduce using rule 74 (expr -> boolean_expr .)
    NE              reduce using rule 74 (expr -> boolean_expr .)
    LT              reduce using rule 74 (expr -> boolean_expr .)
    GT              reduce using rule 74 (expr -> boolean_expr .)
    LE              reduce using rule 74 (expr -> boolean_expr .)
    GE              reduce using rule 74 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 80

  ! AND             [ reduce using rule 98 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! OR              [ reduce using rule 98 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! TERNARY_Q       [ reduce using rule 98 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! EQ              [ reduce using rule 98 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! NE              [ reduce using rule 98 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! LT              [ reduce using rule 98 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! GT              [ reduce using rule 98 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! LE              [ reduce using rule 98 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! GE              [ reduce using rule 98 (boolean_expr -> boolean_expr OR boolean_expr .) ]


state 131

    (112) ternary_expr -> boolean_expr TERNARY_Q expr . TERNARY_C expr
    (105) comparison -> expr . EQ expr
    (106) comparison -> expr . NE expr
    (107) comparison -> expr . LT expr
    (108) comparison -> expr . GT expr
    (109) comparison -> expr . LE expr
    (110) comparison -> expr . GE expr

    TERNARY_C       shift and go to state 145
    EQ              shift and go to state 50
    NE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    LE              shift and go to state 54
    GE              shift and go to state 55


state 132

    (34) func_stmt -> FN var LPAREN . parameters_list RPAREN LBRACE scoped_block RBRACE
    (40) parameters_list -> . non_empty_parameters_list
    (41) parameters_list -> . empty
    (42) non_empty_parameters_list -> . var COMMA non_empty_parameters_list
    (43) non_empty_parameters_list -> . var
    (113) empty -> .
    (59) var -> . ID

    RPAREN          reduce using rule 113 (empty -> .)
    ID              shift and go to state 31

    var                            shift and go to state 146
    parameters_list                shift and go to state 147
    non_empty_parameters_list      shift and go to state 148
    empty                          shift and go to state 149

state 133

    (83) num_factor -> LPAREN num_expr RPAREN .

    PLUS            reduce using rule 83 (num_factor -> LPAREN num_expr RPAREN .)
    MINUS           reduce using rule 83 (num_factor -> LPAREN num_expr RPAREN .)
    TIMES           reduce using rule 83 (num_factor -> LPAREN num_expr RPAREN .)
    DIVIDE          reduce using rule 83 (num_factor -> LPAREN num_expr RPAREN .)
    INT_DIVIDE      reduce using rule 83 (num_factor -> LPAREN num_expr RPAREN .)
    POWER           reduce using rule 83 (num_factor -> LPAREN num_expr RPAREN .)
    MODULO          reduce using rule 83 (num_factor -> LPAREN num_expr RPAREN .)
    SEMI            reduce using rule 83 (num_factor -> LPAREN num_expr RPAREN .)
    EQ              reduce using rule 83 (num_factor -> LPAREN num_expr RPAREN .)
    NE              reduce using rule 83 (num_factor -> LPAREN num_expr RPAREN .)
    LT              reduce using rule 83 (num_factor -> LPAREN num_expr RPAREN .)
    GT              reduce using rule 83 (num_factor -> LPAREN num_expr RPAREN .)
    LE              reduce using rule 83 (num_factor -> LPAREN num_expr RPAREN .)
    GE              reduce using rule 83 (num_factor -> LPAREN num_expr RPAREN .)
    RPAREN          reduce using rule 83 (num_factor -> LPAREN num_expr RPAREN .)
    AND             reduce using rule 83 (num_factor -> LPAREN num_expr RPAREN .)
    OR              reduce using rule 83 (num_factor -> LPAREN num_expr RPAREN .)
    TERNARY_Q       reduce using rule 83 (num_factor -> LPAREN num_expr RPAREN .)
    COMMA           reduce using rule 83 (num_factor -> LPAREN num_expr RPAREN .)
    TERNARY_C       reduce using rule 83 (num_factor -> LPAREN num_expr RPAREN .)


state 134

    (101) boolean_factor -> LPAREN boolean_expr RPAREN .

    AND             reduce using rule 101 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    OR              reduce using rule 101 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    TERNARY_Q       reduce using rule 101 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    SEMI            reduce using rule 101 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    EQ              reduce using rule 101 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    NE              reduce using rule 101 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    LT              reduce using rule 101 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    GT              reduce using rule 101 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    LE              reduce using rule 101 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    GE              reduce using rule 101 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    RPAREN          reduce using rule 101 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    COMMA           reduce using rule 101 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    TERNARY_C       reduce using rule 101 (boolean_factor -> LPAREN boolean_expr RPAREN .)


state 135

    (44) if_stmt -> IF LPAREN boolean_expr . RPAREN LBRACE block RBRACE elif_stmt
    (97) boolean_expr -> boolean_expr . AND boolean_expr
    (98) boolean_expr -> boolean_expr . OR boolean_expr
    (74) expr -> boolean_expr .
    (112) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    RPAREN          shift and go to state 150
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQ              reduce using rule 74 (expr -> boolean_expr .)
    NE              reduce using rule 74 (expr -> boolean_expr .)
    LT              reduce using rule 74 (expr -> boolean_expr .)
    GT              reduce using rule 74 (expr -> boolean_expr .)
    LE              reduce using rule 74 (expr -> boolean_expr .)
    GE              reduce using rule 74 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 80


state 136

    (57) while_stmt -> WHILE LPAREN boolean_expr . RPAREN LBRACE block RBRACE
    (97) boolean_expr -> boolean_expr . AND boolean_expr
    (98) boolean_expr -> boolean_expr . OR boolean_expr
    (74) expr -> boolean_expr .
    (112) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    RPAREN          shift and go to state 151
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQ              reduce using rule 74 (expr -> boolean_expr .)
    NE              reduce using rule 74 (expr -> boolean_expr .)
    LT              reduce using rule 74 (expr -> boolean_expr .)
    GT              reduce using rule 74 (expr -> boolean_expr .)
    LE              reduce using rule 74 (expr -> boolean_expr .)
    GE              reduce using rule 74 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 80


state 137

    (58) for_stmt -> FOR LPAREN var_assign . SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE

    SEMI            shift and go to state 152


state 138

    (60) var_assign -> var . ASSIGN expr

    ASSIGN          shift and go to state 57


state 139

    (56) print_stmt -> PRINT LPAREN expr . RPAREN
    (105) comparison -> expr . EQ expr
    (106) comparison -> expr . NE expr
    (107) comparison -> expr . LT expr
    (108) comparison -> expr . GT expr
    (109) comparison -> expr . LE expr
    (110) comparison -> expr . GE expr

    RPAREN          shift and go to state 153
    EQ              shift and go to state 50
    NE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    LE              shift and go to state 54
    GE              shift and go to state 55


state 140

    (83) num_factor -> LPAREN num_expr . RPAREN
    (86) num_expr -> num_expr . PLUS num_expr
    (87) num_expr -> num_expr . MINUS num_expr
    (88) num_expr -> num_expr . TIMES num_expr
    (89) num_expr -> num_expr . DIVIDE num_expr
    (90) num_expr -> num_expr . INT_DIVIDE num_expr
    (91) num_expr -> num_expr . POWER num_expr
    (92) num_expr -> num_expr . MODULO num_expr

    RPAREN          shift and go to state 133
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 73
    INT_DIVIDE      shift and go to state 74
    POWER           shift and go to state 75
    MODULO          shift and go to state 76


state 141

    (104) boolean_factor -> var .
    (85) num_factor -> var .
    (35) func_call -> var . LPAREN arguments_list RPAREN
    (77) expr -> var .
    (96) string_expr -> var .

  ! reduce/reduce conflict for RPAREN resolved using rule 85 (num_factor -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 85 (num_factor -> var .)
  ! reduce/reduce conflict for NE resolved using rule 85 (num_factor -> var .)
  ! reduce/reduce conflict for LT resolved using rule 85 (num_factor -> var .)
  ! reduce/reduce conflict for GT resolved using rule 85 (num_factor -> var .)
  ! reduce/reduce conflict for LE resolved using rule 85 (num_factor -> var .)
  ! reduce/reduce conflict for GE resolved using rule 85 (num_factor -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 77 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 77 (expr -> var .)
    AND             reduce using rule 104 (boolean_factor -> var .)
    OR              reduce using rule 104 (boolean_factor -> var .)
    TERNARY_Q       reduce using rule 104 (boolean_factor -> var .)
    RPAREN          reduce using rule 85 (num_factor -> var .)
    PLUS            reduce using rule 85 (num_factor -> var .)
    MINUS           reduce using rule 85 (num_factor -> var .)
    TIMES           reduce using rule 85 (num_factor -> var .)
    DIVIDE          reduce using rule 85 (num_factor -> var .)
    INT_DIVIDE      reduce using rule 85 (num_factor -> var .)
    POWER           reduce using rule 85 (num_factor -> var .)
    MODULO          reduce using rule 85 (num_factor -> var .)
    LPAREN          shift and go to state 68
    EQ              reduce using rule 77 (expr -> var .)
    NE              reduce using rule 77 (expr -> var .)
    LT              reduce using rule 77 (expr -> var .)
    GT              reduce using rule 77 (expr -> var .)
    LE              reduce using rule 77 (expr -> var .)
    GE              reduce using rule 77 (expr -> var .)
    CONCAT          reduce using rule 96 (string_expr -> var .)

  ! RPAREN          [ reduce using rule 104 (boolean_factor -> var .) ]
  ! EQ              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! NE              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! LT              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! GT              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! LE              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! GE              [ reduce using rule 104 (boolean_factor -> var .) ]
  ! EQ              [ reduce using rule 85 (num_factor -> var .) ]
  ! NE              [ reduce using rule 85 (num_factor -> var .) ]
  ! LT              [ reduce using rule 85 (num_factor -> var .) ]
  ! GT              [ reduce using rule 85 (num_factor -> var .) ]
  ! LE              [ reduce using rule 85 (num_factor -> var .) ]
  ! GE              [ reduce using rule 85 (num_factor -> var .) ]
  ! EQ              [ reduce using rule 96 (string_expr -> var .) ]
  ! NE              [ reduce using rule 96 (string_expr -> var .) ]
  ! LT              [ reduce using rule 96 (string_expr -> var .) ]
  ! GT              [ reduce using rule 96 (string_expr -> var .) ]
  ! LE              [ reduce using rule 96 (string_expr -> var .) ]
  ! GE              [ reduce using rule 96 (string_expr -> var .) ]


state 142

    (35) func_call -> var LPAREN arguments_list RPAREN .

    SEMI            reduce using rule 35 (func_call -> var LPAREN arguments_list RPAREN .)
    EQ              reduce using rule 35 (func_call -> var LPAREN arguments_list RPAREN .)
    NE              reduce using rule 35 (func_call -> var LPAREN arguments_list RPAREN .)
    LT              reduce using rule 35 (func_call -> var LPAREN arguments_list RPAREN .)
    GT              reduce using rule 35 (func_call -> var LPAREN arguments_list RPAREN .)
    LE              reduce using rule 35 (func_call -> var LPAREN arguments_list RPAREN .)
    GE              reduce using rule 35 (func_call -> var LPAREN arguments_list RPAREN .)
    PLUS            reduce using rule 35 (func_call -> var LPAREN arguments_list RPAREN .)
    MINUS           reduce using rule 35 (func_call -> var LPAREN arguments_list RPAREN .)
    TIMES           reduce using rule 35 (func_call -> var LPAREN arguments_list RPAREN .)
    DIVIDE          reduce using rule 35 (func_call -> var LPAREN arguments_list RPAREN .)
    INT_DIVIDE      reduce using rule 35 (func_call -> var LPAREN arguments_list RPAREN .)
    POWER           reduce using rule 35 (func_call -> var LPAREN arguments_list RPAREN .)
    MODULO          reduce using rule 35 (func_call -> var LPAREN arguments_list RPAREN .)
    RPAREN          reduce using rule 35 (func_call -> var LPAREN arguments_list RPAREN .)
    AND             reduce using rule 35 (func_call -> var LPAREN arguments_list RPAREN .)
    OR              reduce using rule 35 (func_call -> var LPAREN arguments_list RPAREN .)
    TERNARY_Q       reduce using rule 35 (func_call -> var LPAREN arguments_list RPAREN .)
    COMMA           reduce using rule 35 (func_call -> var LPAREN arguments_list RPAREN .)
    TERNARY_C       reduce using rule 35 (func_call -> var LPAREN arguments_list RPAREN .)


state 143

    (38) non_empty_arguments_list -> expr COMMA . non_empty_arguments_list
    (38) non_empty_arguments_list -> . expr COMMA non_empty_arguments_list
    (39) non_empty_arguments_list -> . expr
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (59) var -> . ID
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    ID              shift and go to state 31
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

    expr                           shift and go to state 119
    non_empty_arguments_list       shift and go to state 154
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    boolean_expr                   shift and go to state 21
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    var                            shift and go to state 100
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 144

    (61) final_assign -> FINAL var ASSIGN expr .
    (105) comparison -> expr . EQ expr
    (106) comparison -> expr . NE expr
    (107) comparison -> expr . LT expr
    (108) comparison -> expr . GT expr
    (109) comparison -> expr . LE expr
    (110) comparison -> expr . GE expr

    SEMI            reduce using rule 61 (final_assign -> FINAL var ASSIGN expr .)
    EQ              shift and go to state 50
    NE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    LE              shift and go to state 54
    GE              shift and go to state 55


state 145

    (112) ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C . expr
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (59) var -> . ID
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    ID              shift and go to state 31
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

    boolean_expr                   shift and go to state 21
    expr                           shift and go to state 155
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    var                            shift and go to state 100
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 146

    (42) non_empty_parameters_list -> var . COMMA non_empty_parameters_list
    (43) non_empty_parameters_list -> var .

    COMMA           shift and go to state 156
    RPAREN          reduce using rule 43 (non_empty_parameters_list -> var .)


state 147

    (34) func_stmt -> FN var LPAREN parameters_list . RPAREN LBRACE scoped_block RBRACE

    RPAREN          shift and go to state 157


state 148

    (40) parameters_list -> non_empty_parameters_list .

    RPAREN          reduce using rule 40 (parameters_list -> non_empty_parameters_list .)


state 149

    (41) parameters_list -> empty .

    RPAREN          reduce using rule 41 (parameters_list -> empty .)


state 150

    (44) if_stmt -> IF LPAREN boolean_expr RPAREN . LBRACE block RBRACE elif_stmt

    LBRACE          shift and go to state 158


state 151

    (57) while_stmt -> WHILE LPAREN boolean_expr RPAREN . LBRACE block RBRACE

    LBRACE          shift and go to state 159


state 152

    (58) for_stmt -> FOR LPAREN var_assign SEMI . boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr
    (59) var -> . ID
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var

    NOT             shift and go to state 36
    LPAREN          shift and go to state 97
    BOOLEAN         shift and go to state 41
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    boolean_expr                   shift and go to state 160
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42
    var                            shift and go to state 98
    expr                           shift and go to state 86
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35

state 153

    (56) print_stmt -> PRINT LPAREN expr RPAREN .

    SEMI            reduce using rule 56 (print_stmt -> PRINT LPAREN expr RPAREN .)


state 154

    (38) non_empty_arguments_list -> expr COMMA non_empty_arguments_list .

    RPAREN          reduce using rule 38 (non_empty_arguments_list -> expr COMMA non_empty_arguments_list .)


state 155

    (112) ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .
    (105) comparison -> expr . EQ expr
    (106) comparison -> expr . NE expr
    (107) comparison -> expr . LT expr
    (108) comparison -> expr . GT expr
    (109) comparison -> expr . LE expr
    (110) comparison -> expr . GE expr

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    SEMI            reduce using rule 112 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .)
    AND             reduce using rule 112 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .)
    OR              reduce using rule 112 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .)
    TERNARY_Q       reduce using rule 112 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .)
    RPAREN          reduce using rule 112 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .)
    COMMA           reduce using rule 112 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .)
    TERNARY_C       reduce using rule 112 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .)
    EQ              shift and go to state 50
    NE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    LE              shift and go to state 54
    GE              shift and go to state 55

  ! EQ              [ reduce using rule 112 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .) ]
  ! NE              [ reduce using rule 112 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .) ]
  ! LT              [ reduce using rule 112 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .) ]
  ! GT              [ reduce using rule 112 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .) ]
  ! LE              [ reduce using rule 112 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .) ]
  ! GE              [ reduce using rule 112 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .) ]


state 156

    (42) non_empty_parameters_list -> var COMMA . non_empty_parameters_list
    (42) non_empty_parameters_list -> . var COMMA non_empty_parameters_list
    (43) non_empty_parameters_list -> . var
    (59) var -> . ID

    ID              shift and go to state 31

    var                            shift and go to state 146
    non_empty_parameters_list      shift and go to state 161

state 157

    (34) func_stmt -> FN var LPAREN parameters_list RPAREN . LBRACE scoped_block RBRACE

    LBRACE          shift and go to state 162


state 158

    (44) if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE . block RBRACE elif_stmt
    (2) block -> . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . concat_assign SEMI
    (9) statement -> . var_auto SEMI
    (10) statement -> . expr SEMI
    (11) statement -> . func_stmt
    (12) statement -> . if_stmt
    (13) statement -> . while_stmt
    (14) statement -> . for_stmt
    (15) statement -> . print_stmt SEMI
    (16) statement -> . empty
    (113) empty -> .
    (60) var_assign -> . var ASSIGN expr
    (61) final_assign -> . FINAL var ASSIGN expr
    (62) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (63) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (64) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (65) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (66) var_compound_assign -> . var POWER_ASSIGN num_expr
    (67) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (68) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (69) concat_assign -> . var CONCAT_ASSIGN string_expr
    (70) var_auto -> . var INCREMENT
    (71) var_auto -> . var DECREMENT
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (34) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (44) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (57) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (58) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (56) print_stmt -> . PRINT LPAREN expr RPAREN
    (59) var -> . ID
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 113 (empty -> .)
    FINAL           shift and go to state 18
    FN              shift and go to state 25
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    PRINT           shift and go to state 30
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

  ! FINAL           [ reduce using rule 113 (empty -> .) ]
  ! FN              [ reduce using rule 113 (empty -> .) ]
  ! IF              [ reduce using rule 113 (empty -> .) ]
  ! WHILE           [ reduce using rule 113 (empty -> .) ]
  ! FOR             [ reduce using rule 113 (empty -> .) ]
  ! PRINT           [ reduce using rule 113 (empty -> .) ]
  ! ID              [ reduce using rule 113 (empty -> .) ]
  ! STRING          [ reduce using rule 113 (empty -> .) ]
  ! NOT             [ reduce using rule 113 (empty -> .) ]
  ! NULL            [ reduce using rule 113 (empty -> .) ]
  ! PLUS            [ reduce using rule 113 (empty -> .) ]
  ! MINUS           [ reduce using rule 113 (empty -> .) ]
  ! INTEGER         [ reduce using rule 113 (empty -> .) ]
  ! FLOAT           [ reduce using rule 113 (empty -> .) ]
  ! LPAREN          [ reduce using rule 113 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 113 (empty -> .) ]

    boolean_expr                   shift and go to state 21
    block                          shift and go to state 163
    statement_list                 shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 5
    var_assign                     shift and go to state 6
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    concat_assign                  shift and go to state 9
    var_auto                       shift and go to state 10
    expr                           shift and go to state 11
    func_stmt                      shift and go to state 12
    if_stmt                        shift and go to state 13
    while_stmt                     shift and go to state 14
    for_stmt                       shift and go to state 15
    print_stmt                     shift and go to state 16
    var                            shift and go to state 17
    num_expr                       shift and go to state 19
    string_expr                    shift and go to state 20
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 159

    (57) while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE . block RBRACE
    (2) block -> . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . concat_assign SEMI
    (9) statement -> . var_auto SEMI
    (10) statement -> . expr SEMI
    (11) statement -> . func_stmt
    (12) statement -> . if_stmt
    (13) statement -> . while_stmt
    (14) statement -> . for_stmt
    (15) statement -> . print_stmt SEMI
    (16) statement -> . empty
    (113) empty -> .
    (60) var_assign -> . var ASSIGN expr
    (61) final_assign -> . FINAL var ASSIGN expr
    (62) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (63) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (64) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (65) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (66) var_compound_assign -> . var POWER_ASSIGN num_expr
    (67) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (68) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (69) concat_assign -> . var CONCAT_ASSIGN string_expr
    (70) var_auto -> . var INCREMENT
    (71) var_auto -> . var DECREMENT
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (34) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (44) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (57) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (58) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (56) print_stmt -> . PRINT LPAREN expr RPAREN
    (59) var -> . ID
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 113 (empty -> .)
    FINAL           shift and go to state 18
    FN              shift and go to state 25
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    PRINT           shift and go to state 30
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

  ! FINAL           [ reduce using rule 113 (empty -> .) ]
  ! FN              [ reduce using rule 113 (empty -> .) ]
  ! IF              [ reduce using rule 113 (empty -> .) ]
  ! WHILE           [ reduce using rule 113 (empty -> .) ]
  ! FOR             [ reduce using rule 113 (empty -> .) ]
  ! PRINT           [ reduce using rule 113 (empty -> .) ]
  ! ID              [ reduce using rule 113 (empty -> .) ]
  ! STRING          [ reduce using rule 113 (empty -> .) ]
  ! NOT             [ reduce using rule 113 (empty -> .) ]
  ! NULL            [ reduce using rule 113 (empty -> .) ]
  ! PLUS            [ reduce using rule 113 (empty -> .) ]
  ! MINUS           [ reduce using rule 113 (empty -> .) ]
  ! INTEGER         [ reduce using rule 113 (empty -> .) ]
  ! FLOAT           [ reduce using rule 113 (empty -> .) ]
  ! LPAREN          [ reduce using rule 113 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 113 (empty -> .) ]

    boolean_expr                   shift and go to state 21
    block                          shift and go to state 164
    statement_list                 shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 5
    var_assign                     shift and go to state 6
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    concat_assign                  shift and go to state 9
    var_auto                       shift and go to state 10
    expr                           shift and go to state 11
    func_stmt                      shift and go to state 12
    if_stmt                        shift and go to state 13
    while_stmt                     shift and go to state 14
    for_stmt                       shift and go to state 15
    print_stmt                     shift and go to state 16
    var                            shift and go to state 17
    num_expr                       shift and go to state 19
    string_expr                    shift and go to state 20
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 160

    (58) for_stmt -> FOR LPAREN var_assign SEMI boolean_expr . SEMI var_auto RPAREN LBRACE block RBRACE
    (97) boolean_expr -> boolean_expr . AND boolean_expr
    (98) boolean_expr -> boolean_expr . OR boolean_expr
    (74) expr -> boolean_expr .
    (112) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    SEMI            shift and go to state 165
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQ              reduce using rule 74 (expr -> boolean_expr .)
    NE              reduce using rule 74 (expr -> boolean_expr .)
    LT              reduce using rule 74 (expr -> boolean_expr .)
    GT              reduce using rule 74 (expr -> boolean_expr .)
    LE              reduce using rule 74 (expr -> boolean_expr .)
    GE              reduce using rule 74 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 80


state 161

    (42) non_empty_parameters_list -> var COMMA non_empty_parameters_list .

    RPAREN          reduce using rule 42 (non_empty_parameters_list -> var COMMA non_empty_parameters_list .)


state 162

    (34) func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE . scoped_block RBRACE
    (17) scoped_block -> . scoped_statement_list
    (18) scoped_statement_list -> . scoped_statement scoped_statement_list
    (19) scoped_statement_list -> . empty
    (20) scoped_statement -> . var_assign SEMI
    (21) scoped_statement -> . final_assign SEMI
    (22) scoped_statement -> . var_compound_assign SEMI
    (23) scoped_statement -> . concat_assign SEMI
    (24) scoped_statement -> . var_auto SEMI
    (25) scoped_statement -> . expr SEMI
    (26) scoped_statement -> . func_stmt
    (27) scoped_statement -> . scoped_if_stmt
    (28) scoped_statement -> . scoped_while_stmt
    (29) scoped_statement -> . scoped_for_stmt
    (30) scoped_statement -> . print_stmt SEMI
    (31) scoped_statement -> . return SEMI
    (32) scoped_statement -> . empty
    (113) empty -> .
    (60) var_assign -> . var ASSIGN expr
    (61) final_assign -> . FINAL var ASSIGN expr
    (62) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (63) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (64) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (65) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (66) var_compound_assign -> . var POWER_ASSIGN num_expr
    (67) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (68) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (69) concat_assign -> . var CONCAT_ASSIGN string_expr
    (70) var_auto -> . var INCREMENT
    (71) var_auto -> . var DECREMENT
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (34) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (49) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (54) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (55) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (56) print_stmt -> . PRINT LPAREN expr RPAREN
    (33) return -> . RETURN expr
    (59) var -> . ID
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 113 (empty -> .)
    FINAL           shift and go to state 18
    FN              shift and go to state 25
    IF              shift and go to state 182
    WHILE           shift and go to state 183
    FOR             shift and go to state 184
    PRINT           shift and go to state 30
    RETURN          shift and go to state 185
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

  ! FINAL           [ reduce using rule 113 (empty -> .) ]
  ! FN              [ reduce using rule 113 (empty -> .) ]
  ! IF              [ reduce using rule 113 (empty -> .) ]
  ! WHILE           [ reduce using rule 113 (empty -> .) ]
  ! FOR             [ reduce using rule 113 (empty -> .) ]
  ! PRINT           [ reduce using rule 113 (empty -> .) ]
  ! RETURN          [ reduce using rule 113 (empty -> .) ]
  ! ID              [ reduce using rule 113 (empty -> .) ]
  ! STRING          [ reduce using rule 113 (empty -> .) ]
  ! NOT             [ reduce using rule 113 (empty -> .) ]
  ! NULL            [ reduce using rule 113 (empty -> .) ]
  ! PLUS            [ reduce using rule 113 (empty -> .) ]
  ! MINUS           [ reduce using rule 113 (empty -> .) ]
  ! INTEGER         [ reduce using rule 113 (empty -> .) ]
  ! FLOAT           [ reduce using rule 113 (empty -> .) ]
  ! LPAREN          [ reduce using rule 113 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 113 (empty -> .) ]

    var                            shift and go to state 17
    scoped_block                   shift and go to state 166
    scoped_statement_list          shift and go to state 167
    scoped_statement               shift and go to state 168
    empty                          shift and go to state 169
    var_assign                     shift and go to state 170
    final_assign                   shift and go to state 171
    var_compound_assign            shift and go to state 172
    concat_assign                  shift and go to state 173
    var_auto                       shift and go to state 174
    expr                           shift and go to state 175
    func_stmt                      shift and go to state 176
    scoped_if_stmt                 shift and go to state 177
    scoped_while_stmt              shift and go to state 178
    scoped_for_stmt                shift and go to state 179
    print_stmt                     shift and go to state 180
    return                         shift and go to state 181
    num_expr                       shift and go to state 19
    string_expr                    shift and go to state 20
    boolean_expr                   shift and go to state 21
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 163

    (44) if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block . RBRACE elif_stmt

    RBRACE          shift and go to state 186


state 164

    (57) while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block . RBRACE

    RBRACE          shift and go to state 187


state 165

    (58) for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI . var_auto RPAREN LBRACE block RBRACE
    (70) var_auto -> . var INCREMENT
    (71) var_auto -> . var DECREMENT
    (59) var -> . ID

    ID              shift and go to state 31

    var_auto                       shift and go to state 188
    var                            shift and go to state 189

state 166

    (34) func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block . RBRACE

    RBRACE          shift and go to state 190


state 167

    (17) scoped_block -> scoped_statement_list .

    RBRACE          reduce using rule 17 (scoped_block -> scoped_statement_list .)


state 168

    (18) scoped_statement_list -> scoped_statement . scoped_statement_list
    (18) scoped_statement_list -> . scoped_statement scoped_statement_list
    (19) scoped_statement_list -> . empty
    (20) scoped_statement -> . var_assign SEMI
    (21) scoped_statement -> . final_assign SEMI
    (22) scoped_statement -> . var_compound_assign SEMI
    (23) scoped_statement -> . concat_assign SEMI
    (24) scoped_statement -> . var_auto SEMI
    (25) scoped_statement -> . expr SEMI
    (26) scoped_statement -> . func_stmt
    (27) scoped_statement -> . scoped_if_stmt
    (28) scoped_statement -> . scoped_while_stmt
    (29) scoped_statement -> . scoped_for_stmt
    (30) scoped_statement -> . print_stmt SEMI
    (31) scoped_statement -> . return SEMI
    (32) scoped_statement -> . empty
    (113) empty -> .
    (60) var_assign -> . var ASSIGN expr
    (61) final_assign -> . FINAL var ASSIGN expr
    (62) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (63) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (64) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (65) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (66) var_compound_assign -> . var POWER_ASSIGN num_expr
    (67) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (68) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (69) concat_assign -> . var CONCAT_ASSIGN string_expr
    (70) var_auto -> . var INCREMENT
    (71) var_auto -> . var DECREMENT
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (34) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (49) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (54) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (55) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (56) print_stmt -> . PRINT LPAREN expr RPAREN
    (33) return -> . RETURN expr
    (59) var -> . ID
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 113 (empty -> .)
    FINAL           shift and go to state 18
    FN              shift and go to state 25
    IF              shift and go to state 182
    WHILE           shift and go to state 183
    FOR             shift and go to state 184
    PRINT           shift and go to state 30
    RETURN          shift and go to state 185
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

  ! FINAL           [ reduce using rule 113 (empty -> .) ]
  ! FN              [ reduce using rule 113 (empty -> .) ]
  ! IF              [ reduce using rule 113 (empty -> .) ]
  ! WHILE           [ reduce using rule 113 (empty -> .) ]
  ! FOR             [ reduce using rule 113 (empty -> .) ]
  ! PRINT           [ reduce using rule 113 (empty -> .) ]
  ! RETURN          [ reduce using rule 113 (empty -> .) ]
  ! ID              [ reduce using rule 113 (empty -> .) ]
  ! STRING          [ reduce using rule 113 (empty -> .) ]
  ! NOT             [ reduce using rule 113 (empty -> .) ]
  ! NULL            [ reduce using rule 113 (empty -> .) ]
  ! PLUS            [ reduce using rule 113 (empty -> .) ]
  ! MINUS           [ reduce using rule 113 (empty -> .) ]
  ! INTEGER         [ reduce using rule 113 (empty -> .) ]
  ! FLOAT           [ reduce using rule 113 (empty -> .) ]
  ! LPAREN          [ reduce using rule 113 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 113 (empty -> .) ]

    scoped_statement               shift and go to state 168
    scoped_statement_list          shift and go to state 191
    empty                          shift and go to state 169
    var_assign                     shift and go to state 170
    final_assign                   shift and go to state 171
    var_compound_assign            shift and go to state 172
    concat_assign                  shift and go to state 173
    var_auto                       shift and go to state 174
    expr                           shift and go to state 175
    func_stmt                      shift and go to state 176
    scoped_if_stmt                 shift and go to state 177
    scoped_while_stmt              shift and go to state 178
    scoped_for_stmt                shift and go to state 179
    print_stmt                     shift and go to state 180
    return                         shift and go to state 181
    var                            shift and go to state 17
    num_expr                       shift and go to state 19
    string_expr                    shift and go to state 20
    boolean_expr                   shift and go to state 21
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 169

    (19) scoped_statement_list -> empty .
    (32) scoped_statement -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 19 (scoped_statement_list -> empty .)
    RBRACE          reduce using rule 19 (scoped_statement_list -> empty .)
    FINAL           reduce using rule 32 (scoped_statement -> empty .)
    FN              reduce using rule 32 (scoped_statement -> empty .)
    IF              reduce using rule 32 (scoped_statement -> empty .)
    WHILE           reduce using rule 32 (scoped_statement -> empty .)
    FOR             reduce using rule 32 (scoped_statement -> empty .)
    PRINT           reduce using rule 32 (scoped_statement -> empty .)
    RETURN          reduce using rule 32 (scoped_statement -> empty .)
    ID              reduce using rule 32 (scoped_statement -> empty .)
    STRING          reduce using rule 32 (scoped_statement -> empty .)
    NOT             reduce using rule 32 (scoped_statement -> empty .)
    NULL            reduce using rule 32 (scoped_statement -> empty .)
    PLUS            reduce using rule 32 (scoped_statement -> empty .)
    MINUS           reduce using rule 32 (scoped_statement -> empty .)
    INTEGER         reduce using rule 32 (scoped_statement -> empty .)
    FLOAT           reduce using rule 32 (scoped_statement -> empty .)
    LPAREN          reduce using rule 32 (scoped_statement -> empty .)
    BOOLEAN         reduce using rule 32 (scoped_statement -> empty .)

  ! RBRACE          [ reduce using rule 32 (scoped_statement -> empty .) ]


state 170

    (20) scoped_statement -> var_assign . SEMI

    SEMI            shift and go to state 192


state 171

    (21) scoped_statement -> final_assign . SEMI

    SEMI            shift and go to state 193


state 172

    (22) scoped_statement -> var_compound_assign . SEMI

    SEMI            shift and go to state 194


state 173

    (23) scoped_statement -> concat_assign . SEMI

    SEMI            shift and go to state 195


state 174

    (24) scoped_statement -> var_auto . SEMI

    SEMI            shift and go to state 196


state 175

    (25) scoped_statement -> expr . SEMI
    (105) comparison -> expr . EQ expr
    (106) comparison -> expr . NE expr
    (107) comparison -> expr . LT expr
    (108) comparison -> expr . GT expr
    (109) comparison -> expr . LE expr
    (110) comparison -> expr . GE expr

    SEMI            shift and go to state 197
    EQ              shift and go to state 50
    NE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    LE              shift and go to state 54
    GE              shift and go to state 55


state 176

    (26) scoped_statement -> func_stmt .

    FINAL           reduce using rule 26 (scoped_statement -> func_stmt .)
    FN              reduce using rule 26 (scoped_statement -> func_stmt .)
    IF              reduce using rule 26 (scoped_statement -> func_stmt .)
    WHILE           reduce using rule 26 (scoped_statement -> func_stmt .)
    FOR             reduce using rule 26 (scoped_statement -> func_stmt .)
    PRINT           reduce using rule 26 (scoped_statement -> func_stmt .)
    RETURN          reduce using rule 26 (scoped_statement -> func_stmt .)
    ID              reduce using rule 26 (scoped_statement -> func_stmt .)
    STRING          reduce using rule 26 (scoped_statement -> func_stmt .)
    NOT             reduce using rule 26 (scoped_statement -> func_stmt .)
    NULL            reduce using rule 26 (scoped_statement -> func_stmt .)
    PLUS            reduce using rule 26 (scoped_statement -> func_stmt .)
    MINUS           reduce using rule 26 (scoped_statement -> func_stmt .)
    INTEGER         reduce using rule 26 (scoped_statement -> func_stmt .)
    FLOAT           reduce using rule 26 (scoped_statement -> func_stmt .)
    LPAREN          reduce using rule 26 (scoped_statement -> func_stmt .)
    BOOLEAN         reduce using rule 26 (scoped_statement -> func_stmt .)
    RBRACE          reduce using rule 26 (scoped_statement -> func_stmt .)


state 177

    (27) scoped_statement -> scoped_if_stmt .

    FINAL           reduce using rule 27 (scoped_statement -> scoped_if_stmt .)
    FN              reduce using rule 27 (scoped_statement -> scoped_if_stmt .)
    IF              reduce using rule 27 (scoped_statement -> scoped_if_stmt .)
    WHILE           reduce using rule 27 (scoped_statement -> scoped_if_stmt .)
    FOR             reduce using rule 27 (scoped_statement -> scoped_if_stmt .)
    PRINT           reduce using rule 27 (scoped_statement -> scoped_if_stmt .)
    RETURN          reduce using rule 27 (scoped_statement -> scoped_if_stmt .)
    ID              reduce using rule 27 (scoped_statement -> scoped_if_stmt .)
    STRING          reduce using rule 27 (scoped_statement -> scoped_if_stmt .)
    NOT             reduce using rule 27 (scoped_statement -> scoped_if_stmt .)
    NULL            reduce using rule 27 (scoped_statement -> scoped_if_stmt .)
    PLUS            reduce using rule 27 (scoped_statement -> scoped_if_stmt .)
    MINUS           reduce using rule 27 (scoped_statement -> scoped_if_stmt .)
    INTEGER         reduce using rule 27 (scoped_statement -> scoped_if_stmt .)
    FLOAT           reduce using rule 27 (scoped_statement -> scoped_if_stmt .)
    LPAREN          reduce using rule 27 (scoped_statement -> scoped_if_stmt .)
    BOOLEAN         reduce using rule 27 (scoped_statement -> scoped_if_stmt .)
    RBRACE          reduce using rule 27 (scoped_statement -> scoped_if_stmt .)


state 178

    (28) scoped_statement -> scoped_while_stmt .

    FINAL           reduce using rule 28 (scoped_statement -> scoped_while_stmt .)
    FN              reduce using rule 28 (scoped_statement -> scoped_while_stmt .)
    IF              reduce using rule 28 (scoped_statement -> scoped_while_stmt .)
    WHILE           reduce using rule 28 (scoped_statement -> scoped_while_stmt .)
    FOR             reduce using rule 28 (scoped_statement -> scoped_while_stmt .)
    PRINT           reduce using rule 28 (scoped_statement -> scoped_while_stmt .)
    RETURN          reduce using rule 28 (scoped_statement -> scoped_while_stmt .)
    ID              reduce using rule 28 (scoped_statement -> scoped_while_stmt .)
    STRING          reduce using rule 28 (scoped_statement -> scoped_while_stmt .)
    NOT             reduce using rule 28 (scoped_statement -> scoped_while_stmt .)
    NULL            reduce using rule 28 (scoped_statement -> scoped_while_stmt .)
    PLUS            reduce using rule 28 (scoped_statement -> scoped_while_stmt .)
    MINUS           reduce using rule 28 (scoped_statement -> scoped_while_stmt .)
    INTEGER         reduce using rule 28 (scoped_statement -> scoped_while_stmt .)
    FLOAT           reduce using rule 28 (scoped_statement -> scoped_while_stmt .)
    LPAREN          reduce using rule 28 (scoped_statement -> scoped_while_stmt .)
    BOOLEAN         reduce using rule 28 (scoped_statement -> scoped_while_stmt .)
    RBRACE          reduce using rule 28 (scoped_statement -> scoped_while_stmt .)


state 179

    (29) scoped_statement -> scoped_for_stmt .

    FINAL           reduce using rule 29 (scoped_statement -> scoped_for_stmt .)
    FN              reduce using rule 29 (scoped_statement -> scoped_for_stmt .)
    IF              reduce using rule 29 (scoped_statement -> scoped_for_stmt .)
    WHILE           reduce using rule 29 (scoped_statement -> scoped_for_stmt .)
    FOR             reduce using rule 29 (scoped_statement -> scoped_for_stmt .)
    PRINT           reduce using rule 29 (scoped_statement -> scoped_for_stmt .)
    RETURN          reduce using rule 29 (scoped_statement -> scoped_for_stmt .)
    ID              reduce using rule 29 (scoped_statement -> scoped_for_stmt .)
    STRING          reduce using rule 29 (scoped_statement -> scoped_for_stmt .)
    NOT             reduce using rule 29 (scoped_statement -> scoped_for_stmt .)
    NULL            reduce using rule 29 (scoped_statement -> scoped_for_stmt .)
    PLUS            reduce using rule 29 (scoped_statement -> scoped_for_stmt .)
    MINUS           reduce using rule 29 (scoped_statement -> scoped_for_stmt .)
    INTEGER         reduce using rule 29 (scoped_statement -> scoped_for_stmt .)
    FLOAT           reduce using rule 29 (scoped_statement -> scoped_for_stmt .)
    LPAREN          reduce using rule 29 (scoped_statement -> scoped_for_stmt .)
    BOOLEAN         reduce using rule 29 (scoped_statement -> scoped_for_stmt .)
    RBRACE          reduce using rule 29 (scoped_statement -> scoped_for_stmt .)


state 180

    (30) scoped_statement -> print_stmt . SEMI

    SEMI            shift and go to state 198


state 181

    (31) scoped_statement -> return . SEMI

    SEMI            shift and go to state 199


state 182

    (49) scoped_if_stmt -> IF . LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt

    LPAREN          shift and go to state 200


state 183

    (54) scoped_while_stmt -> WHILE . LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE

    LPAREN          shift and go to state 201


state 184

    (55) scoped_for_stmt -> FOR . LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE

    LPAREN          shift and go to state 202


state 185

    (33) return -> RETURN . expr
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (59) var -> . ID
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    ID              shift and go to state 31
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

    expr                           shift and go to state 203
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    boolean_expr                   shift and go to state 21
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    var                            shift and go to state 100
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 186

    (44) if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE . elif_stmt
    (45) elif_stmt -> . ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (46) elif_stmt -> . else_stmt
    (47) elif_stmt -> . empty
    (48) else_stmt -> . ELSE LBRACE block RBRACE
    (113) empty -> .

    ELIF            shift and go to state 205
    ELSE            shift and go to state 208
    FINAL           reduce using rule 113 (empty -> .)
    FN              reduce using rule 113 (empty -> .)
    IF              reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    FOR             reduce using rule 113 (empty -> .)
    PRINT           reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    STRING          reduce using rule 113 (empty -> .)
    NOT             reduce using rule 113 (empty -> .)
    NULL            reduce using rule 113 (empty -> .)
    PLUS            reduce using rule 113 (empty -> .)
    MINUS           reduce using rule 113 (empty -> .)
    INTEGER         reduce using rule 113 (empty -> .)
    FLOAT           reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    BOOLEAN         reduce using rule 113 (empty -> .)
    $end            reduce using rule 113 (empty -> .)
    RBRACE          reduce using rule 113 (empty -> .)

    elif_stmt                      shift and go to state 204
    else_stmt                      shift and go to state 206
    empty                          shift and go to state 207

state 187

    (57) while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .

    FINAL           reduce using rule 57 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    FN              reduce using rule 57 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    IF              reduce using rule 57 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    WHILE           reduce using rule 57 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    FOR             reduce using rule 57 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    PRINT           reduce using rule 57 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    ID              reduce using rule 57 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    STRING          reduce using rule 57 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    NOT             reduce using rule 57 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    NULL            reduce using rule 57 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    PLUS            reduce using rule 57 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    MINUS           reduce using rule 57 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    INTEGER         reduce using rule 57 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    FLOAT           reduce using rule 57 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    LPAREN          reduce using rule 57 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    BOOLEAN         reduce using rule 57 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    $end            reduce using rule 57 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    RBRACE          reduce using rule 57 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)


state 188

    (58) for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto . RPAREN LBRACE block RBRACE

    RPAREN          shift and go to state 209


state 189

    (70) var_auto -> var . INCREMENT
    (71) var_auto -> var . DECREMENT

    INCREMENT       shift and go to state 66
    DECREMENT       shift and go to state 67


state 190

    (34) func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .

    FINAL           reduce using rule 34 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    FN              reduce using rule 34 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    IF              reduce using rule 34 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    WHILE           reduce using rule 34 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    FOR             reduce using rule 34 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    PRINT           reduce using rule 34 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    ID              reduce using rule 34 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    STRING          reduce using rule 34 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    NOT             reduce using rule 34 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    NULL            reduce using rule 34 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    PLUS            reduce using rule 34 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    MINUS           reduce using rule 34 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    INTEGER         reduce using rule 34 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    FLOAT           reduce using rule 34 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    LPAREN          reduce using rule 34 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    BOOLEAN         reduce using rule 34 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    $end            reduce using rule 34 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    RBRACE          reduce using rule 34 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    RETURN          reduce using rule 34 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)


state 191

    (18) scoped_statement_list -> scoped_statement scoped_statement_list .

    RBRACE          reduce using rule 18 (scoped_statement_list -> scoped_statement scoped_statement_list .)


state 192

    (20) scoped_statement -> var_assign SEMI .

    FINAL           reduce using rule 20 (scoped_statement -> var_assign SEMI .)
    FN              reduce using rule 20 (scoped_statement -> var_assign SEMI .)
    IF              reduce using rule 20 (scoped_statement -> var_assign SEMI .)
    WHILE           reduce using rule 20 (scoped_statement -> var_assign SEMI .)
    FOR             reduce using rule 20 (scoped_statement -> var_assign SEMI .)
    PRINT           reduce using rule 20 (scoped_statement -> var_assign SEMI .)
    RETURN          reduce using rule 20 (scoped_statement -> var_assign SEMI .)
    ID              reduce using rule 20 (scoped_statement -> var_assign SEMI .)
    STRING          reduce using rule 20 (scoped_statement -> var_assign SEMI .)
    NOT             reduce using rule 20 (scoped_statement -> var_assign SEMI .)
    NULL            reduce using rule 20 (scoped_statement -> var_assign SEMI .)
    PLUS            reduce using rule 20 (scoped_statement -> var_assign SEMI .)
    MINUS           reduce using rule 20 (scoped_statement -> var_assign SEMI .)
    INTEGER         reduce using rule 20 (scoped_statement -> var_assign SEMI .)
    FLOAT           reduce using rule 20 (scoped_statement -> var_assign SEMI .)
    LPAREN          reduce using rule 20 (scoped_statement -> var_assign SEMI .)
    BOOLEAN         reduce using rule 20 (scoped_statement -> var_assign SEMI .)
    RBRACE          reduce using rule 20 (scoped_statement -> var_assign SEMI .)


state 193

    (21) scoped_statement -> final_assign SEMI .

    FINAL           reduce using rule 21 (scoped_statement -> final_assign SEMI .)
    FN              reduce using rule 21 (scoped_statement -> final_assign SEMI .)
    IF              reduce using rule 21 (scoped_statement -> final_assign SEMI .)
    WHILE           reduce using rule 21 (scoped_statement -> final_assign SEMI .)
    FOR             reduce using rule 21 (scoped_statement -> final_assign SEMI .)
    PRINT           reduce using rule 21 (scoped_statement -> final_assign SEMI .)
    RETURN          reduce using rule 21 (scoped_statement -> final_assign SEMI .)
    ID              reduce using rule 21 (scoped_statement -> final_assign SEMI .)
    STRING          reduce using rule 21 (scoped_statement -> final_assign SEMI .)
    NOT             reduce using rule 21 (scoped_statement -> final_assign SEMI .)
    NULL            reduce using rule 21 (scoped_statement -> final_assign SEMI .)
    PLUS            reduce using rule 21 (scoped_statement -> final_assign SEMI .)
    MINUS           reduce using rule 21 (scoped_statement -> final_assign SEMI .)
    INTEGER         reduce using rule 21 (scoped_statement -> final_assign SEMI .)
    FLOAT           reduce using rule 21 (scoped_statement -> final_assign SEMI .)
    LPAREN          reduce using rule 21 (scoped_statement -> final_assign SEMI .)
    BOOLEAN         reduce using rule 21 (scoped_statement -> final_assign SEMI .)
    RBRACE          reduce using rule 21 (scoped_statement -> final_assign SEMI .)


state 194

    (22) scoped_statement -> var_compound_assign SEMI .

    FINAL           reduce using rule 22 (scoped_statement -> var_compound_assign SEMI .)
    FN              reduce using rule 22 (scoped_statement -> var_compound_assign SEMI .)
    IF              reduce using rule 22 (scoped_statement -> var_compound_assign SEMI .)
    WHILE           reduce using rule 22 (scoped_statement -> var_compound_assign SEMI .)
    FOR             reduce using rule 22 (scoped_statement -> var_compound_assign SEMI .)
    PRINT           reduce using rule 22 (scoped_statement -> var_compound_assign SEMI .)
    RETURN          reduce using rule 22 (scoped_statement -> var_compound_assign SEMI .)
    ID              reduce using rule 22 (scoped_statement -> var_compound_assign SEMI .)
    STRING          reduce using rule 22 (scoped_statement -> var_compound_assign SEMI .)
    NOT             reduce using rule 22 (scoped_statement -> var_compound_assign SEMI .)
    NULL            reduce using rule 22 (scoped_statement -> var_compound_assign SEMI .)
    PLUS            reduce using rule 22 (scoped_statement -> var_compound_assign SEMI .)
    MINUS           reduce using rule 22 (scoped_statement -> var_compound_assign SEMI .)
    INTEGER         reduce using rule 22 (scoped_statement -> var_compound_assign SEMI .)
    FLOAT           reduce using rule 22 (scoped_statement -> var_compound_assign SEMI .)
    LPAREN          reduce using rule 22 (scoped_statement -> var_compound_assign SEMI .)
    BOOLEAN         reduce using rule 22 (scoped_statement -> var_compound_assign SEMI .)
    RBRACE          reduce using rule 22 (scoped_statement -> var_compound_assign SEMI .)


state 195

    (23) scoped_statement -> concat_assign SEMI .

    FINAL           reduce using rule 23 (scoped_statement -> concat_assign SEMI .)
    FN              reduce using rule 23 (scoped_statement -> concat_assign SEMI .)
    IF              reduce using rule 23 (scoped_statement -> concat_assign SEMI .)
    WHILE           reduce using rule 23 (scoped_statement -> concat_assign SEMI .)
    FOR             reduce using rule 23 (scoped_statement -> concat_assign SEMI .)
    PRINT           reduce using rule 23 (scoped_statement -> concat_assign SEMI .)
    RETURN          reduce using rule 23 (scoped_statement -> concat_assign SEMI .)
    ID              reduce using rule 23 (scoped_statement -> concat_assign SEMI .)
    STRING          reduce using rule 23 (scoped_statement -> concat_assign SEMI .)
    NOT             reduce using rule 23 (scoped_statement -> concat_assign SEMI .)
    NULL            reduce using rule 23 (scoped_statement -> concat_assign SEMI .)
    PLUS            reduce using rule 23 (scoped_statement -> concat_assign SEMI .)
    MINUS           reduce using rule 23 (scoped_statement -> concat_assign SEMI .)
    INTEGER         reduce using rule 23 (scoped_statement -> concat_assign SEMI .)
    FLOAT           reduce using rule 23 (scoped_statement -> concat_assign SEMI .)
    LPAREN          reduce using rule 23 (scoped_statement -> concat_assign SEMI .)
    BOOLEAN         reduce using rule 23 (scoped_statement -> concat_assign SEMI .)
    RBRACE          reduce using rule 23 (scoped_statement -> concat_assign SEMI .)


state 196

    (24) scoped_statement -> var_auto SEMI .

    FINAL           reduce using rule 24 (scoped_statement -> var_auto SEMI .)
    FN              reduce using rule 24 (scoped_statement -> var_auto SEMI .)
    IF              reduce using rule 24 (scoped_statement -> var_auto SEMI .)
    WHILE           reduce using rule 24 (scoped_statement -> var_auto SEMI .)
    FOR             reduce using rule 24 (scoped_statement -> var_auto SEMI .)
    PRINT           reduce using rule 24 (scoped_statement -> var_auto SEMI .)
    RETURN          reduce using rule 24 (scoped_statement -> var_auto SEMI .)
    ID              reduce using rule 24 (scoped_statement -> var_auto SEMI .)
    STRING          reduce using rule 24 (scoped_statement -> var_auto SEMI .)
    NOT             reduce using rule 24 (scoped_statement -> var_auto SEMI .)
    NULL            reduce using rule 24 (scoped_statement -> var_auto SEMI .)
    PLUS            reduce using rule 24 (scoped_statement -> var_auto SEMI .)
    MINUS           reduce using rule 24 (scoped_statement -> var_auto SEMI .)
    INTEGER         reduce using rule 24 (scoped_statement -> var_auto SEMI .)
    FLOAT           reduce using rule 24 (scoped_statement -> var_auto SEMI .)
    LPAREN          reduce using rule 24 (scoped_statement -> var_auto SEMI .)
    BOOLEAN         reduce using rule 24 (scoped_statement -> var_auto SEMI .)
    RBRACE          reduce using rule 24 (scoped_statement -> var_auto SEMI .)


state 197

    (25) scoped_statement -> expr SEMI .

    FINAL           reduce using rule 25 (scoped_statement -> expr SEMI .)
    FN              reduce using rule 25 (scoped_statement -> expr SEMI .)
    IF              reduce using rule 25 (scoped_statement -> expr SEMI .)
    WHILE           reduce using rule 25 (scoped_statement -> expr SEMI .)
    FOR             reduce using rule 25 (scoped_statement -> expr SEMI .)
    PRINT           reduce using rule 25 (scoped_statement -> expr SEMI .)
    RETURN          reduce using rule 25 (scoped_statement -> expr SEMI .)
    ID              reduce using rule 25 (scoped_statement -> expr SEMI .)
    STRING          reduce using rule 25 (scoped_statement -> expr SEMI .)
    NOT             reduce using rule 25 (scoped_statement -> expr SEMI .)
    NULL            reduce using rule 25 (scoped_statement -> expr SEMI .)
    PLUS            reduce using rule 25 (scoped_statement -> expr SEMI .)
    MINUS           reduce using rule 25 (scoped_statement -> expr SEMI .)
    INTEGER         reduce using rule 25 (scoped_statement -> expr SEMI .)
    FLOAT           reduce using rule 25 (scoped_statement -> expr SEMI .)
    LPAREN          reduce using rule 25 (scoped_statement -> expr SEMI .)
    BOOLEAN         reduce using rule 25 (scoped_statement -> expr SEMI .)
    RBRACE          reduce using rule 25 (scoped_statement -> expr SEMI .)


state 198

    (30) scoped_statement -> print_stmt SEMI .

    FINAL           reduce using rule 30 (scoped_statement -> print_stmt SEMI .)
    FN              reduce using rule 30 (scoped_statement -> print_stmt SEMI .)
    IF              reduce using rule 30 (scoped_statement -> print_stmt SEMI .)
    WHILE           reduce using rule 30 (scoped_statement -> print_stmt SEMI .)
    FOR             reduce using rule 30 (scoped_statement -> print_stmt SEMI .)
    PRINT           reduce using rule 30 (scoped_statement -> print_stmt SEMI .)
    RETURN          reduce using rule 30 (scoped_statement -> print_stmt SEMI .)
    ID              reduce using rule 30 (scoped_statement -> print_stmt SEMI .)
    STRING          reduce using rule 30 (scoped_statement -> print_stmt SEMI .)
    NOT             reduce using rule 30 (scoped_statement -> print_stmt SEMI .)
    NULL            reduce using rule 30 (scoped_statement -> print_stmt SEMI .)
    PLUS            reduce using rule 30 (scoped_statement -> print_stmt SEMI .)
    MINUS           reduce using rule 30 (scoped_statement -> print_stmt SEMI .)
    INTEGER         reduce using rule 30 (scoped_statement -> print_stmt SEMI .)
    FLOAT           reduce using rule 30 (scoped_statement -> print_stmt SEMI .)
    LPAREN          reduce using rule 30 (scoped_statement -> print_stmt SEMI .)
    BOOLEAN         reduce using rule 30 (scoped_statement -> print_stmt SEMI .)
    RBRACE          reduce using rule 30 (scoped_statement -> print_stmt SEMI .)


state 199

    (31) scoped_statement -> return SEMI .

    FINAL           reduce using rule 31 (scoped_statement -> return SEMI .)
    FN              reduce using rule 31 (scoped_statement -> return SEMI .)
    IF              reduce using rule 31 (scoped_statement -> return SEMI .)
    WHILE           reduce using rule 31 (scoped_statement -> return SEMI .)
    FOR             reduce using rule 31 (scoped_statement -> return SEMI .)
    PRINT           reduce using rule 31 (scoped_statement -> return SEMI .)
    RETURN          reduce using rule 31 (scoped_statement -> return SEMI .)
    ID              reduce using rule 31 (scoped_statement -> return SEMI .)
    STRING          reduce using rule 31 (scoped_statement -> return SEMI .)
    NOT             reduce using rule 31 (scoped_statement -> return SEMI .)
    NULL            reduce using rule 31 (scoped_statement -> return SEMI .)
    PLUS            reduce using rule 31 (scoped_statement -> return SEMI .)
    MINUS           reduce using rule 31 (scoped_statement -> return SEMI .)
    INTEGER         reduce using rule 31 (scoped_statement -> return SEMI .)
    FLOAT           reduce using rule 31 (scoped_statement -> return SEMI .)
    LPAREN          reduce using rule 31 (scoped_statement -> return SEMI .)
    BOOLEAN         reduce using rule 31 (scoped_statement -> return SEMI .)
    RBRACE          reduce using rule 31 (scoped_statement -> return SEMI .)


state 200

    (49) scoped_if_stmt -> IF LPAREN . boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr
    (59) var -> . ID
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var

    NOT             shift and go to state 36
    LPAREN          shift and go to state 97
    BOOLEAN         shift and go to state 41
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    boolean_expr                   shift and go to state 210
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42
    var                            shift and go to state 98
    expr                           shift and go to state 86
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35

state 201

    (54) scoped_while_stmt -> WHILE LPAREN . boolean_expr RPAREN LBRACE scoped_block RBRACE
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr
    (59) var -> . ID
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var

    NOT             shift and go to state 36
    LPAREN          shift and go to state 97
    BOOLEAN         shift and go to state 41
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    boolean_expr                   shift and go to state 211
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42
    var                            shift and go to state 98
    expr                           shift and go to state 86
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35

state 202

    (55) scoped_for_stmt -> FOR LPAREN . var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (60) var_assign -> . var ASSIGN expr
    (59) var -> . ID

    ID              shift and go to state 31

    var_assign                     shift and go to state 212
    var                            shift and go to state 138

state 203

    (33) return -> RETURN expr .
    (105) comparison -> expr . EQ expr
    (106) comparison -> expr . NE expr
    (107) comparison -> expr . LT expr
    (108) comparison -> expr . GT expr
    (109) comparison -> expr . LE expr
    (110) comparison -> expr . GE expr

    SEMI            reduce using rule 33 (return -> RETURN expr .)
    EQ              shift and go to state 50
    NE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    LE              shift and go to state 54
    GE              shift and go to state 55


state 204

    (44) if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .

    FINAL           reduce using rule 44 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    FN              reduce using rule 44 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    IF              reduce using rule 44 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    WHILE           reduce using rule 44 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    FOR             reduce using rule 44 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    PRINT           reduce using rule 44 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    ID              reduce using rule 44 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    STRING          reduce using rule 44 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    NOT             reduce using rule 44 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    NULL            reduce using rule 44 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    PLUS            reduce using rule 44 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    MINUS           reduce using rule 44 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    INTEGER         reduce using rule 44 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    FLOAT           reduce using rule 44 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    LPAREN          reduce using rule 44 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    BOOLEAN         reduce using rule 44 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    $end            reduce using rule 44 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    RBRACE          reduce using rule 44 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)


state 205

    (45) elif_stmt -> ELIF . LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt

    LPAREN          shift and go to state 213


state 206

    (46) elif_stmt -> else_stmt .

    FINAL           reduce using rule 46 (elif_stmt -> else_stmt .)
    FN              reduce using rule 46 (elif_stmt -> else_stmt .)
    IF              reduce using rule 46 (elif_stmt -> else_stmt .)
    WHILE           reduce using rule 46 (elif_stmt -> else_stmt .)
    FOR             reduce using rule 46 (elif_stmt -> else_stmt .)
    PRINT           reduce using rule 46 (elif_stmt -> else_stmt .)
    ID              reduce using rule 46 (elif_stmt -> else_stmt .)
    STRING          reduce using rule 46 (elif_stmt -> else_stmt .)
    NOT             reduce using rule 46 (elif_stmt -> else_stmt .)
    NULL            reduce using rule 46 (elif_stmt -> else_stmt .)
    PLUS            reduce using rule 46 (elif_stmt -> else_stmt .)
    MINUS           reduce using rule 46 (elif_stmt -> else_stmt .)
    INTEGER         reduce using rule 46 (elif_stmt -> else_stmt .)
    FLOAT           reduce using rule 46 (elif_stmt -> else_stmt .)
    LPAREN          reduce using rule 46 (elif_stmt -> else_stmt .)
    BOOLEAN         reduce using rule 46 (elif_stmt -> else_stmt .)
    $end            reduce using rule 46 (elif_stmt -> else_stmt .)
    RBRACE          reduce using rule 46 (elif_stmt -> else_stmt .)


state 207

    (47) elif_stmt -> empty .

    FINAL           reduce using rule 47 (elif_stmt -> empty .)
    FN              reduce using rule 47 (elif_stmt -> empty .)
    IF              reduce using rule 47 (elif_stmt -> empty .)
    WHILE           reduce using rule 47 (elif_stmt -> empty .)
    FOR             reduce using rule 47 (elif_stmt -> empty .)
    PRINT           reduce using rule 47 (elif_stmt -> empty .)
    ID              reduce using rule 47 (elif_stmt -> empty .)
    STRING          reduce using rule 47 (elif_stmt -> empty .)
    NOT             reduce using rule 47 (elif_stmt -> empty .)
    NULL            reduce using rule 47 (elif_stmt -> empty .)
    PLUS            reduce using rule 47 (elif_stmt -> empty .)
    MINUS           reduce using rule 47 (elif_stmt -> empty .)
    INTEGER         reduce using rule 47 (elif_stmt -> empty .)
    FLOAT           reduce using rule 47 (elif_stmt -> empty .)
    LPAREN          reduce using rule 47 (elif_stmt -> empty .)
    BOOLEAN         reduce using rule 47 (elif_stmt -> empty .)
    $end            reduce using rule 47 (elif_stmt -> empty .)
    RBRACE          reduce using rule 47 (elif_stmt -> empty .)


state 208

    (48) else_stmt -> ELSE . LBRACE block RBRACE

    LBRACE          shift and go to state 214


state 209

    (58) for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN . LBRACE block RBRACE

    LBRACE          shift and go to state 215


state 210

    (49) scoped_if_stmt -> IF LPAREN boolean_expr . RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (97) boolean_expr -> boolean_expr . AND boolean_expr
    (98) boolean_expr -> boolean_expr . OR boolean_expr
    (74) expr -> boolean_expr .
    (112) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    RPAREN          shift and go to state 216
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQ              reduce using rule 74 (expr -> boolean_expr .)
    NE              reduce using rule 74 (expr -> boolean_expr .)
    LT              reduce using rule 74 (expr -> boolean_expr .)
    GT              reduce using rule 74 (expr -> boolean_expr .)
    LE              reduce using rule 74 (expr -> boolean_expr .)
    GE              reduce using rule 74 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 80


state 211

    (54) scoped_while_stmt -> WHILE LPAREN boolean_expr . RPAREN LBRACE scoped_block RBRACE
    (97) boolean_expr -> boolean_expr . AND boolean_expr
    (98) boolean_expr -> boolean_expr . OR boolean_expr
    (74) expr -> boolean_expr .
    (112) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    RPAREN          shift and go to state 217
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQ              reduce using rule 74 (expr -> boolean_expr .)
    NE              reduce using rule 74 (expr -> boolean_expr .)
    LT              reduce using rule 74 (expr -> boolean_expr .)
    GT              reduce using rule 74 (expr -> boolean_expr .)
    LE              reduce using rule 74 (expr -> boolean_expr .)
    GE              reduce using rule 74 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 80


state 212

    (55) scoped_for_stmt -> FOR LPAREN var_assign . SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE

    SEMI            shift and go to state 218


state 213

    (45) elif_stmt -> ELIF LPAREN . boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr
    (59) var -> . ID
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var

    NOT             shift and go to state 36
    LPAREN          shift and go to state 97
    BOOLEAN         shift and go to state 41
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    boolean_expr                   shift and go to state 219
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42
    var                            shift and go to state 98
    expr                           shift and go to state 86
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35

state 214

    (48) else_stmt -> ELSE LBRACE . block RBRACE
    (2) block -> . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . concat_assign SEMI
    (9) statement -> . var_auto SEMI
    (10) statement -> . expr SEMI
    (11) statement -> . func_stmt
    (12) statement -> . if_stmt
    (13) statement -> . while_stmt
    (14) statement -> . for_stmt
    (15) statement -> . print_stmt SEMI
    (16) statement -> . empty
    (113) empty -> .
    (60) var_assign -> . var ASSIGN expr
    (61) final_assign -> . FINAL var ASSIGN expr
    (62) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (63) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (64) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (65) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (66) var_compound_assign -> . var POWER_ASSIGN num_expr
    (67) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (68) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (69) concat_assign -> . var CONCAT_ASSIGN string_expr
    (70) var_auto -> . var INCREMENT
    (71) var_auto -> . var DECREMENT
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (34) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (44) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (57) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (58) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (56) print_stmt -> . PRINT LPAREN expr RPAREN
    (59) var -> . ID
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 113 (empty -> .)
    FINAL           shift and go to state 18
    FN              shift and go to state 25
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    PRINT           shift and go to state 30
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

  ! FINAL           [ reduce using rule 113 (empty -> .) ]
  ! FN              [ reduce using rule 113 (empty -> .) ]
  ! IF              [ reduce using rule 113 (empty -> .) ]
  ! WHILE           [ reduce using rule 113 (empty -> .) ]
  ! FOR             [ reduce using rule 113 (empty -> .) ]
  ! PRINT           [ reduce using rule 113 (empty -> .) ]
  ! ID              [ reduce using rule 113 (empty -> .) ]
  ! STRING          [ reduce using rule 113 (empty -> .) ]
  ! NOT             [ reduce using rule 113 (empty -> .) ]
  ! NULL            [ reduce using rule 113 (empty -> .) ]
  ! PLUS            [ reduce using rule 113 (empty -> .) ]
  ! MINUS           [ reduce using rule 113 (empty -> .) ]
  ! INTEGER         [ reduce using rule 113 (empty -> .) ]
  ! FLOAT           [ reduce using rule 113 (empty -> .) ]
  ! LPAREN          [ reduce using rule 113 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 113 (empty -> .) ]

    block                          shift and go to state 220
    statement_list                 shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 5
    var_assign                     shift and go to state 6
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    concat_assign                  shift and go to state 9
    var_auto                       shift and go to state 10
    expr                           shift and go to state 11
    func_stmt                      shift and go to state 12
    if_stmt                        shift and go to state 13
    while_stmt                     shift and go to state 14
    for_stmt                       shift and go to state 15
    print_stmt                     shift and go to state 16
    var                            shift and go to state 17
    num_expr                       shift and go to state 19
    string_expr                    shift and go to state 20
    boolean_expr                   shift and go to state 21
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 215

    (58) for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE . block RBRACE
    (2) block -> . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . concat_assign SEMI
    (9) statement -> . var_auto SEMI
    (10) statement -> . expr SEMI
    (11) statement -> . func_stmt
    (12) statement -> . if_stmt
    (13) statement -> . while_stmt
    (14) statement -> . for_stmt
    (15) statement -> . print_stmt SEMI
    (16) statement -> . empty
    (113) empty -> .
    (60) var_assign -> . var ASSIGN expr
    (61) final_assign -> . FINAL var ASSIGN expr
    (62) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (63) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (64) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (65) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (66) var_compound_assign -> . var POWER_ASSIGN num_expr
    (67) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (68) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (69) concat_assign -> . var CONCAT_ASSIGN string_expr
    (70) var_auto -> . var INCREMENT
    (71) var_auto -> . var DECREMENT
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (34) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (44) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (57) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (58) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (56) print_stmt -> . PRINT LPAREN expr RPAREN
    (59) var -> . ID
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 113 (empty -> .)
    FINAL           shift and go to state 18
    FN              shift and go to state 25
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    PRINT           shift and go to state 30
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

  ! FINAL           [ reduce using rule 113 (empty -> .) ]
  ! FN              [ reduce using rule 113 (empty -> .) ]
  ! IF              [ reduce using rule 113 (empty -> .) ]
  ! WHILE           [ reduce using rule 113 (empty -> .) ]
  ! FOR             [ reduce using rule 113 (empty -> .) ]
  ! PRINT           [ reduce using rule 113 (empty -> .) ]
  ! ID              [ reduce using rule 113 (empty -> .) ]
  ! STRING          [ reduce using rule 113 (empty -> .) ]
  ! NOT             [ reduce using rule 113 (empty -> .) ]
  ! NULL            [ reduce using rule 113 (empty -> .) ]
  ! PLUS            [ reduce using rule 113 (empty -> .) ]
  ! MINUS           [ reduce using rule 113 (empty -> .) ]
  ! INTEGER         [ reduce using rule 113 (empty -> .) ]
  ! FLOAT           [ reduce using rule 113 (empty -> .) ]
  ! LPAREN          [ reduce using rule 113 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 113 (empty -> .) ]

    var_assign                     shift and go to state 6
    boolean_expr                   shift and go to state 21
    var_auto                       shift and go to state 10
    block                          shift and go to state 221
    statement_list                 shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 5
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    concat_assign                  shift and go to state 9
    expr                           shift and go to state 11
    func_stmt                      shift and go to state 12
    if_stmt                        shift and go to state 13
    while_stmt                     shift and go to state 14
    for_stmt                       shift and go to state 15
    print_stmt                     shift and go to state 16
    var                            shift and go to state 17
    num_expr                       shift and go to state 19
    string_expr                    shift and go to state 20
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 216

    (49) scoped_if_stmt -> IF LPAREN boolean_expr RPAREN . LBRACE scoped_block RBRACE scoped_elif_stmt

    LBRACE          shift and go to state 222


state 217

    (54) scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN . LBRACE scoped_block RBRACE

    LBRACE          shift and go to state 223


state 218

    (55) scoped_for_stmt -> FOR LPAREN var_assign SEMI . boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr
    (59) var -> . ID
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var

    NOT             shift and go to state 36
    LPAREN          shift and go to state 97
    BOOLEAN         shift and go to state 41
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    boolean_expr                   shift and go to state 224
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42
    var                            shift and go to state 98
    expr                           shift and go to state 86
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35

state 219

    (45) elif_stmt -> ELIF LPAREN boolean_expr . RPAREN LBRACE block RBRACE elif_stmt
    (97) boolean_expr -> boolean_expr . AND boolean_expr
    (98) boolean_expr -> boolean_expr . OR boolean_expr
    (74) expr -> boolean_expr .
    (112) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    RPAREN          shift and go to state 225
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQ              reduce using rule 74 (expr -> boolean_expr .)
    NE              reduce using rule 74 (expr -> boolean_expr .)
    LT              reduce using rule 74 (expr -> boolean_expr .)
    GT              reduce using rule 74 (expr -> boolean_expr .)
    LE              reduce using rule 74 (expr -> boolean_expr .)
    GE              reduce using rule 74 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 80


state 220

    (48) else_stmt -> ELSE LBRACE block . RBRACE

    RBRACE          shift and go to state 226


state 221

    (58) for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block . RBRACE

    RBRACE          shift and go to state 227


state 222

    (49) scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE . scoped_block RBRACE scoped_elif_stmt
    (17) scoped_block -> . scoped_statement_list
    (18) scoped_statement_list -> . scoped_statement scoped_statement_list
    (19) scoped_statement_list -> . empty
    (20) scoped_statement -> . var_assign SEMI
    (21) scoped_statement -> . final_assign SEMI
    (22) scoped_statement -> . var_compound_assign SEMI
    (23) scoped_statement -> . concat_assign SEMI
    (24) scoped_statement -> . var_auto SEMI
    (25) scoped_statement -> . expr SEMI
    (26) scoped_statement -> . func_stmt
    (27) scoped_statement -> . scoped_if_stmt
    (28) scoped_statement -> . scoped_while_stmt
    (29) scoped_statement -> . scoped_for_stmt
    (30) scoped_statement -> . print_stmt SEMI
    (31) scoped_statement -> . return SEMI
    (32) scoped_statement -> . empty
    (113) empty -> .
    (60) var_assign -> . var ASSIGN expr
    (61) final_assign -> . FINAL var ASSIGN expr
    (62) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (63) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (64) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (65) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (66) var_compound_assign -> . var POWER_ASSIGN num_expr
    (67) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (68) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (69) concat_assign -> . var CONCAT_ASSIGN string_expr
    (70) var_auto -> . var INCREMENT
    (71) var_auto -> . var DECREMENT
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (34) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (49) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (54) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (55) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (56) print_stmt -> . PRINT LPAREN expr RPAREN
    (33) return -> . RETURN expr
    (59) var -> . ID
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 113 (empty -> .)
    FINAL           shift and go to state 18
    FN              shift and go to state 25
    IF              shift and go to state 182
    WHILE           shift and go to state 183
    FOR             shift and go to state 184
    PRINT           shift and go to state 30
    RETURN          shift and go to state 185
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

  ! FINAL           [ reduce using rule 113 (empty -> .) ]
  ! FN              [ reduce using rule 113 (empty -> .) ]
  ! IF              [ reduce using rule 113 (empty -> .) ]
  ! WHILE           [ reduce using rule 113 (empty -> .) ]
  ! FOR             [ reduce using rule 113 (empty -> .) ]
  ! PRINT           [ reduce using rule 113 (empty -> .) ]
  ! RETURN          [ reduce using rule 113 (empty -> .) ]
  ! ID              [ reduce using rule 113 (empty -> .) ]
  ! STRING          [ reduce using rule 113 (empty -> .) ]
  ! NOT             [ reduce using rule 113 (empty -> .) ]
  ! NULL            [ reduce using rule 113 (empty -> .) ]
  ! PLUS            [ reduce using rule 113 (empty -> .) ]
  ! MINUS           [ reduce using rule 113 (empty -> .) ]
  ! INTEGER         [ reduce using rule 113 (empty -> .) ]
  ! FLOAT           [ reduce using rule 113 (empty -> .) ]
  ! LPAREN          [ reduce using rule 113 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 113 (empty -> .) ]

    boolean_expr                   shift and go to state 21
    scoped_block                   shift and go to state 228
    scoped_statement_list          shift and go to state 167
    scoped_statement               shift and go to state 168
    empty                          shift and go to state 169
    var_assign                     shift and go to state 170
    final_assign                   shift and go to state 171
    var_compound_assign            shift and go to state 172
    concat_assign                  shift and go to state 173
    var_auto                       shift and go to state 174
    expr                           shift and go to state 175
    func_stmt                      shift and go to state 176
    scoped_if_stmt                 shift and go to state 177
    scoped_while_stmt              shift and go to state 178
    scoped_for_stmt                shift and go to state 179
    print_stmt                     shift and go to state 180
    return                         shift and go to state 181
    var                            shift and go to state 17
    num_expr                       shift and go to state 19
    string_expr                    shift and go to state 20
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 223

    (54) scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE . scoped_block RBRACE
    (17) scoped_block -> . scoped_statement_list
    (18) scoped_statement_list -> . scoped_statement scoped_statement_list
    (19) scoped_statement_list -> . empty
    (20) scoped_statement -> . var_assign SEMI
    (21) scoped_statement -> . final_assign SEMI
    (22) scoped_statement -> . var_compound_assign SEMI
    (23) scoped_statement -> . concat_assign SEMI
    (24) scoped_statement -> . var_auto SEMI
    (25) scoped_statement -> . expr SEMI
    (26) scoped_statement -> . func_stmt
    (27) scoped_statement -> . scoped_if_stmt
    (28) scoped_statement -> . scoped_while_stmt
    (29) scoped_statement -> . scoped_for_stmt
    (30) scoped_statement -> . print_stmt SEMI
    (31) scoped_statement -> . return SEMI
    (32) scoped_statement -> . empty
    (113) empty -> .
    (60) var_assign -> . var ASSIGN expr
    (61) final_assign -> . FINAL var ASSIGN expr
    (62) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (63) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (64) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (65) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (66) var_compound_assign -> . var POWER_ASSIGN num_expr
    (67) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (68) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (69) concat_assign -> . var CONCAT_ASSIGN string_expr
    (70) var_auto -> . var INCREMENT
    (71) var_auto -> . var DECREMENT
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (34) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (49) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (54) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (55) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (56) print_stmt -> . PRINT LPAREN expr RPAREN
    (33) return -> . RETURN expr
    (59) var -> . ID
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 113 (empty -> .)
    FINAL           shift and go to state 18
    FN              shift and go to state 25
    IF              shift and go to state 182
    WHILE           shift and go to state 183
    FOR             shift and go to state 184
    PRINT           shift and go to state 30
    RETURN          shift and go to state 185
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

  ! FINAL           [ reduce using rule 113 (empty -> .) ]
  ! FN              [ reduce using rule 113 (empty -> .) ]
  ! IF              [ reduce using rule 113 (empty -> .) ]
  ! WHILE           [ reduce using rule 113 (empty -> .) ]
  ! FOR             [ reduce using rule 113 (empty -> .) ]
  ! PRINT           [ reduce using rule 113 (empty -> .) ]
  ! RETURN          [ reduce using rule 113 (empty -> .) ]
  ! ID              [ reduce using rule 113 (empty -> .) ]
  ! STRING          [ reduce using rule 113 (empty -> .) ]
  ! NOT             [ reduce using rule 113 (empty -> .) ]
  ! NULL            [ reduce using rule 113 (empty -> .) ]
  ! PLUS            [ reduce using rule 113 (empty -> .) ]
  ! MINUS           [ reduce using rule 113 (empty -> .) ]
  ! INTEGER         [ reduce using rule 113 (empty -> .) ]
  ! FLOAT           [ reduce using rule 113 (empty -> .) ]
  ! LPAREN          [ reduce using rule 113 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 113 (empty -> .) ]

    boolean_expr                   shift and go to state 21
    scoped_block                   shift and go to state 229
    scoped_statement_list          shift and go to state 167
    scoped_statement               shift and go to state 168
    empty                          shift and go to state 169
    var_assign                     shift and go to state 170
    final_assign                   shift and go to state 171
    var_compound_assign            shift and go to state 172
    concat_assign                  shift and go to state 173
    var_auto                       shift and go to state 174
    expr                           shift and go to state 175
    func_stmt                      shift and go to state 176
    scoped_if_stmt                 shift and go to state 177
    scoped_while_stmt              shift and go to state 178
    scoped_for_stmt                shift and go to state 179
    print_stmt                     shift and go to state 180
    return                         shift and go to state 181
    var                            shift and go to state 17
    num_expr                       shift and go to state 19
    string_expr                    shift and go to state 20
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 224

    (55) scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr . SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (97) boolean_expr -> boolean_expr . AND boolean_expr
    (98) boolean_expr -> boolean_expr . OR boolean_expr
    (74) expr -> boolean_expr .
    (112) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    SEMI            shift and go to state 230
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQ              reduce using rule 74 (expr -> boolean_expr .)
    NE              reduce using rule 74 (expr -> boolean_expr .)
    LT              reduce using rule 74 (expr -> boolean_expr .)
    GT              reduce using rule 74 (expr -> boolean_expr .)
    LE              reduce using rule 74 (expr -> boolean_expr .)
    GE              reduce using rule 74 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 80


state 225

    (45) elif_stmt -> ELIF LPAREN boolean_expr RPAREN . LBRACE block RBRACE elif_stmt

    LBRACE          shift and go to state 231


state 226

    (48) else_stmt -> ELSE LBRACE block RBRACE .

    FINAL           reduce using rule 48 (else_stmt -> ELSE LBRACE block RBRACE .)
    FN              reduce using rule 48 (else_stmt -> ELSE LBRACE block RBRACE .)
    IF              reduce using rule 48 (else_stmt -> ELSE LBRACE block RBRACE .)
    WHILE           reduce using rule 48 (else_stmt -> ELSE LBRACE block RBRACE .)
    FOR             reduce using rule 48 (else_stmt -> ELSE LBRACE block RBRACE .)
    PRINT           reduce using rule 48 (else_stmt -> ELSE LBRACE block RBRACE .)
    ID              reduce using rule 48 (else_stmt -> ELSE LBRACE block RBRACE .)
    STRING          reduce using rule 48 (else_stmt -> ELSE LBRACE block RBRACE .)
    NOT             reduce using rule 48 (else_stmt -> ELSE LBRACE block RBRACE .)
    NULL            reduce using rule 48 (else_stmt -> ELSE LBRACE block RBRACE .)
    PLUS            reduce using rule 48 (else_stmt -> ELSE LBRACE block RBRACE .)
    MINUS           reduce using rule 48 (else_stmt -> ELSE LBRACE block RBRACE .)
    INTEGER         reduce using rule 48 (else_stmt -> ELSE LBRACE block RBRACE .)
    FLOAT           reduce using rule 48 (else_stmt -> ELSE LBRACE block RBRACE .)
    LPAREN          reduce using rule 48 (else_stmt -> ELSE LBRACE block RBRACE .)
    BOOLEAN         reduce using rule 48 (else_stmt -> ELSE LBRACE block RBRACE .)
    $end            reduce using rule 48 (else_stmt -> ELSE LBRACE block RBRACE .)
    RBRACE          reduce using rule 48 (else_stmt -> ELSE LBRACE block RBRACE .)


state 227

    (58) for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .

    FINAL           reduce using rule 58 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    FN              reduce using rule 58 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    IF              reduce using rule 58 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    WHILE           reduce using rule 58 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    FOR             reduce using rule 58 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    PRINT           reduce using rule 58 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    ID              reduce using rule 58 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    STRING          reduce using rule 58 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    NOT             reduce using rule 58 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    NULL            reduce using rule 58 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    PLUS            reduce using rule 58 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    MINUS           reduce using rule 58 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    INTEGER         reduce using rule 58 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    FLOAT           reduce using rule 58 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    LPAREN          reduce using rule 58 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    BOOLEAN         reduce using rule 58 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    $end            reduce using rule 58 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    RBRACE          reduce using rule 58 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)


state 228

    (49) scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block . RBRACE scoped_elif_stmt

    RBRACE          shift and go to state 232


state 229

    (54) scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block . RBRACE

    RBRACE          shift and go to state 233


state 230

    (55) scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI . var_auto RPAREN LBRACE scoped_block RBRACE
    (70) var_auto -> . var INCREMENT
    (71) var_auto -> . var DECREMENT
    (59) var -> . ID

    ID              shift and go to state 31

    var_auto                       shift and go to state 234
    var                            shift and go to state 189

state 231

    (45) elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE . block RBRACE elif_stmt
    (2) block -> . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . concat_assign SEMI
    (9) statement -> . var_auto SEMI
    (10) statement -> . expr SEMI
    (11) statement -> . func_stmt
    (12) statement -> . if_stmt
    (13) statement -> . while_stmt
    (14) statement -> . for_stmt
    (15) statement -> . print_stmt SEMI
    (16) statement -> . empty
    (113) empty -> .
    (60) var_assign -> . var ASSIGN expr
    (61) final_assign -> . FINAL var ASSIGN expr
    (62) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (63) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (64) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (65) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (66) var_compound_assign -> . var POWER_ASSIGN num_expr
    (67) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (68) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (69) concat_assign -> . var CONCAT_ASSIGN string_expr
    (70) var_auto -> . var INCREMENT
    (71) var_auto -> . var DECREMENT
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (34) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (44) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (57) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (58) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (56) print_stmt -> . PRINT LPAREN expr RPAREN
    (59) var -> . ID
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 113 (empty -> .)
    FINAL           shift and go to state 18
    FN              shift and go to state 25
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    PRINT           shift and go to state 30
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

  ! FINAL           [ reduce using rule 113 (empty -> .) ]
  ! FN              [ reduce using rule 113 (empty -> .) ]
  ! IF              [ reduce using rule 113 (empty -> .) ]
  ! WHILE           [ reduce using rule 113 (empty -> .) ]
  ! FOR             [ reduce using rule 113 (empty -> .) ]
  ! PRINT           [ reduce using rule 113 (empty -> .) ]
  ! ID              [ reduce using rule 113 (empty -> .) ]
  ! STRING          [ reduce using rule 113 (empty -> .) ]
  ! NOT             [ reduce using rule 113 (empty -> .) ]
  ! NULL            [ reduce using rule 113 (empty -> .) ]
  ! PLUS            [ reduce using rule 113 (empty -> .) ]
  ! MINUS           [ reduce using rule 113 (empty -> .) ]
  ! INTEGER         [ reduce using rule 113 (empty -> .) ]
  ! FLOAT           [ reduce using rule 113 (empty -> .) ]
  ! LPAREN          [ reduce using rule 113 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 113 (empty -> .) ]

    boolean_expr                   shift and go to state 21
    block                          shift and go to state 235
    statement_list                 shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 5
    var_assign                     shift and go to state 6
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    concat_assign                  shift and go to state 9
    var_auto                       shift and go to state 10
    expr                           shift and go to state 11
    func_stmt                      shift and go to state 12
    if_stmt                        shift and go to state 13
    while_stmt                     shift and go to state 14
    for_stmt                       shift and go to state 15
    print_stmt                     shift and go to state 16
    var                            shift and go to state 17
    num_expr                       shift and go to state 19
    string_expr                    shift and go to state 20
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 232

    (49) scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE . scoped_elif_stmt
    (50) scoped_elif_stmt -> . ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (51) scoped_elif_stmt -> . scoped_else_stmt
    (52) scoped_elif_stmt -> . empty
    (53) scoped_else_stmt -> . ELSE LBRACE scoped_block RBRACE
    (113) empty -> .

    ELIF            shift and go to state 237
    ELSE            shift and go to state 240
    FINAL           reduce using rule 113 (empty -> .)
    FN              reduce using rule 113 (empty -> .)
    IF              reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    FOR             reduce using rule 113 (empty -> .)
    PRINT           reduce using rule 113 (empty -> .)
    RETURN          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    STRING          reduce using rule 113 (empty -> .)
    NOT             reduce using rule 113 (empty -> .)
    NULL            reduce using rule 113 (empty -> .)
    PLUS            reduce using rule 113 (empty -> .)
    MINUS           reduce using rule 113 (empty -> .)
    INTEGER         reduce using rule 113 (empty -> .)
    FLOAT           reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    BOOLEAN         reduce using rule 113 (empty -> .)
    RBRACE          reduce using rule 113 (empty -> .)

    scoped_elif_stmt               shift and go to state 236
    scoped_else_stmt               shift and go to state 238
    empty                          shift and go to state 239

state 233

    (54) scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .

    FINAL           reduce using rule 54 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    FN              reduce using rule 54 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    IF              reduce using rule 54 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    WHILE           reduce using rule 54 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    FOR             reduce using rule 54 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    PRINT           reduce using rule 54 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    RETURN          reduce using rule 54 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    ID              reduce using rule 54 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    STRING          reduce using rule 54 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    NOT             reduce using rule 54 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    NULL            reduce using rule 54 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    PLUS            reduce using rule 54 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    MINUS           reduce using rule 54 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    INTEGER         reduce using rule 54 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    FLOAT           reduce using rule 54 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    LPAREN          reduce using rule 54 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    BOOLEAN         reduce using rule 54 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    RBRACE          reduce using rule 54 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)


state 234

    (55) scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto . RPAREN LBRACE scoped_block RBRACE

    RPAREN          shift and go to state 241


state 235

    (45) elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block . RBRACE elif_stmt

    RBRACE          shift and go to state 242


state 236

    (49) scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .

    FINAL           reduce using rule 49 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    FN              reduce using rule 49 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    IF              reduce using rule 49 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    WHILE           reduce using rule 49 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    FOR             reduce using rule 49 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    PRINT           reduce using rule 49 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    RETURN          reduce using rule 49 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    ID              reduce using rule 49 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    STRING          reduce using rule 49 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    NOT             reduce using rule 49 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    NULL            reduce using rule 49 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    PLUS            reduce using rule 49 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    MINUS           reduce using rule 49 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    INTEGER         reduce using rule 49 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    FLOAT           reduce using rule 49 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    LPAREN          reduce using rule 49 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    BOOLEAN         reduce using rule 49 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    RBRACE          reduce using rule 49 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)


state 237

    (50) scoped_elif_stmt -> ELIF . LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt

    LPAREN          shift and go to state 243


state 238

    (51) scoped_elif_stmt -> scoped_else_stmt .

    FINAL           reduce using rule 51 (scoped_elif_stmt -> scoped_else_stmt .)
    FN              reduce using rule 51 (scoped_elif_stmt -> scoped_else_stmt .)
    IF              reduce using rule 51 (scoped_elif_stmt -> scoped_else_stmt .)
    WHILE           reduce using rule 51 (scoped_elif_stmt -> scoped_else_stmt .)
    FOR             reduce using rule 51 (scoped_elif_stmt -> scoped_else_stmt .)
    PRINT           reduce using rule 51 (scoped_elif_stmt -> scoped_else_stmt .)
    RETURN          reduce using rule 51 (scoped_elif_stmt -> scoped_else_stmt .)
    ID              reduce using rule 51 (scoped_elif_stmt -> scoped_else_stmt .)
    STRING          reduce using rule 51 (scoped_elif_stmt -> scoped_else_stmt .)
    NOT             reduce using rule 51 (scoped_elif_stmt -> scoped_else_stmt .)
    NULL            reduce using rule 51 (scoped_elif_stmt -> scoped_else_stmt .)
    PLUS            reduce using rule 51 (scoped_elif_stmt -> scoped_else_stmt .)
    MINUS           reduce using rule 51 (scoped_elif_stmt -> scoped_else_stmt .)
    INTEGER         reduce using rule 51 (scoped_elif_stmt -> scoped_else_stmt .)
    FLOAT           reduce using rule 51 (scoped_elif_stmt -> scoped_else_stmt .)
    LPAREN          reduce using rule 51 (scoped_elif_stmt -> scoped_else_stmt .)
    BOOLEAN         reduce using rule 51 (scoped_elif_stmt -> scoped_else_stmt .)
    RBRACE          reduce using rule 51 (scoped_elif_stmt -> scoped_else_stmt .)


state 239

    (52) scoped_elif_stmt -> empty .

    FINAL           reduce using rule 52 (scoped_elif_stmt -> empty .)
    FN              reduce using rule 52 (scoped_elif_stmt -> empty .)
    IF              reduce using rule 52 (scoped_elif_stmt -> empty .)
    WHILE           reduce using rule 52 (scoped_elif_stmt -> empty .)
    FOR             reduce using rule 52 (scoped_elif_stmt -> empty .)
    PRINT           reduce using rule 52 (scoped_elif_stmt -> empty .)
    RETURN          reduce using rule 52 (scoped_elif_stmt -> empty .)
    ID              reduce using rule 52 (scoped_elif_stmt -> empty .)
    STRING          reduce using rule 52 (scoped_elif_stmt -> empty .)
    NOT             reduce using rule 52 (scoped_elif_stmt -> empty .)
    NULL            reduce using rule 52 (scoped_elif_stmt -> empty .)
    PLUS            reduce using rule 52 (scoped_elif_stmt -> empty .)
    MINUS           reduce using rule 52 (scoped_elif_stmt -> empty .)
    INTEGER         reduce using rule 52 (scoped_elif_stmt -> empty .)
    FLOAT           reduce using rule 52 (scoped_elif_stmt -> empty .)
    LPAREN          reduce using rule 52 (scoped_elif_stmt -> empty .)
    BOOLEAN         reduce using rule 52 (scoped_elif_stmt -> empty .)
    RBRACE          reduce using rule 52 (scoped_elif_stmt -> empty .)


state 240

    (53) scoped_else_stmt -> ELSE . LBRACE scoped_block RBRACE

    LBRACE          shift and go to state 244


state 241

    (55) scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN . LBRACE scoped_block RBRACE

    LBRACE          shift and go to state 245


state 242

    (45) elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE . elif_stmt
    (45) elif_stmt -> . ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (46) elif_stmt -> . else_stmt
    (47) elif_stmt -> . empty
    (48) else_stmt -> . ELSE LBRACE block RBRACE
    (113) empty -> .

    ELIF            shift and go to state 205
    ELSE            shift and go to state 208
    FINAL           reduce using rule 113 (empty -> .)
    FN              reduce using rule 113 (empty -> .)
    IF              reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    FOR             reduce using rule 113 (empty -> .)
    PRINT           reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    STRING          reduce using rule 113 (empty -> .)
    NOT             reduce using rule 113 (empty -> .)
    NULL            reduce using rule 113 (empty -> .)
    PLUS            reduce using rule 113 (empty -> .)
    MINUS           reduce using rule 113 (empty -> .)
    INTEGER         reduce using rule 113 (empty -> .)
    FLOAT           reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    BOOLEAN         reduce using rule 113 (empty -> .)
    $end            reduce using rule 113 (empty -> .)
    RBRACE          reduce using rule 113 (empty -> .)

    elif_stmt                      shift and go to state 246
    else_stmt                      shift and go to state 206
    empty                          shift and go to state 207

state 243

    (50) scoped_elif_stmt -> ELIF LPAREN . boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr
    (59) var -> . ID
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var

    NOT             shift and go to state 36
    LPAREN          shift and go to state 97
    BOOLEAN         shift and go to state 41
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    boolean_expr                   shift and go to state 247
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42
    var                            shift and go to state 98
    expr                           shift and go to state 86
    string_expr                    shift and go to state 20
    num_expr                       shift and go to state 19
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35

state 244

    (53) scoped_else_stmt -> ELSE LBRACE . scoped_block RBRACE
    (17) scoped_block -> . scoped_statement_list
    (18) scoped_statement_list -> . scoped_statement scoped_statement_list
    (19) scoped_statement_list -> . empty
    (20) scoped_statement -> . var_assign SEMI
    (21) scoped_statement -> . final_assign SEMI
    (22) scoped_statement -> . var_compound_assign SEMI
    (23) scoped_statement -> . concat_assign SEMI
    (24) scoped_statement -> . var_auto SEMI
    (25) scoped_statement -> . expr SEMI
    (26) scoped_statement -> . func_stmt
    (27) scoped_statement -> . scoped_if_stmt
    (28) scoped_statement -> . scoped_while_stmt
    (29) scoped_statement -> . scoped_for_stmt
    (30) scoped_statement -> . print_stmt SEMI
    (31) scoped_statement -> . return SEMI
    (32) scoped_statement -> . empty
    (113) empty -> .
    (60) var_assign -> . var ASSIGN expr
    (61) final_assign -> . FINAL var ASSIGN expr
    (62) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (63) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (64) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (65) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (66) var_compound_assign -> . var POWER_ASSIGN num_expr
    (67) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (68) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (69) concat_assign -> . var CONCAT_ASSIGN string_expr
    (70) var_auto -> . var INCREMENT
    (71) var_auto -> . var DECREMENT
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (34) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (49) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (54) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (55) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (56) print_stmt -> . PRINT LPAREN expr RPAREN
    (33) return -> . RETURN expr
    (59) var -> . ID
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 113 (empty -> .)
    FINAL           shift and go to state 18
    FN              shift and go to state 25
    IF              shift and go to state 182
    WHILE           shift and go to state 183
    FOR             shift and go to state 184
    PRINT           shift and go to state 30
    RETURN          shift and go to state 185
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

  ! FINAL           [ reduce using rule 113 (empty -> .) ]
  ! FN              [ reduce using rule 113 (empty -> .) ]
  ! IF              [ reduce using rule 113 (empty -> .) ]
  ! WHILE           [ reduce using rule 113 (empty -> .) ]
  ! FOR             [ reduce using rule 113 (empty -> .) ]
  ! PRINT           [ reduce using rule 113 (empty -> .) ]
  ! RETURN          [ reduce using rule 113 (empty -> .) ]
  ! ID              [ reduce using rule 113 (empty -> .) ]
  ! STRING          [ reduce using rule 113 (empty -> .) ]
  ! NOT             [ reduce using rule 113 (empty -> .) ]
  ! NULL            [ reduce using rule 113 (empty -> .) ]
  ! PLUS            [ reduce using rule 113 (empty -> .) ]
  ! MINUS           [ reduce using rule 113 (empty -> .) ]
  ! INTEGER         [ reduce using rule 113 (empty -> .) ]
  ! FLOAT           [ reduce using rule 113 (empty -> .) ]
  ! LPAREN          [ reduce using rule 113 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 113 (empty -> .) ]

    scoped_block                   shift and go to state 248
    scoped_statement_list          shift and go to state 167
    scoped_statement               shift and go to state 168
    empty                          shift and go to state 169
    var_assign                     shift and go to state 170
    final_assign                   shift and go to state 171
    var_compound_assign            shift and go to state 172
    concat_assign                  shift and go to state 173
    var_auto                       shift and go to state 174
    expr                           shift and go to state 175
    func_stmt                      shift and go to state 176
    scoped_if_stmt                 shift and go to state 177
    scoped_while_stmt              shift and go to state 178
    scoped_for_stmt                shift and go to state 179
    print_stmt                     shift and go to state 180
    return                         shift and go to state 181
    var                            shift and go to state 17
    num_expr                       shift and go to state 19
    string_expr                    shift and go to state 20
    boolean_expr                   shift and go to state 21
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 245

    (55) scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE . scoped_block RBRACE
    (17) scoped_block -> . scoped_statement_list
    (18) scoped_statement_list -> . scoped_statement scoped_statement_list
    (19) scoped_statement_list -> . empty
    (20) scoped_statement -> . var_assign SEMI
    (21) scoped_statement -> . final_assign SEMI
    (22) scoped_statement -> . var_compound_assign SEMI
    (23) scoped_statement -> . concat_assign SEMI
    (24) scoped_statement -> . var_auto SEMI
    (25) scoped_statement -> . expr SEMI
    (26) scoped_statement -> . func_stmt
    (27) scoped_statement -> . scoped_if_stmt
    (28) scoped_statement -> . scoped_while_stmt
    (29) scoped_statement -> . scoped_for_stmt
    (30) scoped_statement -> . print_stmt SEMI
    (31) scoped_statement -> . return SEMI
    (32) scoped_statement -> . empty
    (113) empty -> .
    (60) var_assign -> . var ASSIGN expr
    (61) final_assign -> . FINAL var ASSIGN expr
    (62) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (63) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (64) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (65) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (66) var_compound_assign -> . var POWER_ASSIGN num_expr
    (67) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (68) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (69) concat_assign -> . var CONCAT_ASSIGN string_expr
    (70) var_auto -> . var INCREMENT
    (71) var_auto -> . var DECREMENT
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (34) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (49) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (54) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (55) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (56) print_stmt -> . PRINT LPAREN expr RPAREN
    (33) return -> . RETURN expr
    (59) var -> . ID
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 113 (empty -> .)
    FINAL           shift and go to state 18
    FN              shift and go to state 25
    IF              shift and go to state 182
    WHILE           shift and go to state 183
    FOR             shift and go to state 184
    PRINT           shift and go to state 30
    RETURN          shift and go to state 185
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

  ! FINAL           [ reduce using rule 113 (empty -> .) ]
  ! FN              [ reduce using rule 113 (empty -> .) ]
  ! IF              [ reduce using rule 113 (empty -> .) ]
  ! WHILE           [ reduce using rule 113 (empty -> .) ]
  ! FOR             [ reduce using rule 113 (empty -> .) ]
  ! PRINT           [ reduce using rule 113 (empty -> .) ]
  ! RETURN          [ reduce using rule 113 (empty -> .) ]
  ! ID              [ reduce using rule 113 (empty -> .) ]
  ! STRING          [ reduce using rule 113 (empty -> .) ]
  ! NOT             [ reduce using rule 113 (empty -> .) ]
  ! NULL            [ reduce using rule 113 (empty -> .) ]
  ! PLUS            [ reduce using rule 113 (empty -> .) ]
  ! MINUS           [ reduce using rule 113 (empty -> .) ]
  ! INTEGER         [ reduce using rule 113 (empty -> .) ]
  ! FLOAT           [ reduce using rule 113 (empty -> .) ]
  ! LPAREN          [ reduce using rule 113 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 113 (empty -> .) ]

    var_assign                     shift and go to state 170
    boolean_expr                   shift and go to state 21
    var_auto                       shift and go to state 174
    scoped_block                   shift and go to state 249
    scoped_statement_list          shift and go to state 167
    scoped_statement               shift and go to state 168
    empty                          shift and go to state 169
    final_assign                   shift and go to state 171
    var_compound_assign            shift and go to state 172
    concat_assign                  shift and go to state 173
    expr                           shift and go to state 175
    func_stmt                      shift and go to state 176
    scoped_if_stmt                 shift and go to state 177
    scoped_while_stmt              shift and go to state 178
    scoped_for_stmt                shift and go to state 179
    print_stmt                     shift and go to state 180
    return                         shift and go to state 181
    var                            shift and go to state 17
    num_expr                       shift and go to state 19
    string_expr                    shift and go to state 20
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 246

    (45) elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .

    FINAL           reduce using rule 45 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    FN              reduce using rule 45 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    IF              reduce using rule 45 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    WHILE           reduce using rule 45 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    FOR             reduce using rule 45 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    PRINT           reduce using rule 45 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    ID              reduce using rule 45 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    STRING          reduce using rule 45 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    NOT             reduce using rule 45 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    NULL            reduce using rule 45 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    PLUS            reduce using rule 45 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    MINUS           reduce using rule 45 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    INTEGER         reduce using rule 45 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    FLOAT           reduce using rule 45 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    LPAREN          reduce using rule 45 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    BOOLEAN         reduce using rule 45 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    $end            reduce using rule 45 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    RBRACE          reduce using rule 45 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)


state 247

    (50) scoped_elif_stmt -> ELIF LPAREN boolean_expr . RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (97) boolean_expr -> boolean_expr . AND boolean_expr
    (98) boolean_expr -> boolean_expr . OR boolean_expr
    (74) expr -> boolean_expr .
    (112) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    RPAREN          shift and go to state 250
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQ              reduce using rule 74 (expr -> boolean_expr .)
    NE              reduce using rule 74 (expr -> boolean_expr .)
    LT              reduce using rule 74 (expr -> boolean_expr .)
    GT              reduce using rule 74 (expr -> boolean_expr .)
    LE              reduce using rule 74 (expr -> boolean_expr .)
    GE              reduce using rule 74 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 80


state 248

    (53) scoped_else_stmt -> ELSE LBRACE scoped_block . RBRACE

    RBRACE          shift and go to state 251


state 249

    (55) scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block . RBRACE

    RBRACE          shift and go to state 252


state 250

    (50) scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN . LBRACE scoped_block RBRACE scoped_elif_stmt

    LBRACE          shift and go to state 253


state 251

    (53) scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .

    FINAL           reduce using rule 53 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    FN              reduce using rule 53 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    IF              reduce using rule 53 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    WHILE           reduce using rule 53 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    FOR             reduce using rule 53 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    PRINT           reduce using rule 53 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    RETURN          reduce using rule 53 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    ID              reduce using rule 53 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    STRING          reduce using rule 53 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    NOT             reduce using rule 53 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    NULL            reduce using rule 53 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    PLUS            reduce using rule 53 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    MINUS           reduce using rule 53 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    INTEGER         reduce using rule 53 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    FLOAT           reduce using rule 53 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    LPAREN          reduce using rule 53 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    BOOLEAN         reduce using rule 53 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    RBRACE          reduce using rule 53 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)


state 252

    (55) scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .

    FINAL           reduce using rule 55 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    FN              reduce using rule 55 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    IF              reduce using rule 55 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    WHILE           reduce using rule 55 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    FOR             reduce using rule 55 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    PRINT           reduce using rule 55 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    RETURN          reduce using rule 55 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    ID              reduce using rule 55 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    STRING          reduce using rule 55 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    NOT             reduce using rule 55 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    NULL            reduce using rule 55 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    PLUS            reduce using rule 55 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    MINUS           reduce using rule 55 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    INTEGER         reduce using rule 55 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    FLOAT           reduce using rule 55 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    LPAREN          reduce using rule 55 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    BOOLEAN         reduce using rule 55 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    RBRACE          reduce using rule 55 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)


state 253

    (50) scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE . scoped_block RBRACE scoped_elif_stmt
    (17) scoped_block -> . scoped_statement_list
    (18) scoped_statement_list -> . scoped_statement scoped_statement_list
    (19) scoped_statement_list -> . empty
    (20) scoped_statement -> . var_assign SEMI
    (21) scoped_statement -> . final_assign SEMI
    (22) scoped_statement -> . var_compound_assign SEMI
    (23) scoped_statement -> . concat_assign SEMI
    (24) scoped_statement -> . var_auto SEMI
    (25) scoped_statement -> . expr SEMI
    (26) scoped_statement -> . func_stmt
    (27) scoped_statement -> . scoped_if_stmt
    (28) scoped_statement -> . scoped_while_stmt
    (29) scoped_statement -> . scoped_for_stmt
    (30) scoped_statement -> . print_stmt SEMI
    (31) scoped_statement -> . return SEMI
    (32) scoped_statement -> . empty
    (113) empty -> .
    (60) var_assign -> . var ASSIGN expr
    (61) final_assign -> . FINAL var ASSIGN expr
    (62) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (63) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (64) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (65) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (66) var_compound_assign -> . var POWER_ASSIGN num_expr
    (67) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (68) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (69) concat_assign -> . var CONCAT_ASSIGN string_expr
    (70) var_auto -> . var INCREMENT
    (71) var_auto -> . var DECREMENT
    (72) expr -> . string_expr
    (73) expr -> . num_expr
    (74) expr -> . boolean_expr
    (75) expr -> . null_expr
    (76) expr -> . ternary_expr
    (77) expr -> . var
    (78) expr -> . func_call
    (34) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (49) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (54) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (55) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (56) print_stmt -> . PRINT LPAREN expr RPAREN
    (33) return -> . RETURN expr
    (59) var -> . ID
    (94) string_expr -> . string_expr CONCAT string_expr
    (95) string_expr -> . STRING
    (96) string_expr -> . var
    (86) num_expr -> . num_expr PLUS num_expr
    (87) num_expr -> . num_expr MINUS num_expr
    (88) num_expr -> . num_expr TIMES num_expr
    (89) num_expr -> . num_expr DIVIDE num_expr
    (90) num_expr -> . num_expr INT_DIVIDE num_expr
    (91) num_expr -> . num_expr POWER num_expr
    (92) num_expr -> . num_expr MODULO num_expr
    (93) num_expr -> . num_factor
    (97) boolean_expr -> . boolean_expr AND boolean_expr
    (98) boolean_expr -> . boolean_expr OR boolean_expr
    (99) boolean_expr -> . NOT boolean_expr
    (100) boolean_expr -> . boolean_factor
    (111) null_expr -> . NULL
    (112) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (35) func_call -> . var LPAREN arguments_list RPAREN
    (79) num_factor -> . PLUS num_factor
    (80) num_factor -> . MINUS num_factor
    (81) num_factor -> . INTEGER
    (82) num_factor -> . FLOAT
    (83) num_factor -> . LPAREN num_expr RPAREN
    (84) num_factor -> . func_call
    (85) num_factor -> . var
    (101) boolean_factor -> . LPAREN boolean_expr RPAREN
    (102) boolean_factor -> . BOOLEAN
    (103) boolean_factor -> . comparison
    (104) boolean_factor -> . var
    (105) comparison -> . expr EQ expr
    (106) comparison -> . expr NE expr
    (107) comparison -> . expr LT expr
    (108) comparison -> . expr GT expr
    (109) comparison -> . expr LE expr
    (110) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 113 (empty -> .)
    FINAL           shift and go to state 18
    FN              shift and go to state 25
    IF              shift and go to state 182
    WHILE           shift and go to state 183
    FOR             shift and go to state 184
    PRINT           shift and go to state 30
    RETURN          shift and go to state 185
    ID              shift and go to state 31
    STRING          shift and go to state 32
    NOT             shift and go to state 36
    NULL            shift and go to state 38
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    LPAREN          shift and go to state 26
    BOOLEAN         shift and go to state 41

  ! FINAL           [ reduce using rule 113 (empty -> .) ]
  ! FN              [ reduce using rule 113 (empty -> .) ]
  ! IF              [ reduce using rule 113 (empty -> .) ]
  ! WHILE           [ reduce using rule 113 (empty -> .) ]
  ! FOR             [ reduce using rule 113 (empty -> .) ]
  ! PRINT           [ reduce using rule 113 (empty -> .) ]
  ! RETURN          [ reduce using rule 113 (empty -> .) ]
  ! ID              [ reduce using rule 113 (empty -> .) ]
  ! STRING          [ reduce using rule 113 (empty -> .) ]
  ! NOT             [ reduce using rule 113 (empty -> .) ]
  ! NULL            [ reduce using rule 113 (empty -> .) ]
  ! PLUS            [ reduce using rule 113 (empty -> .) ]
  ! MINUS           [ reduce using rule 113 (empty -> .) ]
  ! INTEGER         [ reduce using rule 113 (empty -> .) ]
  ! FLOAT           [ reduce using rule 113 (empty -> .) ]
  ! LPAREN          [ reduce using rule 113 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 113 (empty -> .) ]

    boolean_expr                   shift and go to state 21
    scoped_block                   shift and go to state 254
    scoped_statement_list          shift and go to state 167
    scoped_statement               shift and go to state 168
    empty                          shift and go to state 169
    var_assign                     shift and go to state 170
    final_assign                   shift and go to state 171
    var_compound_assign            shift and go to state 172
    concat_assign                  shift and go to state 173
    var_auto                       shift and go to state 174
    expr                           shift and go to state 175
    func_stmt                      shift and go to state 176
    scoped_if_stmt                 shift and go to state 177
    scoped_while_stmt              shift and go to state 178
    scoped_for_stmt                shift and go to state 179
    print_stmt                     shift and go to state 180
    return                         shift and go to state 181
    var                            shift and go to state 17
    num_expr                       shift and go to state 19
    string_expr                    shift and go to state 20
    null_expr                      shift and go to state 22
    ternary_expr                   shift and go to state 23
    func_call                      shift and go to state 24
    num_factor                     shift and go to state 35
    boolean_factor                 shift and go to state 37
    comparison                     shift and go to state 42

state 254

    (50) scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block . RBRACE scoped_elif_stmt

    RBRACE          shift and go to state 255


state 255

    (50) scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE . scoped_elif_stmt
    (50) scoped_elif_stmt -> . ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (51) scoped_elif_stmt -> . scoped_else_stmt
    (52) scoped_elif_stmt -> . empty
    (53) scoped_else_stmt -> . ELSE LBRACE scoped_block RBRACE
    (113) empty -> .

    ELIF            shift and go to state 237
    ELSE            shift and go to state 240
    FINAL           reduce using rule 113 (empty -> .)
    FN              reduce using rule 113 (empty -> .)
    IF              reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    FOR             reduce using rule 113 (empty -> .)
    PRINT           reduce using rule 113 (empty -> .)
    RETURN          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    STRING          reduce using rule 113 (empty -> .)
    NOT             reduce using rule 113 (empty -> .)
    NULL            reduce using rule 113 (empty -> .)
    PLUS            reduce using rule 113 (empty -> .)
    MINUS           reduce using rule 113 (empty -> .)
    INTEGER         reduce using rule 113 (empty -> .)
    FLOAT           reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    BOOLEAN         reduce using rule 113 (empty -> .)
    RBRACE          reduce using rule 113 (empty -> .)

    scoped_elif_stmt               shift and go to state 256
    scoped_else_stmt               shift and go to state 238
    empty                          shift and go to state 239

state 256

    (50) scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .

    FINAL           reduce using rule 50 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    FN              reduce using rule 50 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    IF              reduce using rule 50 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    WHILE           reduce using rule 50 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    FOR             reduce using rule 50 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    PRINT           reduce using rule 50 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    RETURN          reduce using rule 50 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    ID              reduce using rule 50 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    STRING          reduce using rule 50 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    NOT             reduce using rule 50 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    NULL            reduce using rule 50 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    PLUS            reduce using rule 50 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    MINUS           reduce using rule 50 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    INTEGER         reduce using rule 50 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    FLOAT           reduce using rule 50 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    LPAREN          reduce using rule 50 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    BOOLEAN         reduce using rule 50 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    RBRACE          reduce using rule 50 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FINAL in state 0 resolved as shift
WARNING: shift/reduce conflict for FN in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for NOT in state 0 resolved as shift
WARNING: shift/reduce conflict for NULL in state 0 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 0 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 0 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 0 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 4 resolved as shift
WARNING: shift/reduce conflict for FN in state 4 resolved as shift
WARNING: shift/reduce conflict for IF in state 4 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 4 resolved as shift
WARNING: shift/reduce conflict for FOR in state 4 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 4 resolved as shift
WARNING: shift/reduce conflict for ID in state 4 resolved as shift
WARNING: shift/reduce conflict for STRING in state 4 resolved as shift
WARNING: shift/reduce conflict for NOT in state 4 resolved as shift
WARNING: shift/reduce conflict for NULL in state 4 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 4 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 4 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 4 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 4 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 4 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 4 resolved as shift
WARNING: shift/reduce conflict for AND in state 21 resolved as shift
WARNING: shift/reduce conflict for OR in state 21 resolved as shift
WARNING: shift/reduce conflict for TERNARY_Q in state 21 resolved as shift
WARNING: shift/reduce conflict for AND in state 96 resolved as shift
WARNING: shift/reduce conflict for OR in state 96 resolved as shift
WARNING: shift/reduce conflict for TERNARY_Q in state 96 resolved as shift
WARNING: shift/reduce conflict for EQ in state 99 resolved as shift
WARNING: shift/reduce conflict for NE in state 99 resolved as shift
WARNING: shift/reduce conflict for LT in state 99 resolved as shift
WARNING: shift/reduce conflict for GT in state 99 resolved as shift
WARNING: shift/reduce conflict for LE in state 99 resolved as shift
WARNING: shift/reduce conflict for GE in state 99 resolved as shift
WARNING: shift/reduce conflict for EQ in state 101 resolved as shift
WARNING: shift/reduce conflict for NE in state 101 resolved as shift
WARNING: shift/reduce conflict for LT in state 101 resolved as shift
WARNING: shift/reduce conflict for GT in state 101 resolved as shift
WARNING: shift/reduce conflict for LE in state 101 resolved as shift
WARNING: shift/reduce conflict for GE in state 101 resolved as shift
WARNING: shift/reduce conflict for EQ in state 102 resolved as shift
WARNING: shift/reduce conflict for NE in state 102 resolved as shift
WARNING: shift/reduce conflict for LT in state 102 resolved as shift
WARNING: shift/reduce conflict for GT in state 102 resolved as shift
WARNING: shift/reduce conflict for LE in state 102 resolved as shift
WARNING: shift/reduce conflict for GE in state 102 resolved as shift
WARNING: shift/reduce conflict for EQ in state 103 resolved as shift
WARNING: shift/reduce conflict for NE in state 103 resolved as shift
WARNING: shift/reduce conflict for LT in state 103 resolved as shift
WARNING: shift/reduce conflict for GT in state 103 resolved as shift
WARNING: shift/reduce conflict for LE in state 103 resolved as shift
WARNING: shift/reduce conflict for GE in state 103 resolved as shift
WARNING: shift/reduce conflict for EQ in state 104 resolved as shift
WARNING: shift/reduce conflict for NE in state 104 resolved as shift
WARNING: shift/reduce conflict for LT in state 104 resolved as shift
WARNING: shift/reduce conflict for GT in state 104 resolved as shift
WARNING: shift/reduce conflict for LE in state 104 resolved as shift
WARNING: shift/reduce conflict for GE in state 104 resolved as shift
WARNING: shift/reduce conflict for EQ in state 105 resolved as shift
WARNING: shift/reduce conflict for NE in state 105 resolved as shift
WARNING: shift/reduce conflict for LT in state 105 resolved as shift
WARNING: shift/reduce conflict for GT in state 105 resolved as shift
WARNING: shift/reduce conflict for LE in state 105 resolved as shift
WARNING: shift/reduce conflict for GE in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 127 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 127 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 127 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 127 resolved as shift
WARNING: shift/reduce conflict for INT_DIVIDE in state 127 resolved as shift
WARNING: shift/reduce conflict for POWER in state 127 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 127 resolved as shift
WARNING: shift/reduce conflict for CONCAT in state 128 resolved as shift
WARNING: shift/reduce conflict for AND in state 129 resolved as shift
WARNING: shift/reduce conflict for OR in state 129 resolved as shift
WARNING: shift/reduce conflict for TERNARY_Q in state 129 resolved as shift
WARNING: shift/reduce conflict for AND in state 130 resolved as shift
WARNING: shift/reduce conflict for OR in state 130 resolved as shift
WARNING: shift/reduce conflict for TERNARY_Q in state 130 resolved as shift
WARNING: shift/reduce conflict for EQ in state 155 resolved as shift
WARNING: shift/reduce conflict for NE in state 155 resolved as shift
WARNING: shift/reduce conflict for LT in state 155 resolved as shift
WARNING: shift/reduce conflict for GT in state 155 resolved as shift
WARNING: shift/reduce conflict for LE in state 155 resolved as shift
WARNING: shift/reduce conflict for GE in state 155 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 158 resolved as shift
WARNING: shift/reduce conflict for FN in state 158 resolved as shift
WARNING: shift/reduce conflict for IF in state 158 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 158 resolved as shift
WARNING: shift/reduce conflict for FOR in state 158 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 158 resolved as shift
WARNING: shift/reduce conflict for ID in state 158 resolved as shift
WARNING: shift/reduce conflict for STRING in state 158 resolved as shift
WARNING: shift/reduce conflict for NOT in state 158 resolved as shift
WARNING: shift/reduce conflict for NULL in state 158 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 158 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 158 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 158 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 158 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 158 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 158 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 159 resolved as shift
WARNING: shift/reduce conflict for FN in state 159 resolved as shift
WARNING: shift/reduce conflict for IF in state 159 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 159 resolved as shift
WARNING: shift/reduce conflict for FOR in state 159 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 159 resolved as shift
WARNING: shift/reduce conflict for ID in state 159 resolved as shift
WARNING: shift/reduce conflict for STRING in state 159 resolved as shift
WARNING: shift/reduce conflict for NOT in state 159 resolved as shift
WARNING: shift/reduce conflict for NULL in state 159 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 159 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 159 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 159 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 159 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 159 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 159 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 162 resolved as shift
WARNING: shift/reduce conflict for FN in state 162 resolved as shift
WARNING: shift/reduce conflict for IF in state 162 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 162 resolved as shift
WARNING: shift/reduce conflict for FOR in state 162 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 162 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 162 resolved as shift
WARNING: shift/reduce conflict for ID in state 162 resolved as shift
WARNING: shift/reduce conflict for STRING in state 162 resolved as shift
WARNING: shift/reduce conflict for NOT in state 162 resolved as shift
WARNING: shift/reduce conflict for NULL in state 162 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 162 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 162 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 162 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 162 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 162 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 162 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 168 resolved as shift
WARNING: shift/reduce conflict for FN in state 168 resolved as shift
WARNING: shift/reduce conflict for IF in state 168 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 168 resolved as shift
WARNING: shift/reduce conflict for FOR in state 168 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 168 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 168 resolved as shift
WARNING: shift/reduce conflict for ID in state 168 resolved as shift
WARNING: shift/reduce conflict for STRING in state 168 resolved as shift
WARNING: shift/reduce conflict for NOT in state 168 resolved as shift
WARNING: shift/reduce conflict for NULL in state 168 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 168 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 168 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 168 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 168 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 168 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 168 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 214 resolved as shift
WARNING: shift/reduce conflict for FN in state 214 resolved as shift
WARNING: shift/reduce conflict for IF in state 214 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 214 resolved as shift
WARNING: shift/reduce conflict for FOR in state 214 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 214 resolved as shift
WARNING: shift/reduce conflict for ID in state 214 resolved as shift
WARNING: shift/reduce conflict for STRING in state 214 resolved as shift
WARNING: shift/reduce conflict for NOT in state 214 resolved as shift
WARNING: shift/reduce conflict for NULL in state 214 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 214 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 214 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 214 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 214 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 214 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 214 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 215 resolved as shift
WARNING: shift/reduce conflict for FN in state 215 resolved as shift
WARNING: shift/reduce conflict for IF in state 215 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 215 resolved as shift
WARNING: shift/reduce conflict for FOR in state 215 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 215 resolved as shift
WARNING: shift/reduce conflict for ID in state 215 resolved as shift
WARNING: shift/reduce conflict for STRING in state 215 resolved as shift
WARNING: shift/reduce conflict for NOT in state 215 resolved as shift
WARNING: shift/reduce conflict for NULL in state 215 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 215 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 215 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 215 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 215 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 215 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 215 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 222 resolved as shift
WARNING: shift/reduce conflict for FN in state 222 resolved as shift
WARNING: shift/reduce conflict for IF in state 222 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 222 resolved as shift
WARNING: shift/reduce conflict for FOR in state 222 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 222 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 222 resolved as shift
WARNING: shift/reduce conflict for ID in state 222 resolved as shift
WARNING: shift/reduce conflict for STRING in state 222 resolved as shift
WARNING: shift/reduce conflict for NOT in state 222 resolved as shift
WARNING: shift/reduce conflict for NULL in state 222 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 222 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 222 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 222 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 222 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 222 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 222 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 223 resolved as shift
WARNING: shift/reduce conflict for FN in state 223 resolved as shift
WARNING: shift/reduce conflict for IF in state 223 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 223 resolved as shift
WARNING: shift/reduce conflict for FOR in state 223 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 223 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 223 resolved as shift
WARNING: shift/reduce conflict for ID in state 223 resolved as shift
WARNING: shift/reduce conflict for STRING in state 223 resolved as shift
WARNING: shift/reduce conflict for NOT in state 223 resolved as shift
WARNING: shift/reduce conflict for NULL in state 223 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 223 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 223 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 223 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 223 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 223 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 223 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 231 resolved as shift
WARNING: shift/reduce conflict for FN in state 231 resolved as shift
WARNING: shift/reduce conflict for IF in state 231 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 231 resolved as shift
WARNING: shift/reduce conflict for FOR in state 231 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 231 resolved as shift
WARNING: shift/reduce conflict for ID in state 231 resolved as shift
WARNING: shift/reduce conflict for STRING in state 231 resolved as shift
WARNING: shift/reduce conflict for NOT in state 231 resolved as shift
WARNING: shift/reduce conflict for NULL in state 231 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 231 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 231 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 231 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 231 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 231 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 231 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 244 resolved as shift
WARNING: shift/reduce conflict for FN in state 244 resolved as shift
WARNING: shift/reduce conflict for IF in state 244 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 244 resolved as shift
WARNING: shift/reduce conflict for FOR in state 244 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 244 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 244 resolved as shift
WARNING: shift/reduce conflict for ID in state 244 resolved as shift
WARNING: shift/reduce conflict for STRING in state 244 resolved as shift
WARNING: shift/reduce conflict for NOT in state 244 resolved as shift
WARNING: shift/reduce conflict for NULL in state 244 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 244 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 244 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 244 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 244 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 244 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 244 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 245 resolved as shift
WARNING: shift/reduce conflict for FN in state 245 resolved as shift
WARNING: shift/reduce conflict for IF in state 245 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 245 resolved as shift
WARNING: shift/reduce conflict for FOR in state 245 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 245 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 245 resolved as shift
WARNING: shift/reduce conflict for ID in state 245 resolved as shift
WARNING: shift/reduce conflict for STRING in state 245 resolved as shift
WARNING: shift/reduce conflict for NOT in state 245 resolved as shift
WARNING: shift/reduce conflict for NULL in state 245 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 245 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 245 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 245 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 245 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 245 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 245 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 253 resolved as shift
WARNING: shift/reduce conflict for FN in state 253 resolved as shift
WARNING: shift/reduce conflict for IF in state 253 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 253 resolved as shift
WARNING: shift/reduce conflict for FOR in state 253 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 253 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 253 resolved as shift
WARNING: shift/reduce conflict for ID in state 253 resolved as shift
WARNING: shift/reduce conflict for STRING in state 253 resolved as shift
WARNING: shift/reduce conflict for NOT in state 253 resolved as shift
WARNING: shift/reduce conflict for NULL in state 253 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 253 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 253 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 253 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 253 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 253 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 253 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (statement_list -> empty)
WARNING: rejected rule (statement -> empty) in state 5
WARNING: reduce/reduce conflict in state 17 resolved using rule (expr -> var)
WARNING: rejected rule (string_expr -> var) in state 17
WARNING: reduce/reduce conflict in state 17 resolved using rule (expr -> var)
WARNING: rejected rule (num_factor -> var) in state 17
WARNING: reduce/reduce conflict in state 17 resolved using rule (expr -> var)
WARNING: rejected rule (boolean_factor -> var) in state 17
WARNING: reduce/reduce conflict in state 24 resolved using rule (expr -> func_call)
WARNING: rejected rule (num_factor -> func_call) in state 24
WARNING: reduce/reduce conflict in state 84 resolved using rule (expr -> func_call)
WARNING: rejected rule (num_factor -> func_call) in state 84
WARNING: reduce/reduce conflict in state 85 resolved using rule (num_factor -> var)
WARNING: rejected rule (boolean_factor -> var) in state 85
WARNING: reduce/reduce conflict in state 85 resolved using rule (expr -> var)
WARNING: rejected rule (num_factor -> var) in state 85
WARNING: reduce/reduce conflict in state 85 resolved using rule (expr -> var)
WARNING: rejected rule (string_expr -> var) in state 85
WARNING: reduce/reduce conflict in state 96 resolved using rule (expr -> boolean_expr)
WARNING: rejected rule (boolean_expr -> NOT boolean_expr) in state 96
WARNING: reduce/reduce conflict in state 98 resolved using rule (expr -> var)
WARNING: rejected rule (boolean_factor -> var) in state 98
WARNING: reduce/reduce conflict in state 98 resolved using rule (expr -> var)
WARNING: rejected rule (string_expr -> var) in state 98
WARNING: reduce/reduce conflict in state 98 resolved using rule (expr -> var)
WARNING: rejected rule (num_factor -> var) in state 98
WARNING: reduce/reduce conflict in state 100 resolved using rule (expr -> var)
WARNING: rejected rule (string_expr -> var) in state 100
WARNING: reduce/reduce conflict in state 100 resolved using rule (expr -> var)
WARNING: rejected rule (num_factor -> var) in state 100
WARNING: reduce/reduce conflict in state 100 resolved using rule (expr -> var)
WARNING: rejected rule (boolean_factor -> var) in state 100
WARNING: reduce/reduce conflict in state 129 resolved using rule (expr -> boolean_expr)
WARNING: rejected rule (boolean_expr -> boolean_expr AND boolean_expr) in state 129
WARNING: reduce/reduce conflict in state 130 resolved using rule (expr -> boolean_expr)
WARNING: rejected rule (boolean_expr -> boolean_expr OR boolean_expr) in state 130
WARNING: reduce/reduce conflict in state 141 resolved using rule (num_factor -> var)
WARNING: rejected rule (boolean_factor -> var) in state 141
WARNING: reduce/reduce conflict in state 141 resolved using rule (expr -> var)
WARNING: rejected rule (num_factor -> var) in state 141
WARNING: reduce/reduce conflict in state 141 resolved using rule (expr -> var)
WARNING: rejected rule (string_expr -> var) in state 141
WARNING: reduce/reduce conflict in state 169 resolved using rule (scoped_statement_list -> empty)
WARNING: rejected rule (scoped_statement -> empty) in state 169
