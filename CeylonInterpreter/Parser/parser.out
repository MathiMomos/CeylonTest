Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CASE
    CLASS
    CONCAT_ASSIGN
    DOT
    FALSE
    FSTRING
    IN
    LBRACKET
    RBRACKET
    SWITCH
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> block
Rule 2     block -> statement_list
Rule 3     statement_list -> statement statement_list
Rule 4     statement_list -> empty
Rule 5     statement -> var_assign SEMI
Rule 6     statement -> final_assign SEMI
Rule 7     statement -> var_compound_assign SEMI
Rule 8     statement -> var_auto SEMI
Rule 9     statement -> expr SEMI
Rule 10    statement -> func_stmt
Rule 11    statement -> if_stmt
Rule 12    statement -> while_stmt
Rule 13    statement -> for_stmt
Rule 14    statement -> print_stmt SEMI
Rule 15    statement -> empty
Rule 16    scoped_block -> scoped_statement_list
Rule 17    scoped_statement_list -> scoped_statement scoped_statement_list
Rule 18    scoped_statement_list -> empty
Rule 19    scoped_statement -> var_assign SEMI
Rule 20    scoped_statement -> final_assign SEMI
Rule 21    scoped_statement -> var_compound_assign SEMI
Rule 22    scoped_statement -> var_auto SEMI
Rule 23    scoped_statement -> expr SEMI
Rule 24    scoped_statement -> func_stmt
Rule 25    scoped_statement -> scoped_if_stmt
Rule 26    scoped_statement -> scoped_while_stmt
Rule 27    scoped_statement -> scoped_for_stmt
Rule 28    scoped_statement -> print_stmt SEMI
Rule 29    scoped_statement -> return SEMI
Rule 30    scoped_statement -> empty
Rule 31    return -> RETURN expr
Rule 32    func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
Rule 33    func_call -> var LPAREN arguments_list RPAREN
Rule 34    arguments_list -> non_empty_arguments_list
Rule 35    arguments_list -> empty
Rule 36    non_empty_arguments_list -> expr COMMA non_empty_arguments_list
Rule 37    non_empty_arguments_list -> expr
Rule 38    parameters_list -> non_empty_parameters_list
Rule 39    parameters_list -> empty
Rule 40    non_empty_parameters_list -> var COMMA non_empty_parameters_list
Rule 41    non_empty_parameters_list -> var
Rule 42    if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
Rule 43    elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
Rule 44    elif_stmt -> else_stmt
Rule 45    elif_stmt -> empty
Rule 46    else_stmt -> ELSE LBRACE block RBRACE
Rule 47    scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
Rule 48    scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
Rule 49    scoped_elif_stmt -> scoped_else_stmt
Rule 50    scoped_elif_stmt -> empty
Rule 51    scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE
Rule 52    scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
Rule 53    scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
Rule 54    print_stmt -> PRINT LPAREN expr RPAREN
Rule 55    while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
Rule 56    for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
Rule 57    var -> ID
Rule 58    var_assign -> var ASSIGN expr
Rule 59    final_assign -> FINAL var ASSIGN expr
Rule 60    var_compound_assign -> var PLUS_ASSIGN num_expr
Rule 61    var_compound_assign -> var MINUS_ASSIGN num_expr
Rule 62    var_compound_assign -> var TIMES_ASSIGN num_expr
Rule 63    var_compound_assign -> var DIVIDE_ASSIGN num_expr
Rule 64    var_compound_assign -> var POWER_ASSIGN num_expr
Rule 65    var_compound_assign -> var MODULO_ASSIGN num_expr
Rule 66    var_compound_assign -> var INT_DIVIDE_ASSIGN num_expr
Rule 67    var_auto -> var INCREMENT
Rule 68    var_auto -> var DECREMENT
Rule 69    expr -> string_expr
Rule 70    expr -> num_expr
Rule 71    expr -> boolean_expr
Rule 72    expr -> null_expr
Rule 73    expr -> ternary_expr
Rule 74    expr -> var
Rule 75    expr -> func_call
Rule 76    num_factor -> PLUS num_factor
Rule 77    num_factor -> MINUS num_factor
Rule 78    num_factor -> INTEGER
Rule 79    num_factor -> FLOAT
Rule 80    num_factor -> LPAREN num_expr RPAREN
Rule 81    num_factor -> func_call
Rule 82    num_factor -> var
Rule 83    num_expr -> num_expr PLUS num_expr
Rule 84    num_expr -> num_expr MINUS num_expr
Rule 85    num_expr -> num_expr TIMES num_expr
Rule 86    num_expr -> num_expr DIVIDE num_expr
Rule 87    num_expr -> num_expr INT_DIVIDE num_expr
Rule 88    num_expr -> num_expr POWER num_expr
Rule 89    num_expr -> num_expr MODULO num_expr
Rule 90    num_expr -> num_factor
Rule 91    string_expr -> string_expr CONCAT string_expr
Rule 92    string_expr -> STRING
Rule 93    string_expr -> var
Rule 94    boolean_expr -> boolean_expr AND boolean_expr
Rule 95    boolean_expr -> boolean_expr OR boolean_expr
Rule 96    boolean_expr -> NOT boolean_expr
Rule 97    boolean_expr -> boolean_factor
Rule 98    boolean_factor -> LPAREN boolean_expr RPAREN
Rule 99    boolean_factor -> BOOLEAN
Rule 100   boolean_factor -> comparison
Rule 101   boolean_factor -> var
Rule 102   comparison -> expr EQ expr
Rule 103   comparison -> expr NE expr
Rule 104   comparison -> expr LT expr
Rule 105   comparison -> expr GT expr
Rule 106   comparison -> expr LE expr
Rule 107   comparison -> expr GE expr
Rule 108   null_expr -> NULL
Rule 109   ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr
Rule 110   empty -> <empty>

Terminals, with rules where they appear

AND                  : 94
ASSIGN               : 58 59
BOOLEAN              : 99
CASE                 : 
CLASS                : 
COMMA                : 36 40
CONCAT               : 91
CONCAT_ASSIGN        : 
DECREMENT            : 68
DIVIDE               : 86
DIVIDE_ASSIGN        : 63
DOT                  : 
ELIF                 : 43 48
ELSE                 : 46 51
EQ                   : 102
FALSE                : 
FINAL                : 59
FLOAT                : 79
FN                   : 32
FOR                  : 53 56
FSTRING              : 
GE                   : 107
GT                   : 105
ID                   : 57
IF                   : 42 47
IN                   : 
INCREMENT            : 67
INTEGER              : 78
INT_DIVIDE           : 87
INT_DIVIDE_ASSIGN    : 66
LBRACE               : 32 42 43 46 47 48 51 52 53 55 56
LBRACKET             : 
LE                   : 106
LPAREN               : 32 33 42 43 47 48 52 53 54 55 56 80 98
LT                   : 104
MINUS                : 77 84
MINUS_ASSIGN         : 61
MODULO               : 89
MODULO_ASSIGN        : 65
NE                   : 103
NOT                  : 96
NULL                 : 108
OR                   : 95
PLUS                 : 76 83
PLUS_ASSIGN          : 60
POWER                : 88
POWER_ASSIGN         : 64
PRINT                : 54
RBRACE               : 32 42 43 46 47 48 51 52 53 55 56
RBRACKET             : 
RETURN               : 31
RPAREN               : 32 33 42 43 47 48 52 53 54 55 56 80 98
SEMI                 : 5 6 7 8 9 14 19 20 21 22 23 28 29 53 53 56 56
STRING               : 92
SWITCH               : 
TERNARY_C            : 109
TERNARY_Q            : 109
TIMES                : 85
TIMES_ASSIGN         : 62
TRUE                 : 
WHILE                : 52 55
error                : 

Nonterminals, with rules where they appear

arguments_list       : 33
block                : 1 42 43 46 55 56
boolean_expr         : 42 43 47 48 52 53 55 56 71 94 94 95 95 96 98 109
boolean_factor       : 97
comparison           : 100
elif_stmt            : 42 43
else_stmt            : 44
empty                : 4 15 18 30 35 39 45 50
expr                 : 9 23 31 36 37 54 58 59 102 102 103 103 104 104 105 105 106 106 107 107 109 109
final_assign         : 6 20
for_stmt             : 13
func_call            : 75 81
func_stmt            : 10 24
if_stmt              : 11
non_empty_arguments_list : 34 36
non_empty_parameters_list : 38 40
null_expr            : 72
num_expr             : 60 61 62 63 64 65 66 70 80 83 83 84 84 85 85 86 86 87 87 88 88 89 89
num_factor           : 76 77 90
parameters_list      : 32
print_stmt           : 14 28
program              : 0
return               : 29
scoped_block         : 32 47 48 51 52 53
scoped_elif_stmt     : 47 48
scoped_else_stmt     : 49
scoped_for_stmt      : 27
scoped_if_stmt       : 25
scoped_statement     : 17
scoped_statement_list : 16 17
scoped_while_stmt    : 26
statement            : 3
statement_list       : 2 3
string_expr          : 69 91 91
ternary_expr         : 73
var                  : 32 33 40 41 58 59 60 61 62 63 64 65 66 67 68 74 82 93 101
var_assign           : 5 19 53 56
var_auto             : 8 22 53 56
var_compound_assign  : 7 21
while_stmt           : 12

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . block
    (2) block -> . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . var_auto SEMI
    (9) statement -> . expr SEMI
    (10) statement -> . func_stmt
    (11) statement -> . if_stmt
    (12) statement -> . while_stmt
    (13) statement -> . for_stmt
    (14) statement -> . print_stmt SEMI
    (15) statement -> . empty
    (110) empty -> .
    (58) var_assign -> . var ASSIGN expr
    (59) final_assign -> . FINAL var ASSIGN expr
    (60) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (61) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (62) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (63) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (64) var_compound_assign -> . var POWER_ASSIGN num_expr
    (65) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (66) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (67) var_auto -> . var INCREMENT
    (68) var_auto -> . var DECREMENT
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (32) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (42) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (55) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (56) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (54) print_stmt -> . PRINT LPAREN expr RPAREN
    (57) var -> . ID
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    $end            reduce using rule 110 (empty -> .)
    FINAL           shift and go to state 17
    FN              shift and go to state 24
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    PRINT           shift and go to state 29
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

  ! FINAL           [ reduce using rule 110 (empty -> .) ]
  ! FN              [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! PRINT           [ reduce using rule 110 (empty -> .) ]
  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! NOT             [ reduce using rule 110 (empty -> .) ]
  ! NULL            [ reduce using rule 110 (empty -> .) ]
  ! PLUS            [ reduce using rule 110 (empty -> .) ]
  ! MINUS           [ reduce using rule 110 (empty -> .) ]
  ! INTEGER         [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LPAREN          [ reduce using rule 110 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 110 (empty -> .) ]

    program                        shift and go to state 1
    block                          shift and go to state 2
    statement_list                 shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 5
    var_assign                     shift and go to state 6
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    var_auto                       shift and go to state 9
    expr                           shift and go to state 10
    func_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    while_stmt                     shift and go to state 13
    for_stmt                       shift and go to state 14
    print_stmt                     shift and go to state 15
    var                            shift and go to state 16
    num_expr                       shift and go to state 18
    string_expr                    shift and go to state 19
    boolean_expr                   shift and go to state 20
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 1

    (0) S' -> program .



state 2

    (1) program -> block .

    $end            reduce using rule 1 (program -> block .)


state 3

    (2) block -> statement_list .

    $end            reduce using rule 2 (block -> statement_list .)
    RBRACE          reduce using rule 2 (block -> statement_list .)


state 4

    (3) statement_list -> statement . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . var_auto SEMI
    (9) statement -> . expr SEMI
    (10) statement -> . func_stmt
    (11) statement -> . if_stmt
    (12) statement -> . while_stmt
    (13) statement -> . for_stmt
    (14) statement -> . print_stmt SEMI
    (15) statement -> . empty
    (110) empty -> .
    (58) var_assign -> . var ASSIGN expr
    (59) final_assign -> . FINAL var ASSIGN expr
    (60) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (61) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (62) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (63) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (64) var_compound_assign -> . var POWER_ASSIGN num_expr
    (65) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (66) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (67) var_auto -> . var INCREMENT
    (68) var_auto -> . var DECREMENT
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (32) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (42) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (55) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (56) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (54) print_stmt -> . PRINT LPAREN expr RPAREN
    (57) var -> . ID
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    $end            reduce using rule 110 (empty -> .)
    RBRACE          reduce using rule 110 (empty -> .)
    FINAL           shift and go to state 17
    FN              shift and go to state 24
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    PRINT           shift and go to state 29
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

  ! FINAL           [ reduce using rule 110 (empty -> .) ]
  ! FN              [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! PRINT           [ reduce using rule 110 (empty -> .) ]
  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! NOT             [ reduce using rule 110 (empty -> .) ]
  ! NULL            [ reduce using rule 110 (empty -> .) ]
  ! PLUS            [ reduce using rule 110 (empty -> .) ]
  ! MINUS           [ reduce using rule 110 (empty -> .) ]
  ! INTEGER         [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LPAREN          [ reduce using rule 110 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 110 (empty -> .) ]

    statement                      shift and go to state 4
    statement_list                 shift and go to state 42
    empty                          shift and go to state 5
    var_assign                     shift and go to state 6
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    var_auto                       shift and go to state 9
    expr                           shift and go to state 10
    func_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    while_stmt                     shift and go to state 13
    for_stmt                       shift and go to state 14
    print_stmt                     shift and go to state 15
    var                            shift and go to state 16
    num_expr                       shift and go to state 18
    string_expr                    shift and go to state 19
    boolean_expr                   shift and go to state 20
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 5

    (4) statement_list -> empty .
    (15) statement -> empty .

  ! reduce/reduce conflict for $end resolved using rule 4 (statement_list -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 4 (statement_list -> empty .)
    $end            reduce using rule 4 (statement_list -> empty .)
    RBRACE          reduce using rule 4 (statement_list -> empty .)
    FINAL           reduce using rule 15 (statement -> empty .)
    FN              reduce using rule 15 (statement -> empty .)
    IF              reduce using rule 15 (statement -> empty .)
    WHILE           reduce using rule 15 (statement -> empty .)
    FOR             reduce using rule 15 (statement -> empty .)
    PRINT           reduce using rule 15 (statement -> empty .)
    ID              reduce using rule 15 (statement -> empty .)
    STRING          reduce using rule 15 (statement -> empty .)
    NOT             reduce using rule 15 (statement -> empty .)
    NULL            reduce using rule 15 (statement -> empty .)
    PLUS            reduce using rule 15 (statement -> empty .)
    MINUS           reduce using rule 15 (statement -> empty .)
    INTEGER         reduce using rule 15 (statement -> empty .)
    FLOAT           reduce using rule 15 (statement -> empty .)
    LPAREN          reduce using rule 15 (statement -> empty .)
    BOOLEAN         reduce using rule 15 (statement -> empty .)

  ! $end            [ reduce using rule 15 (statement -> empty .) ]
  ! RBRACE          [ reduce using rule 15 (statement -> empty .) ]


state 6

    (5) statement -> var_assign . SEMI

    SEMI            shift and go to state 43


state 7

    (6) statement -> final_assign . SEMI

    SEMI            shift and go to state 44


state 8

    (7) statement -> var_compound_assign . SEMI

    SEMI            shift and go to state 45


state 9

    (8) statement -> var_auto . SEMI

    SEMI            shift and go to state 46


state 10

    (9) statement -> expr . SEMI
    (102) comparison -> expr . EQ expr
    (103) comparison -> expr . NE expr
    (104) comparison -> expr . LT expr
    (105) comparison -> expr . GT expr
    (106) comparison -> expr . LE expr
    (107) comparison -> expr . GE expr

    SEMI            shift and go to state 47
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LT              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53


state 11

    (10) statement -> func_stmt .

    FINAL           reduce using rule 10 (statement -> func_stmt .)
    FN              reduce using rule 10 (statement -> func_stmt .)
    IF              reduce using rule 10 (statement -> func_stmt .)
    WHILE           reduce using rule 10 (statement -> func_stmt .)
    FOR             reduce using rule 10 (statement -> func_stmt .)
    PRINT           reduce using rule 10 (statement -> func_stmt .)
    ID              reduce using rule 10 (statement -> func_stmt .)
    STRING          reduce using rule 10 (statement -> func_stmt .)
    NOT             reduce using rule 10 (statement -> func_stmt .)
    NULL            reduce using rule 10 (statement -> func_stmt .)
    PLUS            reduce using rule 10 (statement -> func_stmt .)
    MINUS           reduce using rule 10 (statement -> func_stmt .)
    INTEGER         reduce using rule 10 (statement -> func_stmt .)
    FLOAT           reduce using rule 10 (statement -> func_stmt .)
    LPAREN          reduce using rule 10 (statement -> func_stmt .)
    BOOLEAN         reduce using rule 10 (statement -> func_stmt .)
    $end            reduce using rule 10 (statement -> func_stmt .)
    RBRACE          reduce using rule 10 (statement -> func_stmt .)


state 12

    (11) statement -> if_stmt .

    FINAL           reduce using rule 11 (statement -> if_stmt .)
    FN              reduce using rule 11 (statement -> if_stmt .)
    IF              reduce using rule 11 (statement -> if_stmt .)
    WHILE           reduce using rule 11 (statement -> if_stmt .)
    FOR             reduce using rule 11 (statement -> if_stmt .)
    PRINT           reduce using rule 11 (statement -> if_stmt .)
    ID              reduce using rule 11 (statement -> if_stmt .)
    STRING          reduce using rule 11 (statement -> if_stmt .)
    NOT             reduce using rule 11 (statement -> if_stmt .)
    NULL            reduce using rule 11 (statement -> if_stmt .)
    PLUS            reduce using rule 11 (statement -> if_stmt .)
    MINUS           reduce using rule 11 (statement -> if_stmt .)
    INTEGER         reduce using rule 11 (statement -> if_stmt .)
    FLOAT           reduce using rule 11 (statement -> if_stmt .)
    LPAREN          reduce using rule 11 (statement -> if_stmt .)
    BOOLEAN         reduce using rule 11 (statement -> if_stmt .)
    $end            reduce using rule 11 (statement -> if_stmt .)
    RBRACE          reduce using rule 11 (statement -> if_stmt .)


state 13

    (12) statement -> while_stmt .

    FINAL           reduce using rule 12 (statement -> while_stmt .)
    FN              reduce using rule 12 (statement -> while_stmt .)
    IF              reduce using rule 12 (statement -> while_stmt .)
    WHILE           reduce using rule 12 (statement -> while_stmt .)
    FOR             reduce using rule 12 (statement -> while_stmt .)
    PRINT           reduce using rule 12 (statement -> while_stmt .)
    ID              reduce using rule 12 (statement -> while_stmt .)
    STRING          reduce using rule 12 (statement -> while_stmt .)
    NOT             reduce using rule 12 (statement -> while_stmt .)
    NULL            reduce using rule 12 (statement -> while_stmt .)
    PLUS            reduce using rule 12 (statement -> while_stmt .)
    MINUS           reduce using rule 12 (statement -> while_stmt .)
    INTEGER         reduce using rule 12 (statement -> while_stmt .)
    FLOAT           reduce using rule 12 (statement -> while_stmt .)
    LPAREN          reduce using rule 12 (statement -> while_stmt .)
    BOOLEAN         reduce using rule 12 (statement -> while_stmt .)
    $end            reduce using rule 12 (statement -> while_stmt .)
    RBRACE          reduce using rule 12 (statement -> while_stmt .)


state 14

    (13) statement -> for_stmt .

    FINAL           reduce using rule 13 (statement -> for_stmt .)
    FN              reduce using rule 13 (statement -> for_stmt .)
    IF              reduce using rule 13 (statement -> for_stmt .)
    WHILE           reduce using rule 13 (statement -> for_stmt .)
    FOR             reduce using rule 13 (statement -> for_stmt .)
    PRINT           reduce using rule 13 (statement -> for_stmt .)
    ID              reduce using rule 13 (statement -> for_stmt .)
    STRING          reduce using rule 13 (statement -> for_stmt .)
    NOT             reduce using rule 13 (statement -> for_stmt .)
    NULL            reduce using rule 13 (statement -> for_stmt .)
    PLUS            reduce using rule 13 (statement -> for_stmt .)
    MINUS           reduce using rule 13 (statement -> for_stmt .)
    INTEGER         reduce using rule 13 (statement -> for_stmt .)
    FLOAT           reduce using rule 13 (statement -> for_stmt .)
    LPAREN          reduce using rule 13 (statement -> for_stmt .)
    BOOLEAN         reduce using rule 13 (statement -> for_stmt .)
    $end            reduce using rule 13 (statement -> for_stmt .)
    RBRACE          reduce using rule 13 (statement -> for_stmt .)


state 15

    (14) statement -> print_stmt . SEMI

    SEMI            shift and go to state 54


state 16

    (58) var_assign -> var . ASSIGN expr
    (60) var_compound_assign -> var . PLUS_ASSIGN num_expr
    (61) var_compound_assign -> var . MINUS_ASSIGN num_expr
    (62) var_compound_assign -> var . TIMES_ASSIGN num_expr
    (63) var_compound_assign -> var . DIVIDE_ASSIGN num_expr
    (64) var_compound_assign -> var . POWER_ASSIGN num_expr
    (65) var_compound_assign -> var . MODULO_ASSIGN num_expr
    (66) var_compound_assign -> var . INT_DIVIDE_ASSIGN num_expr
    (67) var_auto -> var . INCREMENT
    (68) var_auto -> var . DECREMENT
    (74) expr -> var .
    (93) string_expr -> var .
    (33) func_call -> var . LPAREN arguments_list RPAREN
    (82) num_factor -> var .
    (101) boolean_factor -> var .

  ! reduce/reduce conflict for SEMI resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for SEMI resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for SEMI resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 74 (expr -> var .)
    ASSIGN          shift and go to state 55
    PLUS_ASSIGN     shift and go to state 56
    MINUS_ASSIGN    shift and go to state 57
    TIMES_ASSIGN    shift and go to state 58
    DIVIDE_ASSIGN   shift and go to state 59
    POWER_ASSIGN    shift and go to state 60
    MODULO_ASSIGN   shift and go to state 61
    INT_DIVIDE_ASSIGN shift and go to state 62
    INCREMENT       shift and go to state 63
    DECREMENT       shift and go to state 64
    SEMI            reduce using rule 74 (expr -> var .)
    EQ              reduce using rule 74 (expr -> var .)
    NE              reduce using rule 74 (expr -> var .)
    LT              reduce using rule 74 (expr -> var .)
    GT              reduce using rule 74 (expr -> var .)
    LE              reduce using rule 74 (expr -> var .)
    GE              reduce using rule 74 (expr -> var .)
    CONCAT          reduce using rule 93 (string_expr -> var .)
    LPAREN          shift and go to state 65
    PLUS            reduce using rule 82 (num_factor -> var .)
    MINUS           reduce using rule 82 (num_factor -> var .)
    TIMES           reduce using rule 82 (num_factor -> var .)
    DIVIDE          reduce using rule 82 (num_factor -> var .)
    INT_DIVIDE      reduce using rule 82 (num_factor -> var .)
    POWER           reduce using rule 82 (num_factor -> var .)
    MODULO          reduce using rule 82 (num_factor -> var .)
    AND             reduce using rule 101 (boolean_factor -> var .)
    OR              reduce using rule 101 (boolean_factor -> var .)
    TERNARY_Q       reduce using rule 101 (boolean_factor -> var .)

  ! SEMI            [ reduce using rule 93 (string_expr -> var .) ]
  ! EQ              [ reduce using rule 93 (string_expr -> var .) ]
  ! NE              [ reduce using rule 93 (string_expr -> var .) ]
  ! LT              [ reduce using rule 93 (string_expr -> var .) ]
  ! GT              [ reduce using rule 93 (string_expr -> var .) ]
  ! LE              [ reduce using rule 93 (string_expr -> var .) ]
  ! GE              [ reduce using rule 93 (string_expr -> var .) ]
  ! SEMI            [ reduce using rule 82 (num_factor -> var .) ]
  ! EQ              [ reduce using rule 82 (num_factor -> var .) ]
  ! NE              [ reduce using rule 82 (num_factor -> var .) ]
  ! LT              [ reduce using rule 82 (num_factor -> var .) ]
  ! GT              [ reduce using rule 82 (num_factor -> var .) ]
  ! LE              [ reduce using rule 82 (num_factor -> var .) ]
  ! GE              [ reduce using rule 82 (num_factor -> var .) ]
  ! SEMI            [ reduce using rule 101 (boolean_factor -> var .) ]
  ! EQ              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! NE              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! LT              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! GT              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! LE              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! GE              [ reduce using rule 101 (boolean_factor -> var .) ]


state 17

    (59) final_assign -> FINAL . var ASSIGN expr
    (57) var -> . ID

    ID              shift and go to state 30

    var                            shift and go to state 66

state 18

    (70) expr -> num_expr .
    (83) num_expr -> num_expr . PLUS num_expr
    (84) num_expr -> num_expr . MINUS num_expr
    (85) num_expr -> num_expr . TIMES num_expr
    (86) num_expr -> num_expr . DIVIDE num_expr
    (87) num_expr -> num_expr . INT_DIVIDE num_expr
    (88) num_expr -> num_expr . POWER num_expr
    (89) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 70 (expr -> num_expr .)
    EQ              reduce using rule 70 (expr -> num_expr .)
    NE              reduce using rule 70 (expr -> num_expr .)
    LT              reduce using rule 70 (expr -> num_expr .)
    GT              reduce using rule 70 (expr -> num_expr .)
    LE              reduce using rule 70 (expr -> num_expr .)
    GE              reduce using rule 70 (expr -> num_expr .)
    AND             reduce using rule 70 (expr -> num_expr .)
    OR              reduce using rule 70 (expr -> num_expr .)
    TERNARY_Q       reduce using rule 70 (expr -> num_expr .)
    RPAREN          reduce using rule 70 (expr -> num_expr .)
    COMMA           reduce using rule 70 (expr -> num_expr .)
    TERNARY_C       reduce using rule 70 (expr -> num_expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    INT_DIVIDE      shift and go to state 71
    POWER           shift and go to state 72
    MODULO          shift and go to state 73


state 19

    (69) expr -> string_expr .
    (91) string_expr -> string_expr . CONCAT string_expr

    SEMI            reduce using rule 69 (expr -> string_expr .)
    EQ              reduce using rule 69 (expr -> string_expr .)
    NE              reduce using rule 69 (expr -> string_expr .)
    LT              reduce using rule 69 (expr -> string_expr .)
    GT              reduce using rule 69 (expr -> string_expr .)
    LE              reduce using rule 69 (expr -> string_expr .)
    GE              reduce using rule 69 (expr -> string_expr .)
    AND             reduce using rule 69 (expr -> string_expr .)
    OR              reduce using rule 69 (expr -> string_expr .)
    TERNARY_Q       reduce using rule 69 (expr -> string_expr .)
    RPAREN          reduce using rule 69 (expr -> string_expr .)
    COMMA           reduce using rule 69 (expr -> string_expr .)
    TERNARY_C       reduce using rule 69 (expr -> string_expr .)
    CONCAT          shift and go to state 74


state 20

    (71) expr -> boolean_expr .
    (94) boolean_expr -> boolean_expr . AND boolean_expr
    (95) boolean_expr -> boolean_expr . OR boolean_expr
    (109) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for TERNARY_Q resolved as shift
    SEMI            reduce using rule 71 (expr -> boolean_expr .)
    EQ              reduce using rule 71 (expr -> boolean_expr .)
    NE              reduce using rule 71 (expr -> boolean_expr .)
    LT              reduce using rule 71 (expr -> boolean_expr .)
    GT              reduce using rule 71 (expr -> boolean_expr .)
    LE              reduce using rule 71 (expr -> boolean_expr .)
    GE              reduce using rule 71 (expr -> boolean_expr .)
    RPAREN          reduce using rule 71 (expr -> boolean_expr .)
    COMMA           reduce using rule 71 (expr -> boolean_expr .)
    TERNARY_C       reduce using rule 71 (expr -> boolean_expr .)
    AND             shift and go to state 75
    OR              shift and go to state 76
    TERNARY_Q       shift and go to state 77

  ! AND             [ reduce using rule 71 (expr -> boolean_expr .) ]
  ! OR              [ reduce using rule 71 (expr -> boolean_expr .) ]
  ! TERNARY_Q       [ reduce using rule 71 (expr -> boolean_expr .) ]


state 21

    (72) expr -> null_expr .

    SEMI            reduce using rule 72 (expr -> null_expr .)
    EQ              reduce using rule 72 (expr -> null_expr .)
    NE              reduce using rule 72 (expr -> null_expr .)
    LT              reduce using rule 72 (expr -> null_expr .)
    GT              reduce using rule 72 (expr -> null_expr .)
    LE              reduce using rule 72 (expr -> null_expr .)
    GE              reduce using rule 72 (expr -> null_expr .)
    AND             reduce using rule 72 (expr -> null_expr .)
    OR              reduce using rule 72 (expr -> null_expr .)
    TERNARY_Q       reduce using rule 72 (expr -> null_expr .)
    RPAREN          reduce using rule 72 (expr -> null_expr .)
    COMMA           reduce using rule 72 (expr -> null_expr .)
    TERNARY_C       reduce using rule 72 (expr -> null_expr .)


state 22

    (73) expr -> ternary_expr .

    SEMI            reduce using rule 73 (expr -> ternary_expr .)
    EQ              reduce using rule 73 (expr -> ternary_expr .)
    NE              reduce using rule 73 (expr -> ternary_expr .)
    LT              reduce using rule 73 (expr -> ternary_expr .)
    GT              reduce using rule 73 (expr -> ternary_expr .)
    LE              reduce using rule 73 (expr -> ternary_expr .)
    GE              reduce using rule 73 (expr -> ternary_expr .)
    AND             reduce using rule 73 (expr -> ternary_expr .)
    OR              reduce using rule 73 (expr -> ternary_expr .)
    TERNARY_Q       reduce using rule 73 (expr -> ternary_expr .)
    RPAREN          reduce using rule 73 (expr -> ternary_expr .)
    COMMA           reduce using rule 73 (expr -> ternary_expr .)
    TERNARY_C       reduce using rule 73 (expr -> ternary_expr .)


state 23

    (75) expr -> func_call .
    (81) num_factor -> func_call .

  ! reduce/reduce conflict for SEMI resolved using rule 75 (expr -> func_call .)
  ! reduce/reduce conflict for EQ resolved using rule 75 (expr -> func_call .)
  ! reduce/reduce conflict for NE resolved using rule 75 (expr -> func_call .)
  ! reduce/reduce conflict for LT resolved using rule 75 (expr -> func_call .)
  ! reduce/reduce conflict for GT resolved using rule 75 (expr -> func_call .)
  ! reduce/reduce conflict for LE resolved using rule 75 (expr -> func_call .)
  ! reduce/reduce conflict for GE resolved using rule 75 (expr -> func_call .)
  ! reduce/reduce conflict for AND resolved using rule 75 (expr -> func_call .)
  ! reduce/reduce conflict for OR resolved using rule 75 (expr -> func_call .)
  ! reduce/reduce conflict for TERNARY_Q resolved using rule 75 (expr -> func_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 75 (expr -> func_call .)
  ! reduce/reduce conflict for COMMA resolved using rule 75 (expr -> func_call .)
  ! reduce/reduce conflict for TERNARY_C resolved using rule 75 (expr -> func_call .)
    SEMI            reduce using rule 75 (expr -> func_call .)
    EQ              reduce using rule 75 (expr -> func_call .)
    NE              reduce using rule 75 (expr -> func_call .)
    LT              reduce using rule 75 (expr -> func_call .)
    GT              reduce using rule 75 (expr -> func_call .)
    LE              reduce using rule 75 (expr -> func_call .)
    GE              reduce using rule 75 (expr -> func_call .)
    AND             reduce using rule 75 (expr -> func_call .)
    OR              reduce using rule 75 (expr -> func_call .)
    TERNARY_Q       reduce using rule 75 (expr -> func_call .)
    RPAREN          reduce using rule 75 (expr -> func_call .)
    COMMA           reduce using rule 75 (expr -> func_call .)
    TERNARY_C       reduce using rule 75 (expr -> func_call .)
    PLUS            reduce using rule 81 (num_factor -> func_call .)
    MINUS           reduce using rule 81 (num_factor -> func_call .)
    TIMES           reduce using rule 81 (num_factor -> func_call .)
    DIVIDE          reduce using rule 81 (num_factor -> func_call .)
    INT_DIVIDE      reduce using rule 81 (num_factor -> func_call .)
    POWER           reduce using rule 81 (num_factor -> func_call .)
    MODULO          reduce using rule 81 (num_factor -> func_call .)

  ! SEMI            [ reduce using rule 81 (num_factor -> func_call .) ]
  ! EQ              [ reduce using rule 81 (num_factor -> func_call .) ]
  ! NE              [ reduce using rule 81 (num_factor -> func_call .) ]
  ! LT              [ reduce using rule 81 (num_factor -> func_call .) ]
  ! GT              [ reduce using rule 81 (num_factor -> func_call .) ]
  ! LE              [ reduce using rule 81 (num_factor -> func_call .) ]
  ! GE              [ reduce using rule 81 (num_factor -> func_call .) ]
  ! AND             [ reduce using rule 81 (num_factor -> func_call .) ]
  ! OR              [ reduce using rule 81 (num_factor -> func_call .) ]
  ! TERNARY_Q       [ reduce using rule 81 (num_factor -> func_call .) ]
  ! RPAREN          [ reduce using rule 81 (num_factor -> func_call .) ]
  ! COMMA           [ reduce using rule 81 (num_factor -> func_call .) ]
  ! TERNARY_C       [ reduce using rule 81 (num_factor -> func_call .) ]


state 24

    (32) func_stmt -> FN . var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (57) var -> . ID

    ID              shift and go to state 30

    var                            shift and go to state 78

state 25

    (80) num_factor -> LPAREN . num_expr RPAREN
    (98) boolean_factor -> LPAREN . boolean_expr RPAREN
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (57) var -> . ID
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr

    NOT             shift and go to state 35
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NULL            shift and go to state 37

    num_expr                       shift and go to state 79
    boolean_expr                   shift and go to state 80
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    func_call                      shift and go to state 81
    var                            shift and go to state 82
    comparison                     shift and go to state 41
    expr                           shift and go to state 83
    string_expr                    shift and go to state 19
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22

state 26

    (42) if_stmt -> IF . LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt

    LPAREN          shift and go to state 84


state 27

    (55) while_stmt -> WHILE . LPAREN boolean_expr RPAREN LBRACE block RBRACE

    LPAREN          shift and go to state 85


state 28

    (56) for_stmt -> FOR . LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE

    LPAREN          shift and go to state 86


state 29

    (54) print_stmt -> PRINT . LPAREN expr RPAREN

    LPAREN          shift and go to state 87


state 30

    (57) var -> ID .

    ASSIGN          reduce using rule 57 (var -> ID .)
    PLUS_ASSIGN     reduce using rule 57 (var -> ID .)
    MINUS_ASSIGN    reduce using rule 57 (var -> ID .)
    TIMES_ASSIGN    reduce using rule 57 (var -> ID .)
    DIVIDE_ASSIGN   reduce using rule 57 (var -> ID .)
    POWER_ASSIGN    reduce using rule 57 (var -> ID .)
    MODULO_ASSIGN   reduce using rule 57 (var -> ID .)
    INT_DIVIDE_ASSIGN reduce using rule 57 (var -> ID .)
    INCREMENT       reduce using rule 57 (var -> ID .)
    DECREMENT       reduce using rule 57 (var -> ID .)
    LPAREN          reduce using rule 57 (var -> ID .)
    SEMI            reduce using rule 57 (var -> ID .)
    EQ              reduce using rule 57 (var -> ID .)
    NE              reduce using rule 57 (var -> ID .)
    LT              reduce using rule 57 (var -> ID .)
    GT              reduce using rule 57 (var -> ID .)
    LE              reduce using rule 57 (var -> ID .)
    GE              reduce using rule 57 (var -> ID .)
    CONCAT          reduce using rule 57 (var -> ID .)
    PLUS            reduce using rule 57 (var -> ID .)
    MINUS           reduce using rule 57 (var -> ID .)
    TIMES           reduce using rule 57 (var -> ID .)
    DIVIDE          reduce using rule 57 (var -> ID .)
    INT_DIVIDE      reduce using rule 57 (var -> ID .)
    POWER           reduce using rule 57 (var -> ID .)
    MODULO          reduce using rule 57 (var -> ID .)
    AND             reduce using rule 57 (var -> ID .)
    OR              reduce using rule 57 (var -> ID .)
    TERNARY_Q       reduce using rule 57 (var -> ID .)
    RPAREN          reduce using rule 57 (var -> ID .)
    COMMA           reduce using rule 57 (var -> ID .)
    TERNARY_C       reduce using rule 57 (var -> ID .)


state 31

    (92) string_expr -> STRING .

    CONCAT          reduce using rule 92 (string_expr -> STRING .)
    SEMI            reduce using rule 92 (string_expr -> STRING .)
    EQ              reduce using rule 92 (string_expr -> STRING .)
    NE              reduce using rule 92 (string_expr -> STRING .)
    LT              reduce using rule 92 (string_expr -> STRING .)
    GT              reduce using rule 92 (string_expr -> STRING .)
    LE              reduce using rule 92 (string_expr -> STRING .)
    GE              reduce using rule 92 (string_expr -> STRING .)
    AND             reduce using rule 92 (string_expr -> STRING .)
    OR              reduce using rule 92 (string_expr -> STRING .)
    TERNARY_Q       reduce using rule 92 (string_expr -> STRING .)
    RPAREN          reduce using rule 92 (string_expr -> STRING .)
    COMMA           reduce using rule 92 (string_expr -> STRING .)
    TERNARY_C       reduce using rule 92 (string_expr -> STRING .)


state 32

    (76) num_factor -> PLUS . num_factor
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (57) var -> . ID

    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 89
    ID              shift and go to state 30

    num_factor                     shift and go to state 88
    func_call                      shift and go to state 90
    var                            shift and go to state 91

state 33

    (77) num_factor -> MINUS . num_factor
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (57) var -> . ID

    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 89
    ID              shift and go to state 30

    num_factor                     shift and go to state 92
    func_call                      shift and go to state 90
    var                            shift and go to state 91

state 34

    (90) num_expr -> num_factor .

    PLUS            reduce using rule 90 (num_expr -> num_factor .)
    MINUS           reduce using rule 90 (num_expr -> num_factor .)
    TIMES           reduce using rule 90 (num_expr -> num_factor .)
    DIVIDE          reduce using rule 90 (num_expr -> num_factor .)
    INT_DIVIDE      reduce using rule 90 (num_expr -> num_factor .)
    POWER           reduce using rule 90 (num_expr -> num_factor .)
    MODULO          reduce using rule 90 (num_expr -> num_factor .)
    SEMI            reduce using rule 90 (num_expr -> num_factor .)
    EQ              reduce using rule 90 (num_expr -> num_factor .)
    NE              reduce using rule 90 (num_expr -> num_factor .)
    LT              reduce using rule 90 (num_expr -> num_factor .)
    GT              reduce using rule 90 (num_expr -> num_factor .)
    LE              reduce using rule 90 (num_expr -> num_factor .)
    GE              reduce using rule 90 (num_expr -> num_factor .)
    RPAREN          reduce using rule 90 (num_expr -> num_factor .)
    AND             reduce using rule 90 (num_expr -> num_factor .)
    OR              reduce using rule 90 (num_expr -> num_factor .)
    TERNARY_Q       reduce using rule 90 (num_expr -> num_factor .)
    COMMA           reduce using rule 90 (num_expr -> num_factor .)
    TERNARY_C       reduce using rule 90 (num_expr -> num_factor .)


state 35

    (96) boolean_expr -> NOT . boolean_expr
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr
    (57) var -> . ID
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var

    NOT             shift and go to state 35
    LPAREN          shift and go to state 94
    BOOLEAN         shift and go to state 40
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39

    boolean_expr                   shift and go to state 93
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41
    var                            shift and go to state 95
    expr                           shift and go to state 83
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34

state 36

    (97) boolean_expr -> boolean_factor .

    AND             reduce using rule 97 (boolean_expr -> boolean_factor .)
    OR              reduce using rule 97 (boolean_expr -> boolean_factor .)
    TERNARY_Q       reduce using rule 97 (boolean_expr -> boolean_factor .)
    SEMI            reduce using rule 97 (boolean_expr -> boolean_factor .)
    EQ              reduce using rule 97 (boolean_expr -> boolean_factor .)
    NE              reduce using rule 97 (boolean_expr -> boolean_factor .)
    LT              reduce using rule 97 (boolean_expr -> boolean_factor .)
    GT              reduce using rule 97 (boolean_expr -> boolean_factor .)
    LE              reduce using rule 97 (boolean_expr -> boolean_factor .)
    GE              reduce using rule 97 (boolean_expr -> boolean_factor .)
    RPAREN          reduce using rule 97 (boolean_expr -> boolean_factor .)
    COMMA           reduce using rule 97 (boolean_expr -> boolean_factor .)
    TERNARY_C       reduce using rule 97 (boolean_expr -> boolean_factor .)


state 37

    (108) null_expr -> NULL .

    SEMI            reduce using rule 108 (null_expr -> NULL .)
    EQ              reduce using rule 108 (null_expr -> NULL .)
    NE              reduce using rule 108 (null_expr -> NULL .)
    LT              reduce using rule 108 (null_expr -> NULL .)
    GT              reduce using rule 108 (null_expr -> NULL .)
    LE              reduce using rule 108 (null_expr -> NULL .)
    GE              reduce using rule 108 (null_expr -> NULL .)
    AND             reduce using rule 108 (null_expr -> NULL .)
    OR              reduce using rule 108 (null_expr -> NULL .)
    TERNARY_Q       reduce using rule 108 (null_expr -> NULL .)
    RPAREN          reduce using rule 108 (null_expr -> NULL .)
    COMMA           reduce using rule 108 (null_expr -> NULL .)
    TERNARY_C       reduce using rule 108 (null_expr -> NULL .)


state 38

    (78) num_factor -> INTEGER .

    PLUS            reduce using rule 78 (num_factor -> INTEGER .)
    MINUS           reduce using rule 78 (num_factor -> INTEGER .)
    TIMES           reduce using rule 78 (num_factor -> INTEGER .)
    DIVIDE          reduce using rule 78 (num_factor -> INTEGER .)
    INT_DIVIDE      reduce using rule 78 (num_factor -> INTEGER .)
    POWER           reduce using rule 78 (num_factor -> INTEGER .)
    MODULO          reduce using rule 78 (num_factor -> INTEGER .)
    SEMI            reduce using rule 78 (num_factor -> INTEGER .)
    EQ              reduce using rule 78 (num_factor -> INTEGER .)
    NE              reduce using rule 78 (num_factor -> INTEGER .)
    LT              reduce using rule 78 (num_factor -> INTEGER .)
    GT              reduce using rule 78 (num_factor -> INTEGER .)
    LE              reduce using rule 78 (num_factor -> INTEGER .)
    GE              reduce using rule 78 (num_factor -> INTEGER .)
    RPAREN          reduce using rule 78 (num_factor -> INTEGER .)
    AND             reduce using rule 78 (num_factor -> INTEGER .)
    OR              reduce using rule 78 (num_factor -> INTEGER .)
    TERNARY_Q       reduce using rule 78 (num_factor -> INTEGER .)
    COMMA           reduce using rule 78 (num_factor -> INTEGER .)
    TERNARY_C       reduce using rule 78 (num_factor -> INTEGER .)


state 39

    (79) num_factor -> FLOAT .

    PLUS            reduce using rule 79 (num_factor -> FLOAT .)
    MINUS           reduce using rule 79 (num_factor -> FLOAT .)
    TIMES           reduce using rule 79 (num_factor -> FLOAT .)
    DIVIDE          reduce using rule 79 (num_factor -> FLOAT .)
    INT_DIVIDE      reduce using rule 79 (num_factor -> FLOAT .)
    POWER           reduce using rule 79 (num_factor -> FLOAT .)
    MODULO          reduce using rule 79 (num_factor -> FLOAT .)
    SEMI            reduce using rule 79 (num_factor -> FLOAT .)
    EQ              reduce using rule 79 (num_factor -> FLOAT .)
    NE              reduce using rule 79 (num_factor -> FLOAT .)
    LT              reduce using rule 79 (num_factor -> FLOAT .)
    GT              reduce using rule 79 (num_factor -> FLOAT .)
    LE              reduce using rule 79 (num_factor -> FLOAT .)
    GE              reduce using rule 79 (num_factor -> FLOAT .)
    RPAREN          reduce using rule 79 (num_factor -> FLOAT .)
    AND             reduce using rule 79 (num_factor -> FLOAT .)
    OR              reduce using rule 79 (num_factor -> FLOAT .)
    TERNARY_Q       reduce using rule 79 (num_factor -> FLOAT .)
    COMMA           reduce using rule 79 (num_factor -> FLOAT .)
    TERNARY_C       reduce using rule 79 (num_factor -> FLOAT .)


state 40

    (99) boolean_factor -> BOOLEAN .

    AND             reduce using rule 99 (boolean_factor -> BOOLEAN .)
    OR              reduce using rule 99 (boolean_factor -> BOOLEAN .)
    TERNARY_Q       reduce using rule 99 (boolean_factor -> BOOLEAN .)
    SEMI            reduce using rule 99 (boolean_factor -> BOOLEAN .)
    EQ              reduce using rule 99 (boolean_factor -> BOOLEAN .)
    NE              reduce using rule 99 (boolean_factor -> BOOLEAN .)
    LT              reduce using rule 99 (boolean_factor -> BOOLEAN .)
    GT              reduce using rule 99 (boolean_factor -> BOOLEAN .)
    LE              reduce using rule 99 (boolean_factor -> BOOLEAN .)
    GE              reduce using rule 99 (boolean_factor -> BOOLEAN .)
    RPAREN          reduce using rule 99 (boolean_factor -> BOOLEAN .)
    COMMA           reduce using rule 99 (boolean_factor -> BOOLEAN .)
    TERNARY_C       reduce using rule 99 (boolean_factor -> BOOLEAN .)


state 41

    (100) boolean_factor -> comparison .

    AND             reduce using rule 100 (boolean_factor -> comparison .)
    OR              reduce using rule 100 (boolean_factor -> comparison .)
    TERNARY_Q       reduce using rule 100 (boolean_factor -> comparison .)
    SEMI            reduce using rule 100 (boolean_factor -> comparison .)
    EQ              reduce using rule 100 (boolean_factor -> comparison .)
    NE              reduce using rule 100 (boolean_factor -> comparison .)
    LT              reduce using rule 100 (boolean_factor -> comparison .)
    GT              reduce using rule 100 (boolean_factor -> comparison .)
    LE              reduce using rule 100 (boolean_factor -> comparison .)
    GE              reduce using rule 100 (boolean_factor -> comparison .)
    RPAREN          reduce using rule 100 (boolean_factor -> comparison .)
    COMMA           reduce using rule 100 (boolean_factor -> comparison .)
    TERNARY_C       reduce using rule 100 (boolean_factor -> comparison .)


state 42

    (3) statement_list -> statement statement_list .

    $end            reduce using rule 3 (statement_list -> statement statement_list .)
    RBRACE          reduce using rule 3 (statement_list -> statement statement_list .)


state 43

    (5) statement -> var_assign SEMI .

    FINAL           reduce using rule 5 (statement -> var_assign SEMI .)
    FN              reduce using rule 5 (statement -> var_assign SEMI .)
    IF              reduce using rule 5 (statement -> var_assign SEMI .)
    WHILE           reduce using rule 5 (statement -> var_assign SEMI .)
    FOR             reduce using rule 5 (statement -> var_assign SEMI .)
    PRINT           reduce using rule 5 (statement -> var_assign SEMI .)
    ID              reduce using rule 5 (statement -> var_assign SEMI .)
    STRING          reduce using rule 5 (statement -> var_assign SEMI .)
    NOT             reduce using rule 5 (statement -> var_assign SEMI .)
    NULL            reduce using rule 5 (statement -> var_assign SEMI .)
    PLUS            reduce using rule 5 (statement -> var_assign SEMI .)
    MINUS           reduce using rule 5 (statement -> var_assign SEMI .)
    INTEGER         reduce using rule 5 (statement -> var_assign SEMI .)
    FLOAT           reduce using rule 5 (statement -> var_assign SEMI .)
    LPAREN          reduce using rule 5 (statement -> var_assign SEMI .)
    BOOLEAN         reduce using rule 5 (statement -> var_assign SEMI .)
    $end            reduce using rule 5 (statement -> var_assign SEMI .)
    RBRACE          reduce using rule 5 (statement -> var_assign SEMI .)


state 44

    (6) statement -> final_assign SEMI .

    FINAL           reduce using rule 6 (statement -> final_assign SEMI .)
    FN              reduce using rule 6 (statement -> final_assign SEMI .)
    IF              reduce using rule 6 (statement -> final_assign SEMI .)
    WHILE           reduce using rule 6 (statement -> final_assign SEMI .)
    FOR             reduce using rule 6 (statement -> final_assign SEMI .)
    PRINT           reduce using rule 6 (statement -> final_assign SEMI .)
    ID              reduce using rule 6 (statement -> final_assign SEMI .)
    STRING          reduce using rule 6 (statement -> final_assign SEMI .)
    NOT             reduce using rule 6 (statement -> final_assign SEMI .)
    NULL            reduce using rule 6 (statement -> final_assign SEMI .)
    PLUS            reduce using rule 6 (statement -> final_assign SEMI .)
    MINUS           reduce using rule 6 (statement -> final_assign SEMI .)
    INTEGER         reduce using rule 6 (statement -> final_assign SEMI .)
    FLOAT           reduce using rule 6 (statement -> final_assign SEMI .)
    LPAREN          reduce using rule 6 (statement -> final_assign SEMI .)
    BOOLEAN         reduce using rule 6 (statement -> final_assign SEMI .)
    $end            reduce using rule 6 (statement -> final_assign SEMI .)
    RBRACE          reduce using rule 6 (statement -> final_assign SEMI .)


state 45

    (7) statement -> var_compound_assign SEMI .

    FINAL           reduce using rule 7 (statement -> var_compound_assign SEMI .)
    FN              reduce using rule 7 (statement -> var_compound_assign SEMI .)
    IF              reduce using rule 7 (statement -> var_compound_assign SEMI .)
    WHILE           reduce using rule 7 (statement -> var_compound_assign SEMI .)
    FOR             reduce using rule 7 (statement -> var_compound_assign SEMI .)
    PRINT           reduce using rule 7 (statement -> var_compound_assign SEMI .)
    ID              reduce using rule 7 (statement -> var_compound_assign SEMI .)
    STRING          reduce using rule 7 (statement -> var_compound_assign SEMI .)
    NOT             reduce using rule 7 (statement -> var_compound_assign SEMI .)
    NULL            reduce using rule 7 (statement -> var_compound_assign SEMI .)
    PLUS            reduce using rule 7 (statement -> var_compound_assign SEMI .)
    MINUS           reduce using rule 7 (statement -> var_compound_assign SEMI .)
    INTEGER         reduce using rule 7 (statement -> var_compound_assign SEMI .)
    FLOAT           reduce using rule 7 (statement -> var_compound_assign SEMI .)
    LPAREN          reduce using rule 7 (statement -> var_compound_assign SEMI .)
    BOOLEAN         reduce using rule 7 (statement -> var_compound_assign SEMI .)
    $end            reduce using rule 7 (statement -> var_compound_assign SEMI .)
    RBRACE          reduce using rule 7 (statement -> var_compound_assign SEMI .)


state 46

    (8) statement -> var_auto SEMI .

    FINAL           reduce using rule 8 (statement -> var_auto SEMI .)
    FN              reduce using rule 8 (statement -> var_auto SEMI .)
    IF              reduce using rule 8 (statement -> var_auto SEMI .)
    WHILE           reduce using rule 8 (statement -> var_auto SEMI .)
    FOR             reduce using rule 8 (statement -> var_auto SEMI .)
    PRINT           reduce using rule 8 (statement -> var_auto SEMI .)
    ID              reduce using rule 8 (statement -> var_auto SEMI .)
    STRING          reduce using rule 8 (statement -> var_auto SEMI .)
    NOT             reduce using rule 8 (statement -> var_auto SEMI .)
    NULL            reduce using rule 8 (statement -> var_auto SEMI .)
    PLUS            reduce using rule 8 (statement -> var_auto SEMI .)
    MINUS           reduce using rule 8 (statement -> var_auto SEMI .)
    INTEGER         reduce using rule 8 (statement -> var_auto SEMI .)
    FLOAT           reduce using rule 8 (statement -> var_auto SEMI .)
    LPAREN          reduce using rule 8 (statement -> var_auto SEMI .)
    BOOLEAN         reduce using rule 8 (statement -> var_auto SEMI .)
    $end            reduce using rule 8 (statement -> var_auto SEMI .)
    RBRACE          reduce using rule 8 (statement -> var_auto SEMI .)


state 47

    (9) statement -> expr SEMI .

    FINAL           reduce using rule 9 (statement -> expr SEMI .)
    FN              reduce using rule 9 (statement -> expr SEMI .)
    IF              reduce using rule 9 (statement -> expr SEMI .)
    WHILE           reduce using rule 9 (statement -> expr SEMI .)
    FOR             reduce using rule 9 (statement -> expr SEMI .)
    PRINT           reduce using rule 9 (statement -> expr SEMI .)
    ID              reduce using rule 9 (statement -> expr SEMI .)
    STRING          reduce using rule 9 (statement -> expr SEMI .)
    NOT             reduce using rule 9 (statement -> expr SEMI .)
    NULL            reduce using rule 9 (statement -> expr SEMI .)
    PLUS            reduce using rule 9 (statement -> expr SEMI .)
    MINUS           reduce using rule 9 (statement -> expr SEMI .)
    INTEGER         reduce using rule 9 (statement -> expr SEMI .)
    FLOAT           reduce using rule 9 (statement -> expr SEMI .)
    LPAREN          reduce using rule 9 (statement -> expr SEMI .)
    BOOLEAN         reduce using rule 9 (statement -> expr SEMI .)
    $end            reduce using rule 9 (statement -> expr SEMI .)
    RBRACE          reduce using rule 9 (statement -> expr SEMI .)


state 48

    (102) comparison -> expr EQ . expr
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (57) var -> . ID
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    ID              shift and go to state 30
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

    expr                           shift and go to state 96
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    boolean_expr                   shift and go to state 20
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    var                            shift and go to state 97
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 49

    (103) comparison -> expr NE . expr
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (57) var -> . ID
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    ID              shift and go to state 30
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

    expr                           shift and go to state 98
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    boolean_expr                   shift and go to state 20
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    var                            shift and go to state 97
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 50

    (104) comparison -> expr LT . expr
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (57) var -> . ID
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    ID              shift and go to state 30
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

    expr                           shift and go to state 99
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    boolean_expr                   shift and go to state 20
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    var                            shift and go to state 97
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 51

    (105) comparison -> expr GT . expr
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (57) var -> . ID
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    ID              shift and go to state 30
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

    expr                           shift and go to state 100
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    boolean_expr                   shift and go to state 20
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    var                            shift and go to state 97
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 52

    (106) comparison -> expr LE . expr
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (57) var -> . ID
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    ID              shift and go to state 30
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

    expr                           shift and go to state 101
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    boolean_expr                   shift and go to state 20
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    var                            shift and go to state 97
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 53

    (107) comparison -> expr GE . expr
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (57) var -> . ID
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    ID              shift and go to state 30
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

    expr                           shift and go to state 102
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    boolean_expr                   shift and go to state 20
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    var                            shift and go to state 97
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 54

    (14) statement -> print_stmt SEMI .

    FINAL           reduce using rule 14 (statement -> print_stmt SEMI .)
    FN              reduce using rule 14 (statement -> print_stmt SEMI .)
    IF              reduce using rule 14 (statement -> print_stmt SEMI .)
    WHILE           reduce using rule 14 (statement -> print_stmt SEMI .)
    FOR             reduce using rule 14 (statement -> print_stmt SEMI .)
    PRINT           reduce using rule 14 (statement -> print_stmt SEMI .)
    ID              reduce using rule 14 (statement -> print_stmt SEMI .)
    STRING          reduce using rule 14 (statement -> print_stmt SEMI .)
    NOT             reduce using rule 14 (statement -> print_stmt SEMI .)
    NULL            reduce using rule 14 (statement -> print_stmt SEMI .)
    PLUS            reduce using rule 14 (statement -> print_stmt SEMI .)
    MINUS           reduce using rule 14 (statement -> print_stmt SEMI .)
    INTEGER         reduce using rule 14 (statement -> print_stmt SEMI .)
    FLOAT           reduce using rule 14 (statement -> print_stmt SEMI .)
    LPAREN          reduce using rule 14 (statement -> print_stmt SEMI .)
    BOOLEAN         reduce using rule 14 (statement -> print_stmt SEMI .)
    $end            reduce using rule 14 (statement -> print_stmt SEMI .)
    RBRACE          reduce using rule 14 (statement -> print_stmt SEMI .)


state 55

    (58) var_assign -> var ASSIGN . expr
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (57) var -> . ID
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    ID              shift and go to state 30
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

    var                            shift and go to state 97
    expr                           shift and go to state 103
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    boolean_expr                   shift and go to state 20
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 56

    (60) var_compound_assign -> var PLUS_ASSIGN . num_expr
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (57) var -> . ID

    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 89
    ID              shift and go to state 30

    var                            shift and go to state 91
    num_expr                       shift and go to state 104
    num_factor                     shift and go to state 34
    func_call                      shift and go to state 90

state 57

    (61) var_compound_assign -> var MINUS_ASSIGN . num_expr
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (57) var -> . ID

    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 89
    ID              shift and go to state 30

    var                            shift and go to state 91
    num_expr                       shift and go to state 105
    num_factor                     shift and go to state 34
    func_call                      shift and go to state 90

state 58

    (62) var_compound_assign -> var TIMES_ASSIGN . num_expr
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (57) var -> . ID

    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 89
    ID              shift and go to state 30

    var                            shift and go to state 91
    num_expr                       shift and go to state 106
    num_factor                     shift and go to state 34
    func_call                      shift and go to state 90

state 59

    (63) var_compound_assign -> var DIVIDE_ASSIGN . num_expr
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (57) var -> . ID

    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 89
    ID              shift and go to state 30

    var                            shift and go to state 91
    num_expr                       shift and go to state 107
    num_factor                     shift and go to state 34
    func_call                      shift and go to state 90

state 60

    (64) var_compound_assign -> var POWER_ASSIGN . num_expr
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (57) var -> . ID

    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 89
    ID              shift and go to state 30

    var                            shift and go to state 91
    num_expr                       shift and go to state 108
    num_factor                     shift and go to state 34
    func_call                      shift and go to state 90

state 61

    (65) var_compound_assign -> var MODULO_ASSIGN . num_expr
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (57) var -> . ID

    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 89
    ID              shift and go to state 30

    var                            shift and go to state 91
    num_expr                       shift and go to state 109
    num_factor                     shift and go to state 34
    func_call                      shift and go to state 90

state 62

    (66) var_compound_assign -> var INT_DIVIDE_ASSIGN . num_expr
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (57) var -> . ID

    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 89
    ID              shift and go to state 30

    var                            shift and go to state 91
    num_expr                       shift and go to state 110
    num_factor                     shift and go to state 34
    func_call                      shift and go to state 90

state 63

    (67) var_auto -> var INCREMENT .

    SEMI            reduce using rule 67 (var_auto -> var INCREMENT .)
    RPAREN          reduce using rule 67 (var_auto -> var INCREMENT .)


state 64

    (68) var_auto -> var DECREMENT .

    SEMI            reduce using rule 68 (var_auto -> var DECREMENT .)
    RPAREN          reduce using rule 68 (var_auto -> var DECREMENT .)


state 65

    (33) func_call -> var LPAREN . arguments_list RPAREN
    (34) arguments_list -> . non_empty_arguments_list
    (35) arguments_list -> . empty
    (36) non_empty_arguments_list -> . expr COMMA non_empty_arguments_list
    (37) non_empty_arguments_list -> . expr
    (110) empty -> .
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (57) var -> . ID
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

    RPAREN          reduce using rule 110 (empty -> .)
    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    ID              shift and go to state 30
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

    var                            shift and go to state 97
    arguments_list                 shift and go to state 111
    non_empty_arguments_list       shift and go to state 112
    empty                          shift and go to state 113
    expr                           shift and go to state 114
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    boolean_expr                   shift and go to state 20
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 66

    (59) final_assign -> FINAL var . ASSIGN expr

    ASSIGN          shift and go to state 115


state 67

    (83) num_expr -> num_expr PLUS . num_expr
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (57) var -> . ID

    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 89
    ID              shift and go to state 30

    num_expr                       shift and go to state 116
    num_factor                     shift and go to state 34
    func_call                      shift and go to state 90
    var                            shift and go to state 91

state 68

    (84) num_expr -> num_expr MINUS . num_expr
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (57) var -> . ID

    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 89
    ID              shift and go to state 30

    num_expr                       shift and go to state 117
    num_factor                     shift and go to state 34
    func_call                      shift and go to state 90
    var                            shift and go to state 91

state 69

    (85) num_expr -> num_expr TIMES . num_expr
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (57) var -> . ID

    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 89
    ID              shift and go to state 30

    num_expr                       shift and go to state 118
    num_factor                     shift and go to state 34
    func_call                      shift and go to state 90
    var                            shift and go to state 91

state 70

    (86) num_expr -> num_expr DIVIDE . num_expr
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (57) var -> . ID

    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 89
    ID              shift and go to state 30

    num_expr                       shift and go to state 119
    num_factor                     shift and go to state 34
    func_call                      shift and go to state 90
    var                            shift and go to state 91

state 71

    (87) num_expr -> num_expr INT_DIVIDE . num_expr
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (57) var -> . ID

    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 89
    ID              shift and go to state 30

    num_expr                       shift and go to state 120
    num_factor                     shift and go to state 34
    func_call                      shift and go to state 90
    var                            shift and go to state 91

state 72

    (88) num_expr -> num_expr POWER . num_expr
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (57) var -> . ID

    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 89
    ID              shift and go to state 30

    num_expr                       shift and go to state 121
    num_factor                     shift and go to state 34
    func_call                      shift and go to state 90
    var                            shift and go to state 91

state 73

    (89) num_expr -> num_expr MODULO . num_expr
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (57) var -> . ID

    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 89
    ID              shift and go to state 30

    num_expr                       shift and go to state 122
    num_factor                     shift and go to state 34
    func_call                      shift and go to state 90
    var                            shift and go to state 91

state 74

    (91) string_expr -> string_expr CONCAT . string_expr
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (57) var -> . ID

    STRING          shift and go to state 31
    ID              shift and go to state 30

    string_expr                    shift and go to state 123
    var                            shift and go to state 124

state 75

    (94) boolean_expr -> boolean_expr AND . boolean_expr
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr
    (57) var -> . ID
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var

    NOT             shift and go to state 35
    LPAREN          shift and go to state 94
    BOOLEAN         shift and go to state 40
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39

    boolean_expr                   shift and go to state 125
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41
    var                            shift and go to state 95
    expr                           shift and go to state 83
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34

state 76

    (95) boolean_expr -> boolean_expr OR . boolean_expr
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr
    (57) var -> . ID
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var

    NOT             shift and go to state 35
    LPAREN          shift and go to state 94
    BOOLEAN         shift and go to state 40
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39

    boolean_expr                   shift and go to state 126
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41
    var                            shift and go to state 95
    expr                           shift and go to state 83
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34

state 77

    (109) ternary_expr -> boolean_expr TERNARY_Q . expr TERNARY_C expr
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (57) var -> . ID
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    ID              shift and go to state 30
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

    boolean_expr                   shift and go to state 20
    expr                           shift and go to state 127
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    var                            shift and go to state 97
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 78

    (32) func_stmt -> FN var . LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE

    LPAREN          shift and go to state 128


state 79

    (80) num_factor -> LPAREN num_expr . RPAREN
    (83) num_expr -> num_expr . PLUS num_expr
    (84) num_expr -> num_expr . MINUS num_expr
    (85) num_expr -> num_expr . TIMES num_expr
    (86) num_expr -> num_expr . DIVIDE num_expr
    (87) num_expr -> num_expr . INT_DIVIDE num_expr
    (88) num_expr -> num_expr . POWER num_expr
    (89) num_expr -> num_expr . MODULO num_expr
    (70) expr -> num_expr .

    RPAREN          shift and go to state 129
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    INT_DIVIDE      shift and go to state 71
    POWER           shift and go to state 72
    MODULO          shift and go to state 73
    EQ              reduce using rule 70 (expr -> num_expr .)
    NE              reduce using rule 70 (expr -> num_expr .)
    LT              reduce using rule 70 (expr -> num_expr .)
    GT              reduce using rule 70 (expr -> num_expr .)
    LE              reduce using rule 70 (expr -> num_expr .)
    GE              reduce using rule 70 (expr -> num_expr .)


state 80

    (98) boolean_factor -> LPAREN boolean_expr . RPAREN
    (94) boolean_expr -> boolean_expr . AND boolean_expr
    (95) boolean_expr -> boolean_expr . OR boolean_expr
    (71) expr -> boolean_expr .
    (109) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    RPAREN          shift and go to state 130
    AND             shift and go to state 75
    OR              shift and go to state 76
    EQ              reduce using rule 71 (expr -> boolean_expr .)
    NE              reduce using rule 71 (expr -> boolean_expr .)
    LT              reduce using rule 71 (expr -> boolean_expr .)
    GT              reduce using rule 71 (expr -> boolean_expr .)
    LE              reduce using rule 71 (expr -> boolean_expr .)
    GE              reduce using rule 71 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 77


state 81

    (81) num_factor -> func_call .
    (75) expr -> func_call .

  ! reduce/reduce conflict for EQ resolved using rule 75 (expr -> func_call .)
  ! reduce/reduce conflict for NE resolved using rule 75 (expr -> func_call .)
  ! reduce/reduce conflict for LT resolved using rule 75 (expr -> func_call .)
  ! reduce/reduce conflict for GT resolved using rule 75 (expr -> func_call .)
  ! reduce/reduce conflict for LE resolved using rule 75 (expr -> func_call .)
  ! reduce/reduce conflict for GE resolved using rule 75 (expr -> func_call .)
    RPAREN          reduce using rule 81 (num_factor -> func_call .)
    PLUS            reduce using rule 81 (num_factor -> func_call .)
    MINUS           reduce using rule 81 (num_factor -> func_call .)
    TIMES           reduce using rule 81 (num_factor -> func_call .)
    DIVIDE          reduce using rule 81 (num_factor -> func_call .)
    INT_DIVIDE      reduce using rule 81 (num_factor -> func_call .)
    POWER           reduce using rule 81 (num_factor -> func_call .)
    MODULO          reduce using rule 81 (num_factor -> func_call .)
    EQ              reduce using rule 75 (expr -> func_call .)
    NE              reduce using rule 75 (expr -> func_call .)
    LT              reduce using rule 75 (expr -> func_call .)
    GT              reduce using rule 75 (expr -> func_call .)
    LE              reduce using rule 75 (expr -> func_call .)
    GE              reduce using rule 75 (expr -> func_call .)

  ! EQ              [ reduce using rule 81 (num_factor -> func_call .) ]
  ! NE              [ reduce using rule 81 (num_factor -> func_call .) ]
  ! LT              [ reduce using rule 81 (num_factor -> func_call .) ]
  ! GT              [ reduce using rule 81 (num_factor -> func_call .) ]
  ! LE              [ reduce using rule 81 (num_factor -> func_call .) ]
  ! GE              [ reduce using rule 81 (num_factor -> func_call .) ]


state 82

    (82) num_factor -> var .
    (101) boolean_factor -> var .
    (33) func_call -> var . LPAREN arguments_list RPAREN
    (74) expr -> var .
    (93) string_expr -> var .

  ! reduce/reduce conflict for RPAREN resolved using rule 82 (num_factor -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 82 (num_factor -> var .)
  ! reduce/reduce conflict for NE resolved using rule 82 (num_factor -> var .)
  ! reduce/reduce conflict for LT resolved using rule 82 (num_factor -> var .)
  ! reduce/reduce conflict for GT resolved using rule 82 (num_factor -> var .)
  ! reduce/reduce conflict for LE resolved using rule 82 (num_factor -> var .)
  ! reduce/reduce conflict for GE resolved using rule 82 (num_factor -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 74 (expr -> var .)
    RPAREN          reduce using rule 82 (num_factor -> var .)
    PLUS            reduce using rule 82 (num_factor -> var .)
    MINUS           reduce using rule 82 (num_factor -> var .)
    TIMES           reduce using rule 82 (num_factor -> var .)
    DIVIDE          reduce using rule 82 (num_factor -> var .)
    INT_DIVIDE      reduce using rule 82 (num_factor -> var .)
    POWER           reduce using rule 82 (num_factor -> var .)
    MODULO          reduce using rule 82 (num_factor -> var .)
    AND             reduce using rule 101 (boolean_factor -> var .)
    OR              reduce using rule 101 (boolean_factor -> var .)
    TERNARY_Q       reduce using rule 101 (boolean_factor -> var .)
    LPAREN          shift and go to state 65
    EQ              reduce using rule 74 (expr -> var .)
    NE              reduce using rule 74 (expr -> var .)
    LT              reduce using rule 74 (expr -> var .)
    GT              reduce using rule 74 (expr -> var .)
    LE              reduce using rule 74 (expr -> var .)
    GE              reduce using rule 74 (expr -> var .)
    CONCAT          reduce using rule 93 (string_expr -> var .)

  ! EQ              [ reduce using rule 82 (num_factor -> var .) ]
  ! NE              [ reduce using rule 82 (num_factor -> var .) ]
  ! LT              [ reduce using rule 82 (num_factor -> var .) ]
  ! GT              [ reduce using rule 82 (num_factor -> var .) ]
  ! LE              [ reduce using rule 82 (num_factor -> var .) ]
  ! GE              [ reduce using rule 82 (num_factor -> var .) ]
  ! RPAREN          [ reduce using rule 101 (boolean_factor -> var .) ]
  ! EQ              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! NE              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! LT              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! GT              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! LE              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! GE              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! EQ              [ reduce using rule 93 (string_expr -> var .) ]
  ! NE              [ reduce using rule 93 (string_expr -> var .) ]
  ! LT              [ reduce using rule 93 (string_expr -> var .) ]
  ! GT              [ reduce using rule 93 (string_expr -> var .) ]
  ! LE              [ reduce using rule 93 (string_expr -> var .) ]
  ! GE              [ reduce using rule 93 (string_expr -> var .) ]


state 83

    (102) comparison -> expr . EQ expr
    (103) comparison -> expr . NE expr
    (104) comparison -> expr . LT expr
    (105) comparison -> expr . GT expr
    (106) comparison -> expr . LE expr
    (107) comparison -> expr . GE expr

    EQ              shift and go to state 48
    NE              shift and go to state 49
    LT              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53


state 84

    (42) if_stmt -> IF LPAREN . boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr
    (57) var -> . ID
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var

    NOT             shift and go to state 35
    LPAREN          shift and go to state 94
    BOOLEAN         shift and go to state 40
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39

    boolean_expr                   shift and go to state 131
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41
    var                            shift and go to state 95
    expr                           shift and go to state 83
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34

state 85

    (55) while_stmt -> WHILE LPAREN . boolean_expr RPAREN LBRACE block RBRACE
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr
    (57) var -> . ID
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var

    NOT             shift and go to state 35
    LPAREN          shift and go to state 94
    BOOLEAN         shift and go to state 40
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39

    boolean_expr                   shift and go to state 132
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41
    var                            shift and go to state 95
    expr                           shift and go to state 83
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34

state 86

    (56) for_stmt -> FOR LPAREN . var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (58) var_assign -> . var ASSIGN expr
    (57) var -> . ID

    ID              shift and go to state 30

    var_assign                     shift and go to state 133
    var                            shift and go to state 134

state 87

    (54) print_stmt -> PRINT LPAREN . expr RPAREN
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (57) var -> . ID
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    ID              shift and go to state 30
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

    expr                           shift and go to state 135
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    boolean_expr                   shift and go to state 20
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    var                            shift and go to state 97
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 88

    (76) num_factor -> PLUS num_factor .

    PLUS            reduce using rule 76 (num_factor -> PLUS num_factor .)
    MINUS           reduce using rule 76 (num_factor -> PLUS num_factor .)
    TIMES           reduce using rule 76 (num_factor -> PLUS num_factor .)
    DIVIDE          reduce using rule 76 (num_factor -> PLUS num_factor .)
    INT_DIVIDE      reduce using rule 76 (num_factor -> PLUS num_factor .)
    POWER           reduce using rule 76 (num_factor -> PLUS num_factor .)
    MODULO          reduce using rule 76 (num_factor -> PLUS num_factor .)
    SEMI            reduce using rule 76 (num_factor -> PLUS num_factor .)
    EQ              reduce using rule 76 (num_factor -> PLUS num_factor .)
    NE              reduce using rule 76 (num_factor -> PLUS num_factor .)
    LT              reduce using rule 76 (num_factor -> PLUS num_factor .)
    GT              reduce using rule 76 (num_factor -> PLUS num_factor .)
    LE              reduce using rule 76 (num_factor -> PLUS num_factor .)
    GE              reduce using rule 76 (num_factor -> PLUS num_factor .)
    RPAREN          reduce using rule 76 (num_factor -> PLUS num_factor .)
    AND             reduce using rule 76 (num_factor -> PLUS num_factor .)
    OR              reduce using rule 76 (num_factor -> PLUS num_factor .)
    TERNARY_Q       reduce using rule 76 (num_factor -> PLUS num_factor .)
    COMMA           reduce using rule 76 (num_factor -> PLUS num_factor .)
    TERNARY_C       reduce using rule 76 (num_factor -> PLUS num_factor .)


state 89

    (80) num_factor -> LPAREN . num_expr RPAREN
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (57) var -> . ID

    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 89
    ID              shift and go to state 30

    num_expr                       shift and go to state 136
    num_factor                     shift and go to state 34
    func_call                      shift and go to state 90
    var                            shift and go to state 91

state 90

    (81) num_factor -> func_call .

    PLUS            reduce using rule 81 (num_factor -> func_call .)
    MINUS           reduce using rule 81 (num_factor -> func_call .)
    TIMES           reduce using rule 81 (num_factor -> func_call .)
    DIVIDE          reduce using rule 81 (num_factor -> func_call .)
    INT_DIVIDE      reduce using rule 81 (num_factor -> func_call .)
    POWER           reduce using rule 81 (num_factor -> func_call .)
    MODULO          reduce using rule 81 (num_factor -> func_call .)
    SEMI            reduce using rule 81 (num_factor -> func_call .)
    EQ              reduce using rule 81 (num_factor -> func_call .)
    NE              reduce using rule 81 (num_factor -> func_call .)
    LT              reduce using rule 81 (num_factor -> func_call .)
    GT              reduce using rule 81 (num_factor -> func_call .)
    LE              reduce using rule 81 (num_factor -> func_call .)
    GE              reduce using rule 81 (num_factor -> func_call .)
    RPAREN          reduce using rule 81 (num_factor -> func_call .)
    AND             reduce using rule 81 (num_factor -> func_call .)
    OR              reduce using rule 81 (num_factor -> func_call .)
    TERNARY_Q       reduce using rule 81 (num_factor -> func_call .)
    COMMA           reduce using rule 81 (num_factor -> func_call .)
    TERNARY_C       reduce using rule 81 (num_factor -> func_call .)


state 91

    (82) num_factor -> var .
    (33) func_call -> var . LPAREN arguments_list RPAREN

    PLUS            reduce using rule 82 (num_factor -> var .)
    MINUS           reduce using rule 82 (num_factor -> var .)
    TIMES           reduce using rule 82 (num_factor -> var .)
    DIVIDE          reduce using rule 82 (num_factor -> var .)
    INT_DIVIDE      reduce using rule 82 (num_factor -> var .)
    POWER           reduce using rule 82 (num_factor -> var .)
    MODULO          reduce using rule 82 (num_factor -> var .)
    SEMI            reduce using rule 82 (num_factor -> var .)
    EQ              reduce using rule 82 (num_factor -> var .)
    NE              reduce using rule 82 (num_factor -> var .)
    LT              reduce using rule 82 (num_factor -> var .)
    GT              reduce using rule 82 (num_factor -> var .)
    LE              reduce using rule 82 (num_factor -> var .)
    GE              reduce using rule 82 (num_factor -> var .)
    RPAREN          reduce using rule 82 (num_factor -> var .)
    AND             reduce using rule 82 (num_factor -> var .)
    OR              reduce using rule 82 (num_factor -> var .)
    TERNARY_Q       reduce using rule 82 (num_factor -> var .)
    COMMA           reduce using rule 82 (num_factor -> var .)
    TERNARY_C       reduce using rule 82 (num_factor -> var .)
    LPAREN          shift and go to state 65


state 92

    (77) num_factor -> MINUS num_factor .

    PLUS            reduce using rule 77 (num_factor -> MINUS num_factor .)
    MINUS           reduce using rule 77 (num_factor -> MINUS num_factor .)
    TIMES           reduce using rule 77 (num_factor -> MINUS num_factor .)
    DIVIDE          reduce using rule 77 (num_factor -> MINUS num_factor .)
    INT_DIVIDE      reduce using rule 77 (num_factor -> MINUS num_factor .)
    POWER           reduce using rule 77 (num_factor -> MINUS num_factor .)
    MODULO          reduce using rule 77 (num_factor -> MINUS num_factor .)
    SEMI            reduce using rule 77 (num_factor -> MINUS num_factor .)
    EQ              reduce using rule 77 (num_factor -> MINUS num_factor .)
    NE              reduce using rule 77 (num_factor -> MINUS num_factor .)
    LT              reduce using rule 77 (num_factor -> MINUS num_factor .)
    GT              reduce using rule 77 (num_factor -> MINUS num_factor .)
    LE              reduce using rule 77 (num_factor -> MINUS num_factor .)
    GE              reduce using rule 77 (num_factor -> MINUS num_factor .)
    RPAREN          reduce using rule 77 (num_factor -> MINUS num_factor .)
    AND             reduce using rule 77 (num_factor -> MINUS num_factor .)
    OR              reduce using rule 77 (num_factor -> MINUS num_factor .)
    TERNARY_Q       reduce using rule 77 (num_factor -> MINUS num_factor .)
    COMMA           reduce using rule 77 (num_factor -> MINUS num_factor .)
    TERNARY_C       reduce using rule 77 (num_factor -> MINUS num_factor .)


state 93

    (96) boolean_expr -> NOT boolean_expr .
    (94) boolean_expr -> boolean_expr . AND boolean_expr
    (95) boolean_expr -> boolean_expr . OR boolean_expr
    (71) expr -> boolean_expr .
    (109) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for EQ resolved using rule 71 (expr -> boolean_expr .)
  ! reduce/reduce conflict for NE resolved using rule 71 (expr -> boolean_expr .)
  ! reduce/reduce conflict for LT resolved using rule 71 (expr -> boolean_expr .)
  ! reduce/reduce conflict for GT resolved using rule 71 (expr -> boolean_expr .)
  ! reduce/reduce conflict for LE resolved using rule 71 (expr -> boolean_expr .)
  ! reduce/reduce conflict for GE resolved using rule 71 (expr -> boolean_expr .)
  ! shift/reduce conflict for TERNARY_Q resolved as shift
    SEMI            reduce using rule 96 (boolean_expr -> NOT boolean_expr .)
    RPAREN          reduce using rule 96 (boolean_expr -> NOT boolean_expr .)
    COMMA           reduce using rule 96 (boolean_expr -> NOT boolean_expr .)
    TERNARY_C       reduce using rule 96 (boolean_expr -> NOT boolean_expr .)
    AND             shift and go to state 75
    OR              shift and go to state 76
    EQ              reduce using rule 71 (expr -> boolean_expr .)
    NE              reduce using rule 71 (expr -> boolean_expr .)
    LT              reduce using rule 71 (expr -> boolean_expr .)
    GT              reduce using rule 71 (expr -> boolean_expr .)
    LE              reduce using rule 71 (expr -> boolean_expr .)
    GE              reduce using rule 71 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 77

  ! AND             [ reduce using rule 96 (boolean_expr -> NOT boolean_expr .) ]
  ! OR              [ reduce using rule 96 (boolean_expr -> NOT boolean_expr .) ]
  ! TERNARY_Q       [ reduce using rule 96 (boolean_expr -> NOT boolean_expr .) ]
  ! EQ              [ reduce using rule 96 (boolean_expr -> NOT boolean_expr .) ]
  ! NE              [ reduce using rule 96 (boolean_expr -> NOT boolean_expr .) ]
  ! LT              [ reduce using rule 96 (boolean_expr -> NOT boolean_expr .) ]
  ! GT              [ reduce using rule 96 (boolean_expr -> NOT boolean_expr .) ]
  ! LE              [ reduce using rule 96 (boolean_expr -> NOT boolean_expr .) ]
  ! GE              [ reduce using rule 96 (boolean_expr -> NOT boolean_expr .) ]


state 94

    (98) boolean_factor -> LPAREN . boolean_expr RPAREN
    (80) num_factor -> LPAREN . num_expr RPAREN
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr
    (57) var -> . ID
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr

    NOT             shift and go to state 35
    LPAREN          shift and go to state 94
    BOOLEAN         shift and go to state 40
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NULL            shift and go to state 37

    boolean_expr                   shift and go to state 80
    num_expr                       shift and go to state 79
    boolean_factor                 shift and go to state 36
    num_factor                     shift and go to state 34
    comparison                     shift and go to state 41
    var                            shift and go to state 137
    func_call                      shift and go to state 81
    expr                           shift and go to state 83
    string_expr                    shift and go to state 19
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22

state 95

    (101) boolean_factor -> var .
    (74) expr -> var .
    (93) string_expr -> var .
    (33) func_call -> var . LPAREN arguments_list RPAREN
    (82) num_factor -> var .

  ! reduce/reduce conflict for EQ resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 74 (expr -> var .)
    AND             reduce using rule 101 (boolean_factor -> var .)
    OR              reduce using rule 101 (boolean_factor -> var .)
    TERNARY_Q       reduce using rule 101 (boolean_factor -> var .)
    SEMI            reduce using rule 101 (boolean_factor -> var .)
    RPAREN          reduce using rule 101 (boolean_factor -> var .)
    COMMA           reduce using rule 101 (boolean_factor -> var .)
    TERNARY_C       reduce using rule 101 (boolean_factor -> var .)
    EQ              reduce using rule 74 (expr -> var .)
    NE              reduce using rule 74 (expr -> var .)
    LT              reduce using rule 74 (expr -> var .)
    GT              reduce using rule 74 (expr -> var .)
    LE              reduce using rule 74 (expr -> var .)
    GE              reduce using rule 74 (expr -> var .)
    CONCAT          reduce using rule 93 (string_expr -> var .)
    LPAREN          shift and go to state 65
    PLUS            reduce using rule 82 (num_factor -> var .)
    MINUS           reduce using rule 82 (num_factor -> var .)
    TIMES           reduce using rule 82 (num_factor -> var .)
    DIVIDE          reduce using rule 82 (num_factor -> var .)
    INT_DIVIDE      reduce using rule 82 (num_factor -> var .)
    POWER           reduce using rule 82 (num_factor -> var .)
    MODULO          reduce using rule 82 (num_factor -> var .)

  ! EQ              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! NE              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! LT              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! GT              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! LE              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! GE              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! EQ              [ reduce using rule 93 (string_expr -> var .) ]
  ! NE              [ reduce using rule 93 (string_expr -> var .) ]
  ! LT              [ reduce using rule 93 (string_expr -> var .) ]
  ! GT              [ reduce using rule 93 (string_expr -> var .) ]
  ! LE              [ reduce using rule 93 (string_expr -> var .) ]
  ! GE              [ reduce using rule 93 (string_expr -> var .) ]
  ! EQ              [ reduce using rule 82 (num_factor -> var .) ]
  ! NE              [ reduce using rule 82 (num_factor -> var .) ]
  ! LT              [ reduce using rule 82 (num_factor -> var .) ]
  ! GT              [ reduce using rule 82 (num_factor -> var .) ]
  ! LE              [ reduce using rule 82 (num_factor -> var .) ]
  ! GE              [ reduce using rule 82 (num_factor -> var .) ]


state 96

    (102) comparison -> expr EQ expr .
    (102) comparison -> expr . EQ expr
    (103) comparison -> expr . NE expr
    (104) comparison -> expr . LT expr
    (105) comparison -> expr . GT expr
    (106) comparison -> expr . LE expr
    (107) comparison -> expr . GE expr

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    AND             reduce using rule 102 (comparison -> expr EQ expr .)
    OR              reduce using rule 102 (comparison -> expr EQ expr .)
    TERNARY_Q       reduce using rule 102 (comparison -> expr EQ expr .)
    SEMI            reduce using rule 102 (comparison -> expr EQ expr .)
    RPAREN          reduce using rule 102 (comparison -> expr EQ expr .)
    COMMA           reduce using rule 102 (comparison -> expr EQ expr .)
    TERNARY_C       reduce using rule 102 (comparison -> expr EQ expr .)
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LT              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53

  ! EQ              [ reduce using rule 102 (comparison -> expr EQ expr .) ]
  ! NE              [ reduce using rule 102 (comparison -> expr EQ expr .) ]
  ! LT              [ reduce using rule 102 (comparison -> expr EQ expr .) ]
  ! GT              [ reduce using rule 102 (comparison -> expr EQ expr .) ]
  ! LE              [ reduce using rule 102 (comparison -> expr EQ expr .) ]
  ! GE              [ reduce using rule 102 (comparison -> expr EQ expr .) ]


state 97

    (74) expr -> var .
    (93) string_expr -> var .
    (33) func_call -> var . LPAREN arguments_list RPAREN
    (82) num_factor -> var .
    (101) boolean_factor -> var .

  ! reduce/reduce conflict for EQ resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for AND resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for OR resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for TERNARY_Q resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for SEMI resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for RPAREN resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for COMMA resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for TERNARY_C resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for AND resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for OR resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for TERNARY_Q resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for SEMI resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for RPAREN resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for COMMA resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for TERNARY_C resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for AND resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for OR resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for TERNARY_Q resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for SEMI resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for RPAREN resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for COMMA resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for TERNARY_C resolved using rule 74 (expr -> var .)
    EQ              reduce using rule 74 (expr -> var .)
    NE              reduce using rule 74 (expr -> var .)
    LT              reduce using rule 74 (expr -> var .)
    GT              reduce using rule 74 (expr -> var .)
    LE              reduce using rule 74 (expr -> var .)
    GE              reduce using rule 74 (expr -> var .)
    AND             reduce using rule 74 (expr -> var .)
    OR              reduce using rule 74 (expr -> var .)
    TERNARY_Q       reduce using rule 74 (expr -> var .)
    SEMI            reduce using rule 74 (expr -> var .)
    RPAREN          reduce using rule 74 (expr -> var .)
    COMMA           reduce using rule 74 (expr -> var .)
    TERNARY_C       reduce using rule 74 (expr -> var .)
    CONCAT          reduce using rule 93 (string_expr -> var .)
    LPAREN          shift and go to state 65
    PLUS            reduce using rule 82 (num_factor -> var .)
    MINUS           reduce using rule 82 (num_factor -> var .)
    TIMES           reduce using rule 82 (num_factor -> var .)
    DIVIDE          reduce using rule 82 (num_factor -> var .)
    INT_DIVIDE      reduce using rule 82 (num_factor -> var .)
    POWER           reduce using rule 82 (num_factor -> var .)
    MODULO          reduce using rule 82 (num_factor -> var .)

  ! EQ              [ reduce using rule 93 (string_expr -> var .) ]
  ! NE              [ reduce using rule 93 (string_expr -> var .) ]
  ! LT              [ reduce using rule 93 (string_expr -> var .) ]
  ! GT              [ reduce using rule 93 (string_expr -> var .) ]
  ! LE              [ reduce using rule 93 (string_expr -> var .) ]
  ! GE              [ reduce using rule 93 (string_expr -> var .) ]
  ! AND             [ reduce using rule 93 (string_expr -> var .) ]
  ! OR              [ reduce using rule 93 (string_expr -> var .) ]
  ! TERNARY_Q       [ reduce using rule 93 (string_expr -> var .) ]
  ! SEMI            [ reduce using rule 93 (string_expr -> var .) ]
  ! RPAREN          [ reduce using rule 93 (string_expr -> var .) ]
  ! COMMA           [ reduce using rule 93 (string_expr -> var .) ]
  ! TERNARY_C       [ reduce using rule 93 (string_expr -> var .) ]
  ! EQ              [ reduce using rule 82 (num_factor -> var .) ]
  ! NE              [ reduce using rule 82 (num_factor -> var .) ]
  ! LT              [ reduce using rule 82 (num_factor -> var .) ]
  ! GT              [ reduce using rule 82 (num_factor -> var .) ]
  ! LE              [ reduce using rule 82 (num_factor -> var .) ]
  ! GE              [ reduce using rule 82 (num_factor -> var .) ]
  ! AND             [ reduce using rule 82 (num_factor -> var .) ]
  ! OR              [ reduce using rule 82 (num_factor -> var .) ]
  ! TERNARY_Q       [ reduce using rule 82 (num_factor -> var .) ]
  ! SEMI            [ reduce using rule 82 (num_factor -> var .) ]
  ! RPAREN          [ reduce using rule 82 (num_factor -> var .) ]
  ! COMMA           [ reduce using rule 82 (num_factor -> var .) ]
  ! TERNARY_C       [ reduce using rule 82 (num_factor -> var .) ]
  ! EQ              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! NE              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! LT              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! GT              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! LE              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! GE              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! AND             [ reduce using rule 101 (boolean_factor -> var .) ]
  ! OR              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! TERNARY_Q       [ reduce using rule 101 (boolean_factor -> var .) ]
  ! SEMI            [ reduce using rule 101 (boolean_factor -> var .) ]
  ! RPAREN          [ reduce using rule 101 (boolean_factor -> var .) ]
  ! COMMA           [ reduce using rule 101 (boolean_factor -> var .) ]
  ! TERNARY_C       [ reduce using rule 101 (boolean_factor -> var .) ]


state 98

    (103) comparison -> expr NE expr .
    (102) comparison -> expr . EQ expr
    (103) comparison -> expr . NE expr
    (104) comparison -> expr . LT expr
    (105) comparison -> expr . GT expr
    (106) comparison -> expr . LE expr
    (107) comparison -> expr . GE expr

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    AND             reduce using rule 103 (comparison -> expr NE expr .)
    OR              reduce using rule 103 (comparison -> expr NE expr .)
    TERNARY_Q       reduce using rule 103 (comparison -> expr NE expr .)
    SEMI            reduce using rule 103 (comparison -> expr NE expr .)
    RPAREN          reduce using rule 103 (comparison -> expr NE expr .)
    COMMA           reduce using rule 103 (comparison -> expr NE expr .)
    TERNARY_C       reduce using rule 103 (comparison -> expr NE expr .)
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LT              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53

  ! EQ              [ reduce using rule 103 (comparison -> expr NE expr .) ]
  ! NE              [ reduce using rule 103 (comparison -> expr NE expr .) ]
  ! LT              [ reduce using rule 103 (comparison -> expr NE expr .) ]
  ! GT              [ reduce using rule 103 (comparison -> expr NE expr .) ]
  ! LE              [ reduce using rule 103 (comparison -> expr NE expr .) ]
  ! GE              [ reduce using rule 103 (comparison -> expr NE expr .) ]


state 99

    (104) comparison -> expr LT expr .
    (102) comparison -> expr . EQ expr
    (103) comparison -> expr . NE expr
    (104) comparison -> expr . LT expr
    (105) comparison -> expr . GT expr
    (106) comparison -> expr . LE expr
    (107) comparison -> expr . GE expr

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    AND             reduce using rule 104 (comparison -> expr LT expr .)
    OR              reduce using rule 104 (comparison -> expr LT expr .)
    TERNARY_Q       reduce using rule 104 (comparison -> expr LT expr .)
    SEMI            reduce using rule 104 (comparison -> expr LT expr .)
    RPAREN          reduce using rule 104 (comparison -> expr LT expr .)
    COMMA           reduce using rule 104 (comparison -> expr LT expr .)
    TERNARY_C       reduce using rule 104 (comparison -> expr LT expr .)
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LT              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53

  ! EQ              [ reduce using rule 104 (comparison -> expr LT expr .) ]
  ! NE              [ reduce using rule 104 (comparison -> expr LT expr .) ]
  ! LT              [ reduce using rule 104 (comparison -> expr LT expr .) ]
  ! GT              [ reduce using rule 104 (comparison -> expr LT expr .) ]
  ! LE              [ reduce using rule 104 (comparison -> expr LT expr .) ]
  ! GE              [ reduce using rule 104 (comparison -> expr LT expr .) ]


state 100

    (105) comparison -> expr GT expr .
    (102) comparison -> expr . EQ expr
    (103) comparison -> expr . NE expr
    (104) comparison -> expr . LT expr
    (105) comparison -> expr . GT expr
    (106) comparison -> expr . LE expr
    (107) comparison -> expr . GE expr

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    AND             reduce using rule 105 (comparison -> expr GT expr .)
    OR              reduce using rule 105 (comparison -> expr GT expr .)
    TERNARY_Q       reduce using rule 105 (comparison -> expr GT expr .)
    SEMI            reduce using rule 105 (comparison -> expr GT expr .)
    RPAREN          reduce using rule 105 (comparison -> expr GT expr .)
    COMMA           reduce using rule 105 (comparison -> expr GT expr .)
    TERNARY_C       reduce using rule 105 (comparison -> expr GT expr .)
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LT              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53

  ! EQ              [ reduce using rule 105 (comparison -> expr GT expr .) ]
  ! NE              [ reduce using rule 105 (comparison -> expr GT expr .) ]
  ! LT              [ reduce using rule 105 (comparison -> expr GT expr .) ]
  ! GT              [ reduce using rule 105 (comparison -> expr GT expr .) ]
  ! LE              [ reduce using rule 105 (comparison -> expr GT expr .) ]
  ! GE              [ reduce using rule 105 (comparison -> expr GT expr .) ]


state 101

    (106) comparison -> expr LE expr .
    (102) comparison -> expr . EQ expr
    (103) comparison -> expr . NE expr
    (104) comparison -> expr . LT expr
    (105) comparison -> expr . GT expr
    (106) comparison -> expr . LE expr
    (107) comparison -> expr . GE expr

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    AND             reduce using rule 106 (comparison -> expr LE expr .)
    OR              reduce using rule 106 (comparison -> expr LE expr .)
    TERNARY_Q       reduce using rule 106 (comparison -> expr LE expr .)
    SEMI            reduce using rule 106 (comparison -> expr LE expr .)
    RPAREN          reduce using rule 106 (comparison -> expr LE expr .)
    COMMA           reduce using rule 106 (comparison -> expr LE expr .)
    TERNARY_C       reduce using rule 106 (comparison -> expr LE expr .)
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LT              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53

  ! EQ              [ reduce using rule 106 (comparison -> expr LE expr .) ]
  ! NE              [ reduce using rule 106 (comparison -> expr LE expr .) ]
  ! LT              [ reduce using rule 106 (comparison -> expr LE expr .) ]
  ! GT              [ reduce using rule 106 (comparison -> expr LE expr .) ]
  ! LE              [ reduce using rule 106 (comparison -> expr LE expr .) ]
  ! GE              [ reduce using rule 106 (comparison -> expr LE expr .) ]


state 102

    (107) comparison -> expr GE expr .
    (102) comparison -> expr . EQ expr
    (103) comparison -> expr . NE expr
    (104) comparison -> expr . LT expr
    (105) comparison -> expr . GT expr
    (106) comparison -> expr . LE expr
    (107) comparison -> expr . GE expr

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    AND             reduce using rule 107 (comparison -> expr GE expr .)
    OR              reduce using rule 107 (comparison -> expr GE expr .)
    TERNARY_Q       reduce using rule 107 (comparison -> expr GE expr .)
    SEMI            reduce using rule 107 (comparison -> expr GE expr .)
    RPAREN          reduce using rule 107 (comparison -> expr GE expr .)
    COMMA           reduce using rule 107 (comparison -> expr GE expr .)
    TERNARY_C       reduce using rule 107 (comparison -> expr GE expr .)
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LT              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53

  ! EQ              [ reduce using rule 107 (comparison -> expr GE expr .) ]
  ! NE              [ reduce using rule 107 (comparison -> expr GE expr .) ]
  ! LT              [ reduce using rule 107 (comparison -> expr GE expr .) ]
  ! GT              [ reduce using rule 107 (comparison -> expr GE expr .) ]
  ! LE              [ reduce using rule 107 (comparison -> expr GE expr .) ]
  ! GE              [ reduce using rule 107 (comparison -> expr GE expr .) ]


state 103

    (58) var_assign -> var ASSIGN expr .
    (102) comparison -> expr . EQ expr
    (103) comparison -> expr . NE expr
    (104) comparison -> expr . LT expr
    (105) comparison -> expr . GT expr
    (106) comparison -> expr . LE expr
    (107) comparison -> expr . GE expr

    SEMI            reduce using rule 58 (var_assign -> var ASSIGN expr .)
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LT              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53


state 104

    (60) var_compound_assign -> var PLUS_ASSIGN num_expr .
    (83) num_expr -> num_expr . PLUS num_expr
    (84) num_expr -> num_expr . MINUS num_expr
    (85) num_expr -> num_expr . TIMES num_expr
    (86) num_expr -> num_expr . DIVIDE num_expr
    (87) num_expr -> num_expr . INT_DIVIDE num_expr
    (88) num_expr -> num_expr . POWER num_expr
    (89) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 60 (var_compound_assign -> var PLUS_ASSIGN num_expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    INT_DIVIDE      shift and go to state 71
    POWER           shift and go to state 72
    MODULO          shift and go to state 73


state 105

    (61) var_compound_assign -> var MINUS_ASSIGN num_expr .
    (83) num_expr -> num_expr . PLUS num_expr
    (84) num_expr -> num_expr . MINUS num_expr
    (85) num_expr -> num_expr . TIMES num_expr
    (86) num_expr -> num_expr . DIVIDE num_expr
    (87) num_expr -> num_expr . INT_DIVIDE num_expr
    (88) num_expr -> num_expr . POWER num_expr
    (89) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 61 (var_compound_assign -> var MINUS_ASSIGN num_expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    INT_DIVIDE      shift and go to state 71
    POWER           shift and go to state 72
    MODULO          shift and go to state 73


state 106

    (62) var_compound_assign -> var TIMES_ASSIGN num_expr .
    (83) num_expr -> num_expr . PLUS num_expr
    (84) num_expr -> num_expr . MINUS num_expr
    (85) num_expr -> num_expr . TIMES num_expr
    (86) num_expr -> num_expr . DIVIDE num_expr
    (87) num_expr -> num_expr . INT_DIVIDE num_expr
    (88) num_expr -> num_expr . POWER num_expr
    (89) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 62 (var_compound_assign -> var TIMES_ASSIGN num_expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    INT_DIVIDE      shift and go to state 71
    POWER           shift and go to state 72
    MODULO          shift and go to state 73


state 107

    (63) var_compound_assign -> var DIVIDE_ASSIGN num_expr .
    (83) num_expr -> num_expr . PLUS num_expr
    (84) num_expr -> num_expr . MINUS num_expr
    (85) num_expr -> num_expr . TIMES num_expr
    (86) num_expr -> num_expr . DIVIDE num_expr
    (87) num_expr -> num_expr . INT_DIVIDE num_expr
    (88) num_expr -> num_expr . POWER num_expr
    (89) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 63 (var_compound_assign -> var DIVIDE_ASSIGN num_expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    INT_DIVIDE      shift and go to state 71
    POWER           shift and go to state 72
    MODULO          shift and go to state 73


state 108

    (64) var_compound_assign -> var POWER_ASSIGN num_expr .
    (83) num_expr -> num_expr . PLUS num_expr
    (84) num_expr -> num_expr . MINUS num_expr
    (85) num_expr -> num_expr . TIMES num_expr
    (86) num_expr -> num_expr . DIVIDE num_expr
    (87) num_expr -> num_expr . INT_DIVIDE num_expr
    (88) num_expr -> num_expr . POWER num_expr
    (89) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 64 (var_compound_assign -> var POWER_ASSIGN num_expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    INT_DIVIDE      shift and go to state 71
    POWER           shift and go to state 72
    MODULO          shift and go to state 73


state 109

    (65) var_compound_assign -> var MODULO_ASSIGN num_expr .
    (83) num_expr -> num_expr . PLUS num_expr
    (84) num_expr -> num_expr . MINUS num_expr
    (85) num_expr -> num_expr . TIMES num_expr
    (86) num_expr -> num_expr . DIVIDE num_expr
    (87) num_expr -> num_expr . INT_DIVIDE num_expr
    (88) num_expr -> num_expr . POWER num_expr
    (89) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 65 (var_compound_assign -> var MODULO_ASSIGN num_expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    INT_DIVIDE      shift and go to state 71
    POWER           shift and go to state 72
    MODULO          shift and go to state 73


state 110

    (66) var_compound_assign -> var INT_DIVIDE_ASSIGN num_expr .
    (83) num_expr -> num_expr . PLUS num_expr
    (84) num_expr -> num_expr . MINUS num_expr
    (85) num_expr -> num_expr . TIMES num_expr
    (86) num_expr -> num_expr . DIVIDE num_expr
    (87) num_expr -> num_expr . INT_DIVIDE num_expr
    (88) num_expr -> num_expr . POWER num_expr
    (89) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 66 (var_compound_assign -> var INT_DIVIDE_ASSIGN num_expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    INT_DIVIDE      shift and go to state 71
    POWER           shift and go to state 72
    MODULO          shift and go to state 73


state 111

    (33) func_call -> var LPAREN arguments_list . RPAREN

    RPAREN          shift and go to state 138


state 112

    (34) arguments_list -> non_empty_arguments_list .

    RPAREN          reduce using rule 34 (arguments_list -> non_empty_arguments_list .)


state 113

    (35) arguments_list -> empty .

    RPAREN          reduce using rule 35 (arguments_list -> empty .)


state 114

    (36) non_empty_arguments_list -> expr . COMMA non_empty_arguments_list
    (37) non_empty_arguments_list -> expr .
    (102) comparison -> expr . EQ expr
    (103) comparison -> expr . NE expr
    (104) comparison -> expr . LT expr
    (105) comparison -> expr . GT expr
    (106) comparison -> expr . LE expr
    (107) comparison -> expr . GE expr

    COMMA           shift and go to state 139
    RPAREN          reduce using rule 37 (non_empty_arguments_list -> expr .)
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LT              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53


state 115

    (59) final_assign -> FINAL var ASSIGN . expr
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (57) var -> . ID
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    ID              shift and go to state 30
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

    var                            shift and go to state 97
    expr                           shift and go to state 140
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    boolean_expr                   shift and go to state 20
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 116

    (83) num_expr -> num_expr PLUS num_expr .
    (83) num_expr -> num_expr . PLUS num_expr
    (84) num_expr -> num_expr . MINUS num_expr
    (85) num_expr -> num_expr . TIMES num_expr
    (86) num_expr -> num_expr . DIVIDE num_expr
    (87) num_expr -> num_expr . INT_DIVIDE num_expr
    (88) num_expr -> num_expr . POWER num_expr
    (89) num_expr -> num_expr . MODULO num_expr

    PLUS            reduce using rule 83 (num_expr -> num_expr PLUS num_expr .)
    MINUS           reduce using rule 83 (num_expr -> num_expr PLUS num_expr .)
    MODULO          reduce using rule 83 (num_expr -> num_expr PLUS num_expr .)
    SEMI            reduce using rule 83 (num_expr -> num_expr PLUS num_expr .)
    EQ              reduce using rule 83 (num_expr -> num_expr PLUS num_expr .)
    NE              reduce using rule 83 (num_expr -> num_expr PLUS num_expr .)
    LT              reduce using rule 83 (num_expr -> num_expr PLUS num_expr .)
    GT              reduce using rule 83 (num_expr -> num_expr PLUS num_expr .)
    LE              reduce using rule 83 (num_expr -> num_expr PLUS num_expr .)
    GE              reduce using rule 83 (num_expr -> num_expr PLUS num_expr .)
    RPAREN          reduce using rule 83 (num_expr -> num_expr PLUS num_expr .)
    AND             reduce using rule 83 (num_expr -> num_expr PLUS num_expr .)
    OR              reduce using rule 83 (num_expr -> num_expr PLUS num_expr .)
    TERNARY_Q       reduce using rule 83 (num_expr -> num_expr PLUS num_expr .)
    COMMA           reduce using rule 83 (num_expr -> num_expr PLUS num_expr .)
    TERNARY_C       reduce using rule 83 (num_expr -> num_expr PLUS num_expr .)
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    INT_DIVIDE      shift and go to state 71
    POWER           shift and go to state 72

  ! TIMES           [ reduce using rule 83 (num_expr -> num_expr PLUS num_expr .) ]
  ! DIVIDE          [ reduce using rule 83 (num_expr -> num_expr PLUS num_expr .) ]
  ! INT_DIVIDE      [ reduce using rule 83 (num_expr -> num_expr PLUS num_expr .) ]
  ! POWER           [ reduce using rule 83 (num_expr -> num_expr PLUS num_expr .) ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! MODULO          [ shift and go to state 73 ]


state 117

    (84) num_expr -> num_expr MINUS num_expr .
    (83) num_expr -> num_expr . PLUS num_expr
    (84) num_expr -> num_expr . MINUS num_expr
    (85) num_expr -> num_expr . TIMES num_expr
    (86) num_expr -> num_expr . DIVIDE num_expr
    (87) num_expr -> num_expr . INT_DIVIDE num_expr
    (88) num_expr -> num_expr . POWER num_expr
    (89) num_expr -> num_expr . MODULO num_expr

    PLUS            reduce using rule 84 (num_expr -> num_expr MINUS num_expr .)
    MINUS           reduce using rule 84 (num_expr -> num_expr MINUS num_expr .)
    MODULO          reduce using rule 84 (num_expr -> num_expr MINUS num_expr .)
    SEMI            reduce using rule 84 (num_expr -> num_expr MINUS num_expr .)
    EQ              reduce using rule 84 (num_expr -> num_expr MINUS num_expr .)
    NE              reduce using rule 84 (num_expr -> num_expr MINUS num_expr .)
    LT              reduce using rule 84 (num_expr -> num_expr MINUS num_expr .)
    GT              reduce using rule 84 (num_expr -> num_expr MINUS num_expr .)
    LE              reduce using rule 84 (num_expr -> num_expr MINUS num_expr .)
    GE              reduce using rule 84 (num_expr -> num_expr MINUS num_expr .)
    RPAREN          reduce using rule 84 (num_expr -> num_expr MINUS num_expr .)
    AND             reduce using rule 84 (num_expr -> num_expr MINUS num_expr .)
    OR              reduce using rule 84 (num_expr -> num_expr MINUS num_expr .)
    TERNARY_Q       reduce using rule 84 (num_expr -> num_expr MINUS num_expr .)
    COMMA           reduce using rule 84 (num_expr -> num_expr MINUS num_expr .)
    TERNARY_C       reduce using rule 84 (num_expr -> num_expr MINUS num_expr .)
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    INT_DIVIDE      shift and go to state 71
    POWER           shift and go to state 72

  ! TIMES           [ reduce using rule 84 (num_expr -> num_expr MINUS num_expr .) ]
  ! DIVIDE          [ reduce using rule 84 (num_expr -> num_expr MINUS num_expr .) ]
  ! INT_DIVIDE      [ reduce using rule 84 (num_expr -> num_expr MINUS num_expr .) ]
  ! POWER           [ reduce using rule 84 (num_expr -> num_expr MINUS num_expr .) ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! MODULO          [ shift and go to state 73 ]


state 118

    (85) num_expr -> num_expr TIMES num_expr .
    (83) num_expr -> num_expr . PLUS num_expr
    (84) num_expr -> num_expr . MINUS num_expr
    (85) num_expr -> num_expr . TIMES num_expr
    (86) num_expr -> num_expr . DIVIDE num_expr
    (87) num_expr -> num_expr . INT_DIVIDE num_expr
    (88) num_expr -> num_expr . POWER num_expr
    (89) num_expr -> num_expr . MODULO num_expr

    PLUS            reduce using rule 85 (num_expr -> num_expr TIMES num_expr .)
    MINUS           reduce using rule 85 (num_expr -> num_expr TIMES num_expr .)
    TIMES           reduce using rule 85 (num_expr -> num_expr TIMES num_expr .)
    DIVIDE          reduce using rule 85 (num_expr -> num_expr TIMES num_expr .)
    INT_DIVIDE      reduce using rule 85 (num_expr -> num_expr TIMES num_expr .)
    MODULO          reduce using rule 85 (num_expr -> num_expr TIMES num_expr .)
    SEMI            reduce using rule 85 (num_expr -> num_expr TIMES num_expr .)
    EQ              reduce using rule 85 (num_expr -> num_expr TIMES num_expr .)
    NE              reduce using rule 85 (num_expr -> num_expr TIMES num_expr .)
    LT              reduce using rule 85 (num_expr -> num_expr TIMES num_expr .)
    GT              reduce using rule 85 (num_expr -> num_expr TIMES num_expr .)
    LE              reduce using rule 85 (num_expr -> num_expr TIMES num_expr .)
    GE              reduce using rule 85 (num_expr -> num_expr TIMES num_expr .)
    RPAREN          reduce using rule 85 (num_expr -> num_expr TIMES num_expr .)
    AND             reduce using rule 85 (num_expr -> num_expr TIMES num_expr .)
    OR              reduce using rule 85 (num_expr -> num_expr TIMES num_expr .)
    TERNARY_Q       reduce using rule 85 (num_expr -> num_expr TIMES num_expr .)
    COMMA           reduce using rule 85 (num_expr -> num_expr TIMES num_expr .)
    TERNARY_C       reduce using rule 85 (num_expr -> num_expr TIMES num_expr .)
    POWER           shift and go to state 72

  ! POWER           [ reduce using rule 85 (num_expr -> num_expr TIMES num_expr .) ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! TIMES           [ shift and go to state 69 ]
  ! DIVIDE          [ shift and go to state 70 ]
  ! INT_DIVIDE      [ shift and go to state 71 ]
  ! MODULO          [ shift and go to state 73 ]


state 119

    (86) num_expr -> num_expr DIVIDE num_expr .
    (83) num_expr -> num_expr . PLUS num_expr
    (84) num_expr -> num_expr . MINUS num_expr
    (85) num_expr -> num_expr . TIMES num_expr
    (86) num_expr -> num_expr . DIVIDE num_expr
    (87) num_expr -> num_expr . INT_DIVIDE num_expr
    (88) num_expr -> num_expr . POWER num_expr
    (89) num_expr -> num_expr . MODULO num_expr

    PLUS            reduce using rule 86 (num_expr -> num_expr DIVIDE num_expr .)
    MINUS           reduce using rule 86 (num_expr -> num_expr DIVIDE num_expr .)
    TIMES           reduce using rule 86 (num_expr -> num_expr DIVIDE num_expr .)
    DIVIDE          reduce using rule 86 (num_expr -> num_expr DIVIDE num_expr .)
    INT_DIVIDE      reduce using rule 86 (num_expr -> num_expr DIVIDE num_expr .)
    MODULO          reduce using rule 86 (num_expr -> num_expr DIVIDE num_expr .)
    SEMI            reduce using rule 86 (num_expr -> num_expr DIVIDE num_expr .)
    EQ              reduce using rule 86 (num_expr -> num_expr DIVIDE num_expr .)
    NE              reduce using rule 86 (num_expr -> num_expr DIVIDE num_expr .)
    LT              reduce using rule 86 (num_expr -> num_expr DIVIDE num_expr .)
    GT              reduce using rule 86 (num_expr -> num_expr DIVIDE num_expr .)
    LE              reduce using rule 86 (num_expr -> num_expr DIVIDE num_expr .)
    GE              reduce using rule 86 (num_expr -> num_expr DIVIDE num_expr .)
    RPAREN          reduce using rule 86 (num_expr -> num_expr DIVIDE num_expr .)
    AND             reduce using rule 86 (num_expr -> num_expr DIVIDE num_expr .)
    OR              reduce using rule 86 (num_expr -> num_expr DIVIDE num_expr .)
    TERNARY_Q       reduce using rule 86 (num_expr -> num_expr DIVIDE num_expr .)
    COMMA           reduce using rule 86 (num_expr -> num_expr DIVIDE num_expr .)
    TERNARY_C       reduce using rule 86 (num_expr -> num_expr DIVIDE num_expr .)
    POWER           shift and go to state 72

  ! POWER           [ reduce using rule 86 (num_expr -> num_expr DIVIDE num_expr .) ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! TIMES           [ shift and go to state 69 ]
  ! DIVIDE          [ shift and go to state 70 ]
  ! INT_DIVIDE      [ shift and go to state 71 ]
  ! MODULO          [ shift and go to state 73 ]


state 120

    (87) num_expr -> num_expr INT_DIVIDE num_expr .
    (83) num_expr -> num_expr . PLUS num_expr
    (84) num_expr -> num_expr . MINUS num_expr
    (85) num_expr -> num_expr . TIMES num_expr
    (86) num_expr -> num_expr . DIVIDE num_expr
    (87) num_expr -> num_expr . INT_DIVIDE num_expr
    (88) num_expr -> num_expr . POWER num_expr
    (89) num_expr -> num_expr . MODULO num_expr

    PLUS            reduce using rule 87 (num_expr -> num_expr INT_DIVIDE num_expr .)
    MINUS           reduce using rule 87 (num_expr -> num_expr INT_DIVIDE num_expr .)
    TIMES           reduce using rule 87 (num_expr -> num_expr INT_DIVIDE num_expr .)
    DIVIDE          reduce using rule 87 (num_expr -> num_expr INT_DIVIDE num_expr .)
    INT_DIVIDE      reduce using rule 87 (num_expr -> num_expr INT_DIVIDE num_expr .)
    MODULO          reduce using rule 87 (num_expr -> num_expr INT_DIVIDE num_expr .)
    SEMI            reduce using rule 87 (num_expr -> num_expr INT_DIVIDE num_expr .)
    EQ              reduce using rule 87 (num_expr -> num_expr INT_DIVIDE num_expr .)
    NE              reduce using rule 87 (num_expr -> num_expr INT_DIVIDE num_expr .)
    LT              reduce using rule 87 (num_expr -> num_expr INT_DIVIDE num_expr .)
    GT              reduce using rule 87 (num_expr -> num_expr INT_DIVIDE num_expr .)
    LE              reduce using rule 87 (num_expr -> num_expr INT_DIVIDE num_expr .)
    GE              reduce using rule 87 (num_expr -> num_expr INT_DIVIDE num_expr .)
    RPAREN          reduce using rule 87 (num_expr -> num_expr INT_DIVIDE num_expr .)
    AND             reduce using rule 87 (num_expr -> num_expr INT_DIVIDE num_expr .)
    OR              reduce using rule 87 (num_expr -> num_expr INT_DIVIDE num_expr .)
    TERNARY_Q       reduce using rule 87 (num_expr -> num_expr INT_DIVIDE num_expr .)
    COMMA           reduce using rule 87 (num_expr -> num_expr INT_DIVIDE num_expr .)
    TERNARY_C       reduce using rule 87 (num_expr -> num_expr INT_DIVIDE num_expr .)
    POWER           shift and go to state 72

  ! POWER           [ reduce using rule 87 (num_expr -> num_expr INT_DIVIDE num_expr .) ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! TIMES           [ shift and go to state 69 ]
  ! DIVIDE          [ shift and go to state 70 ]
  ! INT_DIVIDE      [ shift and go to state 71 ]
  ! MODULO          [ shift and go to state 73 ]


state 121

    (88) num_expr -> num_expr POWER num_expr .
    (83) num_expr -> num_expr . PLUS num_expr
    (84) num_expr -> num_expr . MINUS num_expr
    (85) num_expr -> num_expr . TIMES num_expr
    (86) num_expr -> num_expr . DIVIDE num_expr
    (87) num_expr -> num_expr . INT_DIVIDE num_expr
    (88) num_expr -> num_expr . POWER num_expr
    (89) num_expr -> num_expr . MODULO num_expr

    PLUS            reduce using rule 88 (num_expr -> num_expr POWER num_expr .)
    MINUS           reduce using rule 88 (num_expr -> num_expr POWER num_expr .)
    TIMES           reduce using rule 88 (num_expr -> num_expr POWER num_expr .)
    DIVIDE          reduce using rule 88 (num_expr -> num_expr POWER num_expr .)
    INT_DIVIDE      reduce using rule 88 (num_expr -> num_expr POWER num_expr .)
    MODULO          reduce using rule 88 (num_expr -> num_expr POWER num_expr .)
    SEMI            reduce using rule 88 (num_expr -> num_expr POWER num_expr .)
    EQ              reduce using rule 88 (num_expr -> num_expr POWER num_expr .)
    NE              reduce using rule 88 (num_expr -> num_expr POWER num_expr .)
    LT              reduce using rule 88 (num_expr -> num_expr POWER num_expr .)
    GT              reduce using rule 88 (num_expr -> num_expr POWER num_expr .)
    LE              reduce using rule 88 (num_expr -> num_expr POWER num_expr .)
    GE              reduce using rule 88 (num_expr -> num_expr POWER num_expr .)
    RPAREN          reduce using rule 88 (num_expr -> num_expr POWER num_expr .)
    AND             reduce using rule 88 (num_expr -> num_expr POWER num_expr .)
    OR              reduce using rule 88 (num_expr -> num_expr POWER num_expr .)
    TERNARY_Q       reduce using rule 88 (num_expr -> num_expr POWER num_expr .)
    COMMA           reduce using rule 88 (num_expr -> num_expr POWER num_expr .)
    TERNARY_C       reduce using rule 88 (num_expr -> num_expr POWER num_expr .)
    POWER           shift and go to state 72

  ! POWER           [ reduce using rule 88 (num_expr -> num_expr POWER num_expr .) ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! TIMES           [ shift and go to state 69 ]
  ! DIVIDE          [ shift and go to state 70 ]
  ! INT_DIVIDE      [ shift and go to state 71 ]
  ! MODULO          [ shift and go to state 73 ]


state 122

    (89) num_expr -> num_expr MODULO num_expr .
    (83) num_expr -> num_expr . PLUS num_expr
    (84) num_expr -> num_expr . MINUS num_expr
    (85) num_expr -> num_expr . TIMES num_expr
    (86) num_expr -> num_expr . DIVIDE num_expr
    (87) num_expr -> num_expr . INT_DIVIDE num_expr
    (88) num_expr -> num_expr . POWER num_expr
    (89) num_expr -> num_expr . MODULO num_expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for INT_DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    SEMI            reduce using rule 89 (num_expr -> num_expr MODULO num_expr .)
    EQ              reduce using rule 89 (num_expr -> num_expr MODULO num_expr .)
    NE              reduce using rule 89 (num_expr -> num_expr MODULO num_expr .)
    LT              reduce using rule 89 (num_expr -> num_expr MODULO num_expr .)
    GT              reduce using rule 89 (num_expr -> num_expr MODULO num_expr .)
    LE              reduce using rule 89 (num_expr -> num_expr MODULO num_expr .)
    GE              reduce using rule 89 (num_expr -> num_expr MODULO num_expr .)
    RPAREN          reduce using rule 89 (num_expr -> num_expr MODULO num_expr .)
    AND             reduce using rule 89 (num_expr -> num_expr MODULO num_expr .)
    OR              reduce using rule 89 (num_expr -> num_expr MODULO num_expr .)
    TERNARY_Q       reduce using rule 89 (num_expr -> num_expr MODULO num_expr .)
    COMMA           reduce using rule 89 (num_expr -> num_expr MODULO num_expr .)
    TERNARY_C       reduce using rule 89 (num_expr -> num_expr MODULO num_expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    INT_DIVIDE      shift and go to state 71
    POWER           shift and go to state 72
    MODULO          shift and go to state 73

  ! PLUS            [ reduce using rule 89 (num_expr -> num_expr MODULO num_expr .) ]
  ! MINUS           [ reduce using rule 89 (num_expr -> num_expr MODULO num_expr .) ]
  ! TIMES           [ reduce using rule 89 (num_expr -> num_expr MODULO num_expr .) ]
  ! DIVIDE          [ reduce using rule 89 (num_expr -> num_expr MODULO num_expr .) ]
  ! INT_DIVIDE      [ reduce using rule 89 (num_expr -> num_expr MODULO num_expr .) ]
  ! POWER           [ reduce using rule 89 (num_expr -> num_expr MODULO num_expr .) ]
  ! MODULO          [ reduce using rule 89 (num_expr -> num_expr MODULO num_expr .) ]


state 123

    (91) string_expr -> string_expr CONCAT string_expr .
    (91) string_expr -> string_expr . CONCAT string_expr

  ! shift/reduce conflict for CONCAT resolved as shift
    SEMI            reduce using rule 91 (string_expr -> string_expr CONCAT string_expr .)
    EQ              reduce using rule 91 (string_expr -> string_expr CONCAT string_expr .)
    NE              reduce using rule 91 (string_expr -> string_expr CONCAT string_expr .)
    LT              reduce using rule 91 (string_expr -> string_expr CONCAT string_expr .)
    GT              reduce using rule 91 (string_expr -> string_expr CONCAT string_expr .)
    LE              reduce using rule 91 (string_expr -> string_expr CONCAT string_expr .)
    GE              reduce using rule 91 (string_expr -> string_expr CONCAT string_expr .)
    AND             reduce using rule 91 (string_expr -> string_expr CONCAT string_expr .)
    OR              reduce using rule 91 (string_expr -> string_expr CONCAT string_expr .)
    TERNARY_Q       reduce using rule 91 (string_expr -> string_expr CONCAT string_expr .)
    RPAREN          reduce using rule 91 (string_expr -> string_expr CONCAT string_expr .)
    COMMA           reduce using rule 91 (string_expr -> string_expr CONCAT string_expr .)
    TERNARY_C       reduce using rule 91 (string_expr -> string_expr CONCAT string_expr .)
    CONCAT          shift and go to state 74

  ! CONCAT          [ reduce using rule 91 (string_expr -> string_expr CONCAT string_expr .) ]


state 124

    (93) string_expr -> var .

    CONCAT          reduce using rule 93 (string_expr -> var .)
    SEMI            reduce using rule 93 (string_expr -> var .)
    EQ              reduce using rule 93 (string_expr -> var .)
    NE              reduce using rule 93 (string_expr -> var .)
    LT              reduce using rule 93 (string_expr -> var .)
    GT              reduce using rule 93 (string_expr -> var .)
    LE              reduce using rule 93 (string_expr -> var .)
    GE              reduce using rule 93 (string_expr -> var .)
    AND             reduce using rule 93 (string_expr -> var .)
    OR              reduce using rule 93 (string_expr -> var .)
    TERNARY_Q       reduce using rule 93 (string_expr -> var .)
    RPAREN          reduce using rule 93 (string_expr -> var .)
    COMMA           reduce using rule 93 (string_expr -> var .)
    TERNARY_C       reduce using rule 93 (string_expr -> var .)


state 125

    (94) boolean_expr -> boolean_expr AND boolean_expr .
    (94) boolean_expr -> boolean_expr . AND boolean_expr
    (95) boolean_expr -> boolean_expr . OR boolean_expr
    (71) expr -> boolean_expr .
    (109) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for EQ resolved using rule 71 (expr -> boolean_expr .)
  ! reduce/reduce conflict for NE resolved using rule 71 (expr -> boolean_expr .)
  ! reduce/reduce conflict for LT resolved using rule 71 (expr -> boolean_expr .)
  ! reduce/reduce conflict for GT resolved using rule 71 (expr -> boolean_expr .)
  ! reduce/reduce conflict for LE resolved using rule 71 (expr -> boolean_expr .)
  ! reduce/reduce conflict for GE resolved using rule 71 (expr -> boolean_expr .)
  ! shift/reduce conflict for TERNARY_Q resolved as shift
    SEMI            reduce using rule 94 (boolean_expr -> boolean_expr AND boolean_expr .)
    RPAREN          reduce using rule 94 (boolean_expr -> boolean_expr AND boolean_expr .)
    COMMA           reduce using rule 94 (boolean_expr -> boolean_expr AND boolean_expr .)
    TERNARY_C       reduce using rule 94 (boolean_expr -> boolean_expr AND boolean_expr .)
    AND             shift and go to state 75
    OR              shift and go to state 76
    EQ              reduce using rule 71 (expr -> boolean_expr .)
    NE              reduce using rule 71 (expr -> boolean_expr .)
    LT              reduce using rule 71 (expr -> boolean_expr .)
    GT              reduce using rule 71 (expr -> boolean_expr .)
    LE              reduce using rule 71 (expr -> boolean_expr .)
    GE              reduce using rule 71 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 77

  ! AND             [ reduce using rule 94 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! OR              [ reduce using rule 94 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! TERNARY_Q       [ reduce using rule 94 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! EQ              [ reduce using rule 94 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! NE              [ reduce using rule 94 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! LT              [ reduce using rule 94 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! GT              [ reduce using rule 94 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! LE              [ reduce using rule 94 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! GE              [ reduce using rule 94 (boolean_expr -> boolean_expr AND boolean_expr .) ]


state 126

    (95) boolean_expr -> boolean_expr OR boolean_expr .
    (94) boolean_expr -> boolean_expr . AND boolean_expr
    (95) boolean_expr -> boolean_expr . OR boolean_expr
    (71) expr -> boolean_expr .
    (109) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for EQ resolved using rule 71 (expr -> boolean_expr .)
  ! reduce/reduce conflict for NE resolved using rule 71 (expr -> boolean_expr .)
  ! reduce/reduce conflict for LT resolved using rule 71 (expr -> boolean_expr .)
  ! reduce/reduce conflict for GT resolved using rule 71 (expr -> boolean_expr .)
  ! reduce/reduce conflict for LE resolved using rule 71 (expr -> boolean_expr .)
  ! reduce/reduce conflict for GE resolved using rule 71 (expr -> boolean_expr .)
  ! shift/reduce conflict for TERNARY_Q resolved as shift
    SEMI            reduce using rule 95 (boolean_expr -> boolean_expr OR boolean_expr .)
    RPAREN          reduce using rule 95 (boolean_expr -> boolean_expr OR boolean_expr .)
    COMMA           reduce using rule 95 (boolean_expr -> boolean_expr OR boolean_expr .)
    TERNARY_C       reduce using rule 95 (boolean_expr -> boolean_expr OR boolean_expr .)
    AND             shift and go to state 75
    OR              shift and go to state 76
    EQ              reduce using rule 71 (expr -> boolean_expr .)
    NE              reduce using rule 71 (expr -> boolean_expr .)
    LT              reduce using rule 71 (expr -> boolean_expr .)
    GT              reduce using rule 71 (expr -> boolean_expr .)
    LE              reduce using rule 71 (expr -> boolean_expr .)
    GE              reduce using rule 71 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 77

  ! AND             [ reduce using rule 95 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! OR              [ reduce using rule 95 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! TERNARY_Q       [ reduce using rule 95 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! EQ              [ reduce using rule 95 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! NE              [ reduce using rule 95 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! LT              [ reduce using rule 95 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! GT              [ reduce using rule 95 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! LE              [ reduce using rule 95 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! GE              [ reduce using rule 95 (boolean_expr -> boolean_expr OR boolean_expr .) ]


state 127

    (109) ternary_expr -> boolean_expr TERNARY_Q expr . TERNARY_C expr
    (102) comparison -> expr . EQ expr
    (103) comparison -> expr . NE expr
    (104) comparison -> expr . LT expr
    (105) comparison -> expr . GT expr
    (106) comparison -> expr . LE expr
    (107) comparison -> expr . GE expr

    TERNARY_C       shift and go to state 141
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LT              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53


state 128

    (32) func_stmt -> FN var LPAREN . parameters_list RPAREN LBRACE scoped_block RBRACE
    (38) parameters_list -> . non_empty_parameters_list
    (39) parameters_list -> . empty
    (40) non_empty_parameters_list -> . var COMMA non_empty_parameters_list
    (41) non_empty_parameters_list -> . var
    (110) empty -> .
    (57) var -> . ID

    RPAREN          reduce using rule 110 (empty -> .)
    ID              shift and go to state 30

    var                            shift and go to state 142
    parameters_list                shift and go to state 143
    non_empty_parameters_list      shift and go to state 144
    empty                          shift and go to state 145

state 129

    (80) num_factor -> LPAREN num_expr RPAREN .

    PLUS            reduce using rule 80 (num_factor -> LPAREN num_expr RPAREN .)
    MINUS           reduce using rule 80 (num_factor -> LPAREN num_expr RPAREN .)
    TIMES           reduce using rule 80 (num_factor -> LPAREN num_expr RPAREN .)
    DIVIDE          reduce using rule 80 (num_factor -> LPAREN num_expr RPAREN .)
    INT_DIVIDE      reduce using rule 80 (num_factor -> LPAREN num_expr RPAREN .)
    POWER           reduce using rule 80 (num_factor -> LPAREN num_expr RPAREN .)
    MODULO          reduce using rule 80 (num_factor -> LPAREN num_expr RPAREN .)
    SEMI            reduce using rule 80 (num_factor -> LPAREN num_expr RPAREN .)
    EQ              reduce using rule 80 (num_factor -> LPAREN num_expr RPAREN .)
    NE              reduce using rule 80 (num_factor -> LPAREN num_expr RPAREN .)
    LT              reduce using rule 80 (num_factor -> LPAREN num_expr RPAREN .)
    GT              reduce using rule 80 (num_factor -> LPAREN num_expr RPAREN .)
    LE              reduce using rule 80 (num_factor -> LPAREN num_expr RPAREN .)
    GE              reduce using rule 80 (num_factor -> LPAREN num_expr RPAREN .)
    RPAREN          reduce using rule 80 (num_factor -> LPAREN num_expr RPAREN .)
    AND             reduce using rule 80 (num_factor -> LPAREN num_expr RPAREN .)
    OR              reduce using rule 80 (num_factor -> LPAREN num_expr RPAREN .)
    TERNARY_Q       reduce using rule 80 (num_factor -> LPAREN num_expr RPAREN .)
    COMMA           reduce using rule 80 (num_factor -> LPAREN num_expr RPAREN .)
    TERNARY_C       reduce using rule 80 (num_factor -> LPAREN num_expr RPAREN .)


state 130

    (98) boolean_factor -> LPAREN boolean_expr RPAREN .

    AND             reduce using rule 98 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    OR              reduce using rule 98 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    TERNARY_Q       reduce using rule 98 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    SEMI            reduce using rule 98 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    EQ              reduce using rule 98 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    NE              reduce using rule 98 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    LT              reduce using rule 98 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    GT              reduce using rule 98 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    LE              reduce using rule 98 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    GE              reduce using rule 98 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    RPAREN          reduce using rule 98 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    COMMA           reduce using rule 98 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    TERNARY_C       reduce using rule 98 (boolean_factor -> LPAREN boolean_expr RPAREN .)


state 131

    (42) if_stmt -> IF LPAREN boolean_expr . RPAREN LBRACE block RBRACE elif_stmt
    (94) boolean_expr -> boolean_expr . AND boolean_expr
    (95) boolean_expr -> boolean_expr . OR boolean_expr
    (71) expr -> boolean_expr .
    (109) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    RPAREN          shift and go to state 146
    AND             shift and go to state 75
    OR              shift and go to state 76
    EQ              reduce using rule 71 (expr -> boolean_expr .)
    NE              reduce using rule 71 (expr -> boolean_expr .)
    LT              reduce using rule 71 (expr -> boolean_expr .)
    GT              reduce using rule 71 (expr -> boolean_expr .)
    LE              reduce using rule 71 (expr -> boolean_expr .)
    GE              reduce using rule 71 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 77


state 132

    (55) while_stmt -> WHILE LPAREN boolean_expr . RPAREN LBRACE block RBRACE
    (94) boolean_expr -> boolean_expr . AND boolean_expr
    (95) boolean_expr -> boolean_expr . OR boolean_expr
    (71) expr -> boolean_expr .
    (109) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    RPAREN          shift and go to state 147
    AND             shift and go to state 75
    OR              shift and go to state 76
    EQ              reduce using rule 71 (expr -> boolean_expr .)
    NE              reduce using rule 71 (expr -> boolean_expr .)
    LT              reduce using rule 71 (expr -> boolean_expr .)
    GT              reduce using rule 71 (expr -> boolean_expr .)
    LE              reduce using rule 71 (expr -> boolean_expr .)
    GE              reduce using rule 71 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 77


state 133

    (56) for_stmt -> FOR LPAREN var_assign . SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE

    SEMI            shift and go to state 148


state 134

    (58) var_assign -> var . ASSIGN expr

    ASSIGN          shift and go to state 55


state 135

    (54) print_stmt -> PRINT LPAREN expr . RPAREN
    (102) comparison -> expr . EQ expr
    (103) comparison -> expr . NE expr
    (104) comparison -> expr . LT expr
    (105) comparison -> expr . GT expr
    (106) comparison -> expr . LE expr
    (107) comparison -> expr . GE expr

    RPAREN          shift and go to state 149
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LT              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53


state 136

    (80) num_factor -> LPAREN num_expr . RPAREN
    (83) num_expr -> num_expr . PLUS num_expr
    (84) num_expr -> num_expr . MINUS num_expr
    (85) num_expr -> num_expr . TIMES num_expr
    (86) num_expr -> num_expr . DIVIDE num_expr
    (87) num_expr -> num_expr . INT_DIVIDE num_expr
    (88) num_expr -> num_expr . POWER num_expr
    (89) num_expr -> num_expr . MODULO num_expr

    RPAREN          shift and go to state 129
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70
    INT_DIVIDE      shift and go to state 71
    POWER           shift and go to state 72
    MODULO          shift and go to state 73


state 137

    (101) boolean_factor -> var .
    (82) num_factor -> var .
    (33) func_call -> var . LPAREN arguments_list RPAREN
    (74) expr -> var .
    (93) string_expr -> var .

  ! reduce/reduce conflict for RPAREN resolved using rule 82 (num_factor -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 82 (num_factor -> var .)
  ! reduce/reduce conflict for NE resolved using rule 82 (num_factor -> var .)
  ! reduce/reduce conflict for LT resolved using rule 82 (num_factor -> var .)
  ! reduce/reduce conflict for GT resolved using rule 82 (num_factor -> var .)
  ! reduce/reduce conflict for LE resolved using rule 82 (num_factor -> var .)
  ! reduce/reduce conflict for GE resolved using rule 82 (num_factor -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 74 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 74 (expr -> var .)
    AND             reduce using rule 101 (boolean_factor -> var .)
    OR              reduce using rule 101 (boolean_factor -> var .)
    TERNARY_Q       reduce using rule 101 (boolean_factor -> var .)
    RPAREN          reduce using rule 82 (num_factor -> var .)
    PLUS            reduce using rule 82 (num_factor -> var .)
    MINUS           reduce using rule 82 (num_factor -> var .)
    TIMES           reduce using rule 82 (num_factor -> var .)
    DIVIDE          reduce using rule 82 (num_factor -> var .)
    INT_DIVIDE      reduce using rule 82 (num_factor -> var .)
    POWER           reduce using rule 82 (num_factor -> var .)
    MODULO          reduce using rule 82 (num_factor -> var .)
    LPAREN          shift and go to state 65
    EQ              reduce using rule 74 (expr -> var .)
    NE              reduce using rule 74 (expr -> var .)
    LT              reduce using rule 74 (expr -> var .)
    GT              reduce using rule 74 (expr -> var .)
    LE              reduce using rule 74 (expr -> var .)
    GE              reduce using rule 74 (expr -> var .)
    CONCAT          reduce using rule 93 (string_expr -> var .)

  ! RPAREN          [ reduce using rule 101 (boolean_factor -> var .) ]
  ! EQ              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! NE              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! LT              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! GT              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! LE              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! GE              [ reduce using rule 101 (boolean_factor -> var .) ]
  ! EQ              [ reduce using rule 82 (num_factor -> var .) ]
  ! NE              [ reduce using rule 82 (num_factor -> var .) ]
  ! LT              [ reduce using rule 82 (num_factor -> var .) ]
  ! GT              [ reduce using rule 82 (num_factor -> var .) ]
  ! LE              [ reduce using rule 82 (num_factor -> var .) ]
  ! GE              [ reduce using rule 82 (num_factor -> var .) ]
  ! EQ              [ reduce using rule 93 (string_expr -> var .) ]
  ! NE              [ reduce using rule 93 (string_expr -> var .) ]
  ! LT              [ reduce using rule 93 (string_expr -> var .) ]
  ! GT              [ reduce using rule 93 (string_expr -> var .) ]
  ! LE              [ reduce using rule 93 (string_expr -> var .) ]
  ! GE              [ reduce using rule 93 (string_expr -> var .) ]


state 138

    (33) func_call -> var LPAREN arguments_list RPAREN .

    SEMI            reduce using rule 33 (func_call -> var LPAREN arguments_list RPAREN .)
    EQ              reduce using rule 33 (func_call -> var LPAREN arguments_list RPAREN .)
    NE              reduce using rule 33 (func_call -> var LPAREN arguments_list RPAREN .)
    LT              reduce using rule 33 (func_call -> var LPAREN arguments_list RPAREN .)
    GT              reduce using rule 33 (func_call -> var LPAREN arguments_list RPAREN .)
    LE              reduce using rule 33 (func_call -> var LPAREN arguments_list RPAREN .)
    GE              reduce using rule 33 (func_call -> var LPAREN arguments_list RPAREN .)
    PLUS            reduce using rule 33 (func_call -> var LPAREN arguments_list RPAREN .)
    MINUS           reduce using rule 33 (func_call -> var LPAREN arguments_list RPAREN .)
    TIMES           reduce using rule 33 (func_call -> var LPAREN arguments_list RPAREN .)
    DIVIDE          reduce using rule 33 (func_call -> var LPAREN arguments_list RPAREN .)
    INT_DIVIDE      reduce using rule 33 (func_call -> var LPAREN arguments_list RPAREN .)
    POWER           reduce using rule 33 (func_call -> var LPAREN arguments_list RPAREN .)
    MODULO          reduce using rule 33 (func_call -> var LPAREN arguments_list RPAREN .)
    RPAREN          reduce using rule 33 (func_call -> var LPAREN arguments_list RPAREN .)
    AND             reduce using rule 33 (func_call -> var LPAREN arguments_list RPAREN .)
    OR              reduce using rule 33 (func_call -> var LPAREN arguments_list RPAREN .)
    TERNARY_Q       reduce using rule 33 (func_call -> var LPAREN arguments_list RPAREN .)
    COMMA           reduce using rule 33 (func_call -> var LPAREN arguments_list RPAREN .)
    TERNARY_C       reduce using rule 33 (func_call -> var LPAREN arguments_list RPAREN .)


state 139

    (36) non_empty_arguments_list -> expr COMMA . non_empty_arguments_list
    (36) non_empty_arguments_list -> . expr COMMA non_empty_arguments_list
    (37) non_empty_arguments_list -> . expr
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (57) var -> . ID
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    ID              shift and go to state 30
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

    expr                           shift and go to state 114
    non_empty_arguments_list       shift and go to state 150
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    boolean_expr                   shift and go to state 20
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    var                            shift and go to state 97
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 140

    (59) final_assign -> FINAL var ASSIGN expr .
    (102) comparison -> expr . EQ expr
    (103) comparison -> expr . NE expr
    (104) comparison -> expr . LT expr
    (105) comparison -> expr . GT expr
    (106) comparison -> expr . LE expr
    (107) comparison -> expr . GE expr

    SEMI            reduce using rule 59 (final_assign -> FINAL var ASSIGN expr .)
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LT              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53


state 141

    (109) ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C . expr
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (57) var -> . ID
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    ID              shift and go to state 30
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

    boolean_expr                   shift and go to state 20
    expr                           shift and go to state 151
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    var                            shift and go to state 97
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 142

    (40) non_empty_parameters_list -> var . COMMA non_empty_parameters_list
    (41) non_empty_parameters_list -> var .

    COMMA           shift and go to state 152
    RPAREN          reduce using rule 41 (non_empty_parameters_list -> var .)


state 143

    (32) func_stmt -> FN var LPAREN parameters_list . RPAREN LBRACE scoped_block RBRACE

    RPAREN          shift and go to state 153


state 144

    (38) parameters_list -> non_empty_parameters_list .

    RPAREN          reduce using rule 38 (parameters_list -> non_empty_parameters_list .)


state 145

    (39) parameters_list -> empty .

    RPAREN          reduce using rule 39 (parameters_list -> empty .)


state 146

    (42) if_stmt -> IF LPAREN boolean_expr RPAREN . LBRACE block RBRACE elif_stmt

    LBRACE          shift and go to state 154


state 147

    (55) while_stmt -> WHILE LPAREN boolean_expr RPAREN . LBRACE block RBRACE

    LBRACE          shift and go to state 155


state 148

    (56) for_stmt -> FOR LPAREN var_assign SEMI . boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr
    (57) var -> . ID
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var

    NOT             shift and go to state 35
    LPAREN          shift and go to state 94
    BOOLEAN         shift and go to state 40
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39

    boolean_expr                   shift and go to state 156
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41
    var                            shift and go to state 95
    expr                           shift and go to state 83
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34

state 149

    (54) print_stmt -> PRINT LPAREN expr RPAREN .

    SEMI            reduce using rule 54 (print_stmt -> PRINT LPAREN expr RPAREN .)


state 150

    (36) non_empty_arguments_list -> expr COMMA non_empty_arguments_list .

    RPAREN          reduce using rule 36 (non_empty_arguments_list -> expr COMMA non_empty_arguments_list .)


state 151

    (109) ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .
    (102) comparison -> expr . EQ expr
    (103) comparison -> expr . NE expr
    (104) comparison -> expr . LT expr
    (105) comparison -> expr . GT expr
    (106) comparison -> expr . LE expr
    (107) comparison -> expr . GE expr

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    SEMI            reduce using rule 109 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .)
    AND             reduce using rule 109 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .)
    OR              reduce using rule 109 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .)
    TERNARY_Q       reduce using rule 109 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .)
    RPAREN          reduce using rule 109 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .)
    COMMA           reduce using rule 109 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .)
    TERNARY_C       reduce using rule 109 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .)
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LT              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53

  ! EQ              [ reduce using rule 109 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .) ]
  ! NE              [ reduce using rule 109 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .) ]
  ! LT              [ reduce using rule 109 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .) ]
  ! GT              [ reduce using rule 109 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .) ]
  ! LE              [ reduce using rule 109 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .) ]
  ! GE              [ reduce using rule 109 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .) ]


state 152

    (40) non_empty_parameters_list -> var COMMA . non_empty_parameters_list
    (40) non_empty_parameters_list -> . var COMMA non_empty_parameters_list
    (41) non_empty_parameters_list -> . var
    (57) var -> . ID

    ID              shift and go to state 30

    var                            shift and go to state 142
    non_empty_parameters_list      shift and go to state 157

state 153

    (32) func_stmt -> FN var LPAREN parameters_list RPAREN . LBRACE scoped_block RBRACE

    LBRACE          shift and go to state 158


state 154

    (42) if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE . block RBRACE elif_stmt
    (2) block -> . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . var_auto SEMI
    (9) statement -> . expr SEMI
    (10) statement -> . func_stmt
    (11) statement -> . if_stmt
    (12) statement -> . while_stmt
    (13) statement -> . for_stmt
    (14) statement -> . print_stmt SEMI
    (15) statement -> . empty
    (110) empty -> .
    (58) var_assign -> . var ASSIGN expr
    (59) final_assign -> . FINAL var ASSIGN expr
    (60) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (61) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (62) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (63) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (64) var_compound_assign -> . var POWER_ASSIGN num_expr
    (65) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (66) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (67) var_auto -> . var INCREMENT
    (68) var_auto -> . var DECREMENT
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (32) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (42) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (55) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (56) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (54) print_stmt -> . PRINT LPAREN expr RPAREN
    (57) var -> . ID
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 110 (empty -> .)
    FINAL           shift and go to state 17
    FN              shift and go to state 24
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    PRINT           shift and go to state 29
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

  ! FINAL           [ reduce using rule 110 (empty -> .) ]
  ! FN              [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! PRINT           [ reduce using rule 110 (empty -> .) ]
  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! NOT             [ reduce using rule 110 (empty -> .) ]
  ! NULL            [ reduce using rule 110 (empty -> .) ]
  ! PLUS            [ reduce using rule 110 (empty -> .) ]
  ! MINUS           [ reduce using rule 110 (empty -> .) ]
  ! INTEGER         [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LPAREN          [ reduce using rule 110 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 110 (empty -> .) ]

    boolean_expr                   shift and go to state 20
    block                          shift and go to state 159
    statement_list                 shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 5
    var_assign                     shift and go to state 6
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    var_auto                       shift and go to state 9
    expr                           shift and go to state 10
    func_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    while_stmt                     shift and go to state 13
    for_stmt                       shift and go to state 14
    print_stmt                     shift and go to state 15
    var                            shift and go to state 16
    num_expr                       shift and go to state 18
    string_expr                    shift and go to state 19
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 155

    (55) while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE . block RBRACE
    (2) block -> . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . var_auto SEMI
    (9) statement -> . expr SEMI
    (10) statement -> . func_stmt
    (11) statement -> . if_stmt
    (12) statement -> . while_stmt
    (13) statement -> . for_stmt
    (14) statement -> . print_stmt SEMI
    (15) statement -> . empty
    (110) empty -> .
    (58) var_assign -> . var ASSIGN expr
    (59) final_assign -> . FINAL var ASSIGN expr
    (60) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (61) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (62) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (63) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (64) var_compound_assign -> . var POWER_ASSIGN num_expr
    (65) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (66) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (67) var_auto -> . var INCREMENT
    (68) var_auto -> . var DECREMENT
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (32) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (42) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (55) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (56) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (54) print_stmt -> . PRINT LPAREN expr RPAREN
    (57) var -> . ID
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 110 (empty -> .)
    FINAL           shift and go to state 17
    FN              shift and go to state 24
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    PRINT           shift and go to state 29
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

  ! FINAL           [ reduce using rule 110 (empty -> .) ]
  ! FN              [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! PRINT           [ reduce using rule 110 (empty -> .) ]
  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! NOT             [ reduce using rule 110 (empty -> .) ]
  ! NULL            [ reduce using rule 110 (empty -> .) ]
  ! PLUS            [ reduce using rule 110 (empty -> .) ]
  ! MINUS           [ reduce using rule 110 (empty -> .) ]
  ! INTEGER         [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LPAREN          [ reduce using rule 110 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 110 (empty -> .) ]

    boolean_expr                   shift and go to state 20
    block                          shift and go to state 160
    statement_list                 shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 5
    var_assign                     shift and go to state 6
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    var_auto                       shift and go to state 9
    expr                           shift and go to state 10
    func_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    while_stmt                     shift and go to state 13
    for_stmt                       shift and go to state 14
    print_stmt                     shift and go to state 15
    var                            shift and go to state 16
    num_expr                       shift and go to state 18
    string_expr                    shift and go to state 19
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 156

    (56) for_stmt -> FOR LPAREN var_assign SEMI boolean_expr . SEMI var_auto RPAREN LBRACE block RBRACE
    (94) boolean_expr -> boolean_expr . AND boolean_expr
    (95) boolean_expr -> boolean_expr . OR boolean_expr
    (71) expr -> boolean_expr .
    (109) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    SEMI            shift and go to state 161
    AND             shift and go to state 75
    OR              shift and go to state 76
    EQ              reduce using rule 71 (expr -> boolean_expr .)
    NE              reduce using rule 71 (expr -> boolean_expr .)
    LT              reduce using rule 71 (expr -> boolean_expr .)
    GT              reduce using rule 71 (expr -> boolean_expr .)
    LE              reduce using rule 71 (expr -> boolean_expr .)
    GE              reduce using rule 71 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 77


state 157

    (40) non_empty_parameters_list -> var COMMA non_empty_parameters_list .

    RPAREN          reduce using rule 40 (non_empty_parameters_list -> var COMMA non_empty_parameters_list .)


state 158

    (32) func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE . scoped_block RBRACE
    (16) scoped_block -> . scoped_statement_list
    (17) scoped_statement_list -> . scoped_statement scoped_statement_list
    (18) scoped_statement_list -> . empty
    (19) scoped_statement -> . var_assign SEMI
    (20) scoped_statement -> . final_assign SEMI
    (21) scoped_statement -> . var_compound_assign SEMI
    (22) scoped_statement -> . var_auto SEMI
    (23) scoped_statement -> . expr SEMI
    (24) scoped_statement -> . func_stmt
    (25) scoped_statement -> . scoped_if_stmt
    (26) scoped_statement -> . scoped_while_stmt
    (27) scoped_statement -> . scoped_for_stmt
    (28) scoped_statement -> . print_stmt SEMI
    (29) scoped_statement -> . return SEMI
    (30) scoped_statement -> . empty
    (110) empty -> .
    (58) var_assign -> . var ASSIGN expr
    (59) final_assign -> . FINAL var ASSIGN expr
    (60) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (61) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (62) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (63) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (64) var_compound_assign -> . var POWER_ASSIGN num_expr
    (65) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (66) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (67) var_auto -> . var INCREMENT
    (68) var_auto -> . var DECREMENT
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (32) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (47) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (52) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (53) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (54) print_stmt -> . PRINT LPAREN expr RPAREN
    (31) return -> . RETURN expr
    (57) var -> . ID
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 110 (empty -> .)
    FINAL           shift and go to state 17
    FN              shift and go to state 24
    IF              shift and go to state 177
    WHILE           shift and go to state 178
    FOR             shift and go to state 179
    PRINT           shift and go to state 29
    RETURN          shift and go to state 180
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

  ! FINAL           [ reduce using rule 110 (empty -> .) ]
  ! FN              [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! PRINT           [ reduce using rule 110 (empty -> .) ]
  ! RETURN          [ reduce using rule 110 (empty -> .) ]
  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! NOT             [ reduce using rule 110 (empty -> .) ]
  ! NULL            [ reduce using rule 110 (empty -> .) ]
  ! PLUS            [ reduce using rule 110 (empty -> .) ]
  ! MINUS           [ reduce using rule 110 (empty -> .) ]
  ! INTEGER         [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LPAREN          [ reduce using rule 110 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 110 (empty -> .) ]

    var                            shift and go to state 16
    scoped_block                   shift and go to state 162
    scoped_statement_list          shift and go to state 163
    scoped_statement               shift and go to state 164
    empty                          shift and go to state 165
    var_assign                     shift and go to state 166
    final_assign                   shift and go to state 167
    var_compound_assign            shift and go to state 168
    var_auto                       shift and go to state 169
    expr                           shift and go to state 170
    func_stmt                      shift and go to state 171
    scoped_if_stmt                 shift and go to state 172
    scoped_while_stmt              shift and go to state 173
    scoped_for_stmt                shift and go to state 174
    print_stmt                     shift and go to state 175
    return                         shift and go to state 176
    num_expr                       shift and go to state 18
    string_expr                    shift and go to state 19
    boolean_expr                   shift and go to state 20
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 159

    (42) if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block . RBRACE elif_stmt

    RBRACE          shift and go to state 181


state 160

    (55) while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block . RBRACE

    RBRACE          shift and go to state 182


state 161

    (56) for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI . var_auto RPAREN LBRACE block RBRACE
    (67) var_auto -> . var INCREMENT
    (68) var_auto -> . var DECREMENT
    (57) var -> . ID

    ID              shift and go to state 30

    var_auto                       shift and go to state 183
    var                            shift and go to state 184

state 162

    (32) func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block . RBRACE

    RBRACE          shift and go to state 185


state 163

    (16) scoped_block -> scoped_statement_list .

    RBRACE          reduce using rule 16 (scoped_block -> scoped_statement_list .)


state 164

    (17) scoped_statement_list -> scoped_statement . scoped_statement_list
    (17) scoped_statement_list -> . scoped_statement scoped_statement_list
    (18) scoped_statement_list -> . empty
    (19) scoped_statement -> . var_assign SEMI
    (20) scoped_statement -> . final_assign SEMI
    (21) scoped_statement -> . var_compound_assign SEMI
    (22) scoped_statement -> . var_auto SEMI
    (23) scoped_statement -> . expr SEMI
    (24) scoped_statement -> . func_stmt
    (25) scoped_statement -> . scoped_if_stmt
    (26) scoped_statement -> . scoped_while_stmt
    (27) scoped_statement -> . scoped_for_stmt
    (28) scoped_statement -> . print_stmt SEMI
    (29) scoped_statement -> . return SEMI
    (30) scoped_statement -> . empty
    (110) empty -> .
    (58) var_assign -> . var ASSIGN expr
    (59) final_assign -> . FINAL var ASSIGN expr
    (60) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (61) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (62) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (63) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (64) var_compound_assign -> . var POWER_ASSIGN num_expr
    (65) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (66) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (67) var_auto -> . var INCREMENT
    (68) var_auto -> . var DECREMENT
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (32) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (47) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (52) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (53) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (54) print_stmt -> . PRINT LPAREN expr RPAREN
    (31) return -> . RETURN expr
    (57) var -> . ID
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 110 (empty -> .)
    FINAL           shift and go to state 17
    FN              shift and go to state 24
    IF              shift and go to state 177
    WHILE           shift and go to state 178
    FOR             shift and go to state 179
    PRINT           shift and go to state 29
    RETURN          shift and go to state 180
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

  ! FINAL           [ reduce using rule 110 (empty -> .) ]
  ! FN              [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! PRINT           [ reduce using rule 110 (empty -> .) ]
  ! RETURN          [ reduce using rule 110 (empty -> .) ]
  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! NOT             [ reduce using rule 110 (empty -> .) ]
  ! NULL            [ reduce using rule 110 (empty -> .) ]
  ! PLUS            [ reduce using rule 110 (empty -> .) ]
  ! MINUS           [ reduce using rule 110 (empty -> .) ]
  ! INTEGER         [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LPAREN          [ reduce using rule 110 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 110 (empty -> .) ]

    scoped_statement               shift and go to state 164
    scoped_statement_list          shift and go to state 186
    empty                          shift and go to state 165
    var_assign                     shift and go to state 166
    final_assign                   shift and go to state 167
    var_compound_assign            shift and go to state 168
    var_auto                       shift and go to state 169
    expr                           shift and go to state 170
    func_stmt                      shift and go to state 171
    scoped_if_stmt                 shift and go to state 172
    scoped_while_stmt              shift and go to state 173
    scoped_for_stmt                shift and go to state 174
    print_stmt                     shift and go to state 175
    return                         shift and go to state 176
    var                            shift and go to state 16
    num_expr                       shift and go to state 18
    string_expr                    shift and go to state 19
    boolean_expr                   shift and go to state 20
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 165

    (18) scoped_statement_list -> empty .
    (30) scoped_statement -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 18 (scoped_statement_list -> empty .)
    RBRACE          reduce using rule 18 (scoped_statement_list -> empty .)
    FINAL           reduce using rule 30 (scoped_statement -> empty .)
    FN              reduce using rule 30 (scoped_statement -> empty .)
    IF              reduce using rule 30 (scoped_statement -> empty .)
    WHILE           reduce using rule 30 (scoped_statement -> empty .)
    FOR             reduce using rule 30 (scoped_statement -> empty .)
    PRINT           reduce using rule 30 (scoped_statement -> empty .)
    RETURN          reduce using rule 30 (scoped_statement -> empty .)
    ID              reduce using rule 30 (scoped_statement -> empty .)
    STRING          reduce using rule 30 (scoped_statement -> empty .)
    NOT             reduce using rule 30 (scoped_statement -> empty .)
    NULL            reduce using rule 30 (scoped_statement -> empty .)
    PLUS            reduce using rule 30 (scoped_statement -> empty .)
    MINUS           reduce using rule 30 (scoped_statement -> empty .)
    INTEGER         reduce using rule 30 (scoped_statement -> empty .)
    FLOAT           reduce using rule 30 (scoped_statement -> empty .)
    LPAREN          reduce using rule 30 (scoped_statement -> empty .)
    BOOLEAN         reduce using rule 30 (scoped_statement -> empty .)

  ! RBRACE          [ reduce using rule 30 (scoped_statement -> empty .) ]


state 166

    (19) scoped_statement -> var_assign . SEMI

    SEMI            shift and go to state 187


state 167

    (20) scoped_statement -> final_assign . SEMI

    SEMI            shift and go to state 188


state 168

    (21) scoped_statement -> var_compound_assign . SEMI

    SEMI            shift and go to state 189


state 169

    (22) scoped_statement -> var_auto . SEMI

    SEMI            shift and go to state 190


state 170

    (23) scoped_statement -> expr . SEMI
    (102) comparison -> expr . EQ expr
    (103) comparison -> expr . NE expr
    (104) comparison -> expr . LT expr
    (105) comparison -> expr . GT expr
    (106) comparison -> expr . LE expr
    (107) comparison -> expr . GE expr

    SEMI            shift and go to state 191
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LT              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53


state 171

    (24) scoped_statement -> func_stmt .

    FINAL           reduce using rule 24 (scoped_statement -> func_stmt .)
    FN              reduce using rule 24 (scoped_statement -> func_stmt .)
    IF              reduce using rule 24 (scoped_statement -> func_stmt .)
    WHILE           reduce using rule 24 (scoped_statement -> func_stmt .)
    FOR             reduce using rule 24 (scoped_statement -> func_stmt .)
    PRINT           reduce using rule 24 (scoped_statement -> func_stmt .)
    RETURN          reduce using rule 24 (scoped_statement -> func_stmt .)
    ID              reduce using rule 24 (scoped_statement -> func_stmt .)
    STRING          reduce using rule 24 (scoped_statement -> func_stmt .)
    NOT             reduce using rule 24 (scoped_statement -> func_stmt .)
    NULL            reduce using rule 24 (scoped_statement -> func_stmt .)
    PLUS            reduce using rule 24 (scoped_statement -> func_stmt .)
    MINUS           reduce using rule 24 (scoped_statement -> func_stmt .)
    INTEGER         reduce using rule 24 (scoped_statement -> func_stmt .)
    FLOAT           reduce using rule 24 (scoped_statement -> func_stmt .)
    LPAREN          reduce using rule 24 (scoped_statement -> func_stmt .)
    BOOLEAN         reduce using rule 24 (scoped_statement -> func_stmt .)
    RBRACE          reduce using rule 24 (scoped_statement -> func_stmt .)


state 172

    (25) scoped_statement -> scoped_if_stmt .

    FINAL           reduce using rule 25 (scoped_statement -> scoped_if_stmt .)
    FN              reduce using rule 25 (scoped_statement -> scoped_if_stmt .)
    IF              reduce using rule 25 (scoped_statement -> scoped_if_stmt .)
    WHILE           reduce using rule 25 (scoped_statement -> scoped_if_stmt .)
    FOR             reduce using rule 25 (scoped_statement -> scoped_if_stmt .)
    PRINT           reduce using rule 25 (scoped_statement -> scoped_if_stmt .)
    RETURN          reduce using rule 25 (scoped_statement -> scoped_if_stmt .)
    ID              reduce using rule 25 (scoped_statement -> scoped_if_stmt .)
    STRING          reduce using rule 25 (scoped_statement -> scoped_if_stmt .)
    NOT             reduce using rule 25 (scoped_statement -> scoped_if_stmt .)
    NULL            reduce using rule 25 (scoped_statement -> scoped_if_stmt .)
    PLUS            reduce using rule 25 (scoped_statement -> scoped_if_stmt .)
    MINUS           reduce using rule 25 (scoped_statement -> scoped_if_stmt .)
    INTEGER         reduce using rule 25 (scoped_statement -> scoped_if_stmt .)
    FLOAT           reduce using rule 25 (scoped_statement -> scoped_if_stmt .)
    LPAREN          reduce using rule 25 (scoped_statement -> scoped_if_stmt .)
    BOOLEAN         reduce using rule 25 (scoped_statement -> scoped_if_stmt .)
    RBRACE          reduce using rule 25 (scoped_statement -> scoped_if_stmt .)


state 173

    (26) scoped_statement -> scoped_while_stmt .

    FINAL           reduce using rule 26 (scoped_statement -> scoped_while_stmt .)
    FN              reduce using rule 26 (scoped_statement -> scoped_while_stmt .)
    IF              reduce using rule 26 (scoped_statement -> scoped_while_stmt .)
    WHILE           reduce using rule 26 (scoped_statement -> scoped_while_stmt .)
    FOR             reduce using rule 26 (scoped_statement -> scoped_while_stmt .)
    PRINT           reduce using rule 26 (scoped_statement -> scoped_while_stmt .)
    RETURN          reduce using rule 26 (scoped_statement -> scoped_while_stmt .)
    ID              reduce using rule 26 (scoped_statement -> scoped_while_stmt .)
    STRING          reduce using rule 26 (scoped_statement -> scoped_while_stmt .)
    NOT             reduce using rule 26 (scoped_statement -> scoped_while_stmt .)
    NULL            reduce using rule 26 (scoped_statement -> scoped_while_stmt .)
    PLUS            reduce using rule 26 (scoped_statement -> scoped_while_stmt .)
    MINUS           reduce using rule 26 (scoped_statement -> scoped_while_stmt .)
    INTEGER         reduce using rule 26 (scoped_statement -> scoped_while_stmt .)
    FLOAT           reduce using rule 26 (scoped_statement -> scoped_while_stmt .)
    LPAREN          reduce using rule 26 (scoped_statement -> scoped_while_stmt .)
    BOOLEAN         reduce using rule 26 (scoped_statement -> scoped_while_stmt .)
    RBRACE          reduce using rule 26 (scoped_statement -> scoped_while_stmt .)


state 174

    (27) scoped_statement -> scoped_for_stmt .

    FINAL           reduce using rule 27 (scoped_statement -> scoped_for_stmt .)
    FN              reduce using rule 27 (scoped_statement -> scoped_for_stmt .)
    IF              reduce using rule 27 (scoped_statement -> scoped_for_stmt .)
    WHILE           reduce using rule 27 (scoped_statement -> scoped_for_stmt .)
    FOR             reduce using rule 27 (scoped_statement -> scoped_for_stmt .)
    PRINT           reduce using rule 27 (scoped_statement -> scoped_for_stmt .)
    RETURN          reduce using rule 27 (scoped_statement -> scoped_for_stmt .)
    ID              reduce using rule 27 (scoped_statement -> scoped_for_stmt .)
    STRING          reduce using rule 27 (scoped_statement -> scoped_for_stmt .)
    NOT             reduce using rule 27 (scoped_statement -> scoped_for_stmt .)
    NULL            reduce using rule 27 (scoped_statement -> scoped_for_stmt .)
    PLUS            reduce using rule 27 (scoped_statement -> scoped_for_stmt .)
    MINUS           reduce using rule 27 (scoped_statement -> scoped_for_stmt .)
    INTEGER         reduce using rule 27 (scoped_statement -> scoped_for_stmt .)
    FLOAT           reduce using rule 27 (scoped_statement -> scoped_for_stmt .)
    LPAREN          reduce using rule 27 (scoped_statement -> scoped_for_stmt .)
    BOOLEAN         reduce using rule 27 (scoped_statement -> scoped_for_stmt .)
    RBRACE          reduce using rule 27 (scoped_statement -> scoped_for_stmt .)


state 175

    (28) scoped_statement -> print_stmt . SEMI

    SEMI            shift and go to state 192


state 176

    (29) scoped_statement -> return . SEMI

    SEMI            shift and go to state 193


state 177

    (47) scoped_if_stmt -> IF . LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt

    LPAREN          shift and go to state 194


state 178

    (52) scoped_while_stmt -> WHILE . LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE

    LPAREN          shift and go to state 195


state 179

    (53) scoped_for_stmt -> FOR . LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE

    LPAREN          shift and go to state 196


state 180

    (31) return -> RETURN . expr
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (57) var -> . ID
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    ID              shift and go to state 30
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

    expr                           shift and go to state 197
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    boolean_expr                   shift and go to state 20
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    var                            shift and go to state 97
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 181

    (42) if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE . elif_stmt
    (43) elif_stmt -> . ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (44) elif_stmt -> . else_stmt
    (45) elif_stmt -> . empty
    (46) else_stmt -> . ELSE LBRACE block RBRACE
    (110) empty -> .

    ELIF            shift and go to state 199
    ELSE            shift and go to state 202
    FINAL           reduce using rule 110 (empty -> .)
    FN              reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    FOR             reduce using rule 110 (empty -> .)
    PRINT           reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    STRING          reduce using rule 110 (empty -> .)
    NOT             reduce using rule 110 (empty -> .)
    NULL            reduce using rule 110 (empty -> .)
    PLUS            reduce using rule 110 (empty -> .)
    MINUS           reduce using rule 110 (empty -> .)
    INTEGER         reduce using rule 110 (empty -> .)
    FLOAT           reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    BOOLEAN         reduce using rule 110 (empty -> .)
    $end            reduce using rule 110 (empty -> .)
    RBRACE          reduce using rule 110 (empty -> .)

    elif_stmt                      shift and go to state 198
    else_stmt                      shift and go to state 200
    empty                          shift and go to state 201

state 182

    (55) while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .

    FINAL           reduce using rule 55 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    FN              reduce using rule 55 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    IF              reduce using rule 55 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    WHILE           reduce using rule 55 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    FOR             reduce using rule 55 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    PRINT           reduce using rule 55 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    ID              reduce using rule 55 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    STRING          reduce using rule 55 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    NOT             reduce using rule 55 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    NULL            reduce using rule 55 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    PLUS            reduce using rule 55 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    MINUS           reduce using rule 55 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    INTEGER         reduce using rule 55 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    FLOAT           reduce using rule 55 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    LPAREN          reduce using rule 55 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    BOOLEAN         reduce using rule 55 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    $end            reduce using rule 55 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    RBRACE          reduce using rule 55 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)


state 183

    (56) for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto . RPAREN LBRACE block RBRACE

    RPAREN          shift and go to state 203


state 184

    (67) var_auto -> var . INCREMENT
    (68) var_auto -> var . DECREMENT

    INCREMENT       shift and go to state 63
    DECREMENT       shift and go to state 64


state 185

    (32) func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .

    FINAL           reduce using rule 32 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    FN              reduce using rule 32 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    IF              reduce using rule 32 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    WHILE           reduce using rule 32 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    FOR             reduce using rule 32 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    PRINT           reduce using rule 32 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    ID              reduce using rule 32 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    STRING          reduce using rule 32 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    NOT             reduce using rule 32 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    NULL            reduce using rule 32 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    PLUS            reduce using rule 32 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    MINUS           reduce using rule 32 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    INTEGER         reduce using rule 32 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    FLOAT           reduce using rule 32 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    LPAREN          reduce using rule 32 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    BOOLEAN         reduce using rule 32 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    $end            reduce using rule 32 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    RBRACE          reduce using rule 32 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    RETURN          reduce using rule 32 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)


state 186

    (17) scoped_statement_list -> scoped_statement scoped_statement_list .

    RBRACE          reduce using rule 17 (scoped_statement_list -> scoped_statement scoped_statement_list .)


state 187

    (19) scoped_statement -> var_assign SEMI .

    FINAL           reduce using rule 19 (scoped_statement -> var_assign SEMI .)
    FN              reduce using rule 19 (scoped_statement -> var_assign SEMI .)
    IF              reduce using rule 19 (scoped_statement -> var_assign SEMI .)
    WHILE           reduce using rule 19 (scoped_statement -> var_assign SEMI .)
    FOR             reduce using rule 19 (scoped_statement -> var_assign SEMI .)
    PRINT           reduce using rule 19 (scoped_statement -> var_assign SEMI .)
    RETURN          reduce using rule 19 (scoped_statement -> var_assign SEMI .)
    ID              reduce using rule 19 (scoped_statement -> var_assign SEMI .)
    STRING          reduce using rule 19 (scoped_statement -> var_assign SEMI .)
    NOT             reduce using rule 19 (scoped_statement -> var_assign SEMI .)
    NULL            reduce using rule 19 (scoped_statement -> var_assign SEMI .)
    PLUS            reduce using rule 19 (scoped_statement -> var_assign SEMI .)
    MINUS           reduce using rule 19 (scoped_statement -> var_assign SEMI .)
    INTEGER         reduce using rule 19 (scoped_statement -> var_assign SEMI .)
    FLOAT           reduce using rule 19 (scoped_statement -> var_assign SEMI .)
    LPAREN          reduce using rule 19 (scoped_statement -> var_assign SEMI .)
    BOOLEAN         reduce using rule 19 (scoped_statement -> var_assign SEMI .)
    RBRACE          reduce using rule 19 (scoped_statement -> var_assign SEMI .)


state 188

    (20) scoped_statement -> final_assign SEMI .

    FINAL           reduce using rule 20 (scoped_statement -> final_assign SEMI .)
    FN              reduce using rule 20 (scoped_statement -> final_assign SEMI .)
    IF              reduce using rule 20 (scoped_statement -> final_assign SEMI .)
    WHILE           reduce using rule 20 (scoped_statement -> final_assign SEMI .)
    FOR             reduce using rule 20 (scoped_statement -> final_assign SEMI .)
    PRINT           reduce using rule 20 (scoped_statement -> final_assign SEMI .)
    RETURN          reduce using rule 20 (scoped_statement -> final_assign SEMI .)
    ID              reduce using rule 20 (scoped_statement -> final_assign SEMI .)
    STRING          reduce using rule 20 (scoped_statement -> final_assign SEMI .)
    NOT             reduce using rule 20 (scoped_statement -> final_assign SEMI .)
    NULL            reduce using rule 20 (scoped_statement -> final_assign SEMI .)
    PLUS            reduce using rule 20 (scoped_statement -> final_assign SEMI .)
    MINUS           reduce using rule 20 (scoped_statement -> final_assign SEMI .)
    INTEGER         reduce using rule 20 (scoped_statement -> final_assign SEMI .)
    FLOAT           reduce using rule 20 (scoped_statement -> final_assign SEMI .)
    LPAREN          reduce using rule 20 (scoped_statement -> final_assign SEMI .)
    BOOLEAN         reduce using rule 20 (scoped_statement -> final_assign SEMI .)
    RBRACE          reduce using rule 20 (scoped_statement -> final_assign SEMI .)


state 189

    (21) scoped_statement -> var_compound_assign SEMI .

    FINAL           reduce using rule 21 (scoped_statement -> var_compound_assign SEMI .)
    FN              reduce using rule 21 (scoped_statement -> var_compound_assign SEMI .)
    IF              reduce using rule 21 (scoped_statement -> var_compound_assign SEMI .)
    WHILE           reduce using rule 21 (scoped_statement -> var_compound_assign SEMI .)
    FOR             reduce using rule 21 (scoped_statement -> var_compound_assign SEMI .)
    PRINT           reduce using rule 21 (scoped_statement -> var_compound_assign SEMI .)
    RETURN          reduce using rule 21 (scoped_statement -> var_compound_assign SEMI .)
    ID              reduce using rule 21 (scoped_statement -> var_compound_assign SEMI .)
    STRING          reduce using rule 21 (scoped_statement -> var_compound_assign SEMI .)
    NOT             reduce using rule 21 (scoped_statement -> var_compound_assign SEMI .)
    NULL            reduce using rule 21 (scoped_statement -> var_compound_assign SEMI .)
    PLUS            reduce using rule 21 (scoped_statement -> var_compound_assign SEMI .)
    MINUS           reduce using rule 21 (scoped_statement -> var_compound_assign SEMI .)
    INTEGER         reduce using rule 21 (scoped_statement -> var_compound_assign SEMI .)
    FLOAT           reduce using rule 21 (scoped_statement -> var_compound_assign SEMI .)
    LPAREN          reduce using rule 21 (scoped_statement -> var_compound_assign SEMI .)
    BOOLEAN         reduce using rule 21 (scoped_statement -> var_compound_assign SEMI .)
    RBRACE          reduce using rule 21 (scoped_statement -> var_compound_assign SEMI .)


state 190

    (22) scoped_statement -> var_auto SEMI .

    FINAL           reduce using rule 22 (scoped_statement -> var_auto SEMI .)
    FN              reduce using rule 22 (scoped_statement -> var_auto SEMI .)
    IF              reduce using rule 22 (scoped_statement -> var_auto SEMI .)
    WHILE           reduce using rule 22 (scoped_statement -> var_auto SEMI .)
    FOR             reduce using rule 22 (scoped_statement -> var_auto SEMI .)
    PRINT           reduce using rule 22 (scoped_statement -> var_auto SEMI .)
    RETURN          reduce using rule 22 (scoped_statement -> var_auto SEMI .)
    ID              reduce using rule 22 (scoped_statement -> var_auto SEMI .)
    STRING          reduce using rule 22 (scoped_statement -> var_auto SEMI .)
    NOT             reduce using rule 22 (scoped_statement -> var_auto SEMI .)
    NULL            reduce using rule 22 (scoped_statement -> var_auto SEMI .)
    PLUS            reduce using rule 22 (scoped_statement -> var_auto SEMI .)
    MINUS           reduce using rule 22 (scoped_statement -> var_auto SEMI .)
    INTEGER         reduce using rule 22 (scoped_statement -> var_auto SEMI .)
    FLOAT           reduce using rule 22 (scoped_statement -> var_auto SEMI .)
    LPAREN          reduce using rule 22 (scoped_statement -> var_auto SEMI .)
    BOOLEAN         reduce using rule 22 (scoped_statement -> var_auto SEMI .)
    RBRACE          reduce using rule 22 (scoped_statement -> var_auto SEMI .)


state 191

    (23) scoped_statement -> expr SEMI .

    FINAL           reduce using rule 23 (scoped_statement -> expr SEMI .)
    FN              reduce using rule 23 (scoped_statement -> expr SEMI .)
    IF              reduce using rule 23 (scoped_statement -> expr SEMI .)
    WHILE           reduce using rule 23 (scoped_statement -> expr SEMI .)
    FOR             reduce using rule 23 (scoped_statement -> expr SEMI .)
    PRINT           reduce using rule 23 (scoped_statement -> expr SEMI .)
    RETURN          reduce using rule 23 (scoped_statement -> expr SEMI .)
    ID              reduce using rule 23 (scoped_statement -> expr SEMI .)
    STRING          reduce using rule 23 (scoped_statement -> expr SEMI .)
    NOT             reduce using rule 23 (scoped_statement -> expr SEMI .)
    NULL            reduce using rule 23 (scoped_statement -> expr SEMI .)
    PLUS            reduce using rule 23 (scoped_statement -> expr SEMI .)
    MINUS           reduce using rule 23 (scoped_statement -> expr SEMI .)
    INTEGER         reduce using rule 23 (scoped_statement -> expr SEMI .)
    FLOAT           reduce using rule 23 (scoped_statement -> expr SEMI .)
    LPAREN          reduce using rule 23 (scoped_statement -> expr SEMI .)
    BOOLEAN         reduce using rule 23 (scoped_statement -> expr SEMI .)
    RBRACE          reduce using rule 23 (scoped_statement -> expr SEMI .)


state 192

    (28) scoped_statement -> print_stmt SEMI .

    FINAL           reduce using rule 28 (scoped_statement -> print_stmt SEMI .)
    FN              reduce using rule 28 (scoped_statement -> print_stmt SEMI .)
    IF              reduce using rule 28 (scoped_statement -> print_stmt SEMI .)
    WHILE           reduce using rule 28 (scoped_statement -> print_stmt SEMI .)
    FOR             reduce using rule 28 (scoped_statement -> print_stmt SEMI .)
    PRINT           reduce using rule 28 (scoped_statement -> print_stmt SEMI .)
    RETURN          reduce using rule 28 (scoped_statement -> print_stmt SEMI .)
    ID              reduce using rule 28 (scoped_statement -> print_stmt SEMI .)
    STRING          reduce using rule 28 (scoped_statement -> print_stmt SEMI .)
    NOT             reduce using rule 28 (scoped_statement -> print_stmt SEMI .)
    NULL            reduce using rule 28 (scoped_statement -> print_stmt SEMI .)
    PLUS            reduce using rule 28 (scoped_statement -> print_stmt SEMI .)
    MINUS           reduce using rule 28 (scoped_statement -> print_stmt SEMI .)
    INTEGER         reduce using rule 28 (scoped_statement -> print_stmt SEMI .)
    FLOAT           reduce using rule 28 (scoped_statement -> print_stmt SEMI .)
    LPAREN          reduce using rule 28 (scoped_statement -> print_stmt SEMI .)
    BOOLEAN         reduce using rule 28 (scoped_statement -> print_stmt SEMI .)
    RBRACE          reduce using rule 28 (scoped_statement -> print_stmt SEMI .)


state 193

    (29) scoped_statement -> return SEMI .

    FINAL           reduce using rule 29 (scoped_statement -> return SEMI .)
    FN              reduce using rule 29 (scoped_statement -> return SEMI .)
    IF              reduce using rule 29 (scoped_statement -> return SEMI .)
    WHILE           reduce using rule 29 (scoped_statement -> return SEMI .)
    FOR             reduce using rule 29 (scoped_statement -> return SEMI .)
    PRINT           reduce using rule 29 (scoped_statement -> return SEMI .)
    RETURN          reduce using rule 29 (scoped_statement -> return SEMI .)
    ID              reduce using rule 29 (scoped_statement -> return SEMI .)
    STRING          reduce using rule 29 (scoped_statement -> return SEMI .)
    NOT             reduce using rule 29 (scoped_statement -> return SEMI .)
    NULL            reduce using rule 29 (scoped_statement -> return SEMI .)
    PLUS            reduce using rule 29 (scoped_statement -> return SEMI .)
    MINUS           reduce using rule 29 (scoped_statement -> return SEMI .)
    INTEGER         reduce using rule 29 (scoped_statement -> return SEMI .)
    FLOAT           reduce using rule 29 (scoped_statement -> return SEMI .)
    LPAREN          reduce using rule 29 (scoped_statement -> return SEMI .)
    BOOLEAN         reduce using rule 29 (scoped_statement -> return SEMI .)
    RBRACE          reduce using rule 29 (scoped_statement -> return SEMI .)


state 194

    (47) scoped_if_stmt -> IF LPAREN . boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr
    (57) var -> . ID
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var

    NOT             shift and go to state 35
    LPAREN          shift and go to state 94
    BOOLEAN         shift and go to state 40
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39

    boolean_expr                   shift and go to state 204
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41
    var                            shift and go to state 95
    expr                           shift and go to state 83
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34

state 195

    (52) scoped_while_stmt -> WHILE LPAREN . boolean_expr RPAREN LBRACE scoped_block RBRACE
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr
    (57) var -> . ID
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var

    NOT             shift and go to state 35
    LPAREN          shift and go to state 94
    BOOLEAN         shift and go to state 40
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39

    boolean_expr                   shift and go to state 205
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41
    var                            shift and go to state 95
    expr                           shift and go to state 83
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34

state 196

    (53) scoped_for_stmt -> FOR LPAREN . var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (58) var_assign -> . var ASSIGN expr
    (57) var -> . ID

    ID              shift and go to state 30

    var_assign                     shift and go to state 206
    var                            shift and go to state 134

state 197

    (31) return -> RETURN expr .
    (102) comparison -> expr . EQ expr
    (103) comparison -> expr . NE expr
    (104) comparison -> expr . LT expr
    (105) comparison -> expr . GT expr
    (106) comparison -> expr . LE expr
    (107) comparison -> expr . GE expr

    SEMI            reduce using rule 31 (return -> RETURN expr .)
    EQ              shift and go to state 48
    NE              shift and go to state 49
    LT              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    GE              shift and go to state 53


state 198

    (42) if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .

    FINAL           reduce using rule 42 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    FN              reduce using rule 42 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    IF              reduce using rule 42 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    WHILE           reduce using rule 42 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    FOR             reduce using rule 42 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    PRINT           reduce using rule 42 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    ID              reduce using rule 42 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    STRING          reduce using rule 42 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    NOT             reduce using rule 42 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    NULL            reduce using rule 42 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    PLUS            reduce using rule 42 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    MINUS           reduce using rule 42 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    INTEGER         reduce using rule 42 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    FLOAT           reduce using rule 42 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    LPAREN          reduce using rule 42 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    BOOLEAN         reduce using rule 42 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    $end            reduce using rule 42 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    RBRACE          reduce using rule 42 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)


state 199

    (43) elif_stmt -> ELIF . LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt

    LPAREN          shift and go to state 207


state 200

    (44) elif_stmt -> else_stmt .

    FINAL           reduce using rule 44 (elif_stmt -> else_stmt .)
    FN              reduce using rule 44 (elif_stmt -> else_stmt .)
    IF              reduce using rule 44 (elif_stmt -> else_stmt .)
    WHILE           reduce using rule 44 (elif_stmt -> else_stmt .)
    FOR             reduce using rule 44 (elif_stmt -> else_stmt .)
    PRINT           reduce using rule 44 (elif_stmt -> else_stmt .)
    ID              reduce using rule 44 (elif_stmt -> else_stmt .)
    STRING          reduce using rule 44 (elif_stmt -> else_stmt .)
    NOT             reduce using rule 44 (elif_stmt -> else_stmt .)
    NULL            reduce using rule 44 (elif_stmt -> else_stmt .)
    PLUS            reduce using rule 44 (elif_stmt -> else_stmt .)
    MINUS           reduce using rule 44 (elif_stmt -> else_stmt .)
    INTEGER         reduce using rule 44 (elif_stmt -> else_stmt .)
    FLOAT           reduce using rule 44 (elif_stmt -> else_stmt .)
    LPAREN          reduce using rule 44 (elif_stmt -> else_stmt .)
    BOOLEAN         reduce using rule 44 (elif_stmt -> else_stmt .)
    $end            reduce using rule 44 (elif_stmt -> else_stmt .)
    RBRACE          reduce using rule 44 (elif_stmt -> else_stmt .)


state 201

    (45) elif_stmt -> empty .

    FINAL           reduce using rule 45 (elif_stmt -> empty .)
    FN              reduce using rule 45 (elif_stmt -> empty .)
    IF              reduce using rule 45 (elif_stmt -> empty .)
    WHILE           reduce using rule 45 (elif_stmt -> empty .)
    FOR             reduce using rule 45 (elif_stmt -> empty .)
    PRINT           reduce using rule 45 (elif_stmt -> empty .)
    ID              reduce using rule 45 (elif_stmt -> empty .)
    STRING          reduce using rule 45 (elif_stmt -> empty .)
    NOT             reduce using rule 45 (elif_stmt -> empty .)
    NULL            reduce using rule 45 (elif_stmt -> empty .)
    PLUS            reduce using rule 45 (elif_stmt -> empty .)
    MINUS           reduce using rule 45 (elif_stmt -> empty .)
    INTEGER         reduce using rule 45 (elif_stmt -> empty .)
    FLOAT           reduce using rule 45 (elif_stmt -> empty .)
    LPAREN          reduce using rule 45 (elif_stmt -> empty .)
    BOOLEAN         reduce using rule 45 (elif_stmt -> empty .)
    $end            reduce using rule 45 (elif_stmt -> empty .)
    RBRACE          reduce using rule 45 (elif_stmt -> empty .)


state 202

    (46) else_stmt -> ELSE . LBRACE block RBRACE

    LBRACE          shift and go to state 208


state 203

    (56) for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN . LBRACE block RBRACE

    LBRACE          shift and go to state 209


state 204

    (47) scoped_if_stmt -> IF LPAREN boolean_expr . RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (94) boolean_expr -> boolean_expr . AND boolean_expr
    (95) boolean_expr -> boolean_expr . OR boolean_expr
    (71) expr -> boolean_expr .
    (109) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    RPAREN          shift and go to state 210
    AND             shift and go to state 75
    OR              shift and go to state 76
    EQ              reduce using rule 71 (expr -> boolean_expr .)
    NE              reduce using rule 71 (expr -> boolean_expr .)
    LT              reduce using rule 71 (expr -> boolean_expr .)
    GT              reduce using rule 71 (expr -> boolean_expr .)
    LE              reduce using rule 71 (expr -> boolean_expr .)
    GE              reduce using rule 71 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 77


state 205

    (52) scoped_while_stmt -> WHILE LPAREN boolean_expr . RPAREN LBRACE scoped_block RBRACE
    (94) boolean_expr -> boolean_expr . AND boolean_expr
    (95) boolean_expr -> boolean_expr . OR boolean_expr
    (71) expr -> boolean_expr .
    (109) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    RPAREN          shift and go to state 211
    AND             shift and go to state 75
    OR              shift and go to state 76
    EQ              reduce using rule 71 (expr -> boolean_expr .)
    NE              reduce using rule 71 (expr -> boolean_expr .)
    LT              reduce using rule 71 (expr -> boolean_expr .)
    GT              reduce using rule 71 (expr -> boolean_expr .)
    LE              reduce using rule 71 (expr -> boolean_expr .)
    GE              reduce using rule 71 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 77


state 206

    (53) scoped_for_stmt -> FOR LPAREN var_assign . SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE

    SEMI            shift and go to state 212


state 207

    (43) elif_stmt -> ELIF LPAREN . boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr
    (57) var -> . ID
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var

    NOT             shift and go to state 35
    LPAREN          shift and go to state 94
    BOOLEAN         shift and go to state 40
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39

    boolean_expr                   shift and go to state 213
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41
    var                            shift and go to state 95
    expr                           shift and go to state 83
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34

state 208

    (46) else_stmt -> ELSE LBRACE . block RBRACE
    (2) block -> . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . var_auto SEMI
    (9) statement -> . expr SEMI
    (10) statement -> . func_stmt
    (11) statement -> . if_stmt
    (12) statement -> . while_stmt
    (13) statement -> . for_stmt
    (14) statement -> . print_stmt SEMI
    (15) statement -> . empty
    (110) empty -> .
    (58) var_assign -> . var ASSIGN expr
    (59) final_assign -> . FINAL var ASSIGN expr
    (60) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (61) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (62) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (63) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (64) var_compound_assign -> . var POWER_ASSIGN num_expr
    (65) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (66) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (67) var_auto -> . var INCREMENT
    (68) var_auto -> . var DECREMENT
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (32) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (42) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (55) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (56) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (54) print_stmt -> . PRINT LPAREN expr RPAREN
    (57) var -> . ID
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 110 (empty -> .)
    FINAL           shift and go to state 17
    FN              shift and go to state 24
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    PRINT           shift and go to state 29
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

  ! FINAL           [ reduce using rule 110 (empty -> .) ]
  ! FN              [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! PRINT           [ reduce using rule 110 (empty -> .) ]
  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! NOT             [ reduce using rule 110 (empty -> .) ]
  ! NULL            [ reduce using rule 110 (empty -> .) ]
  ! PLUS            [ reduce using rule 110 (empty -> .) ]
  ! MINUS           [ reduce using rule 110 (empty -> .) ]
  ! INTEGER         [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LPAREN          [ reduce using rule 110 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 110 (empty -> .) ]

    block                          shift and go to state 214
    statement_list                 shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 5
    var_assign                     shift and go to state 6
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    var_auto                       shift and go to state 9
    expr                           shift and go to state 10
    func_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    while_stmt                     shift and go to state 13
    for_stmt                       shift and go to state 14
    print_stmt                     shift and go to state 15
    var                            shift and go to state 16
    num_expr                       shift and go to state 18
    string_expr                    shift and go to state 19
    boolean_expr                   shift and go to state 20
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 209

    (56) for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE . block RBRACE
    (2) block -> . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . var_auto SEMI
    (9) statement -> . expr SEMI
    (10) statement -> . func_stmt
    (11) statement -> . if_stmt
    (12) statement -> . while_stmt
    (13) statement -> . for_stmt
    (14) statement -> . print_stmt SEMI
    (15) statement -> . empty
    (110) empty -> .
    (58) var_assign -> . var ASSIGN expr
    (59) final_assign -> . FINAL var ASSIGN expr
    (60) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (61) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (62) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (63) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (64) var_compound_assign -> . var POWER_ASSIGN num_expr
    (65) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (66) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (67) var_auto -> . var INCREMENT
    (68) var_auto -> . var DECREMENT
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (32) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (42) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (55) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (56) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (54) print_stmt -> . PRINT LPAREN expr RPAREN
    (57) var -> . ID
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 110 (empty -> .)
    FINAL           shift and go to state 17
    FN              shift and go to state 24
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    PRINT           shift and go to state 29
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

  ! FINAL           [ reduce using rule 110 (empty -> .) ]
  ! FN              [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! PRINT           [ reduce using rule 110 (empty -> .) ]
  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! NOT             [ reduce using rule 110 (empty -> .) ]
  ! NULL            [ reduce using rule 110 (empty -> .) ]
  ! PLUS            [ reduce using rule 110 (empty -> .) ]
  ! MINUS           [ reduce using rule 110 (empty -> .) ]
  ! INTEGER         [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LPAREN          [ reduce using rule 110 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 110 (empty -> .) ]

    var_assign                     shift and go to state 6
    boolean_expr                   shift and go to state 20
    var_auto                       shift and go to state 9
    block                          shift and go to state 215
    statement_list                 shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 5
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    expr                           shift and go to state 10
    func_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    while_stmt                     shift and go to state 13
    for_stmt                       shift and go to state 14
    print_stmt                     shift and go to state 15
    var                            shift and go to state 16
    num_expr                       shift and go to state 18
    string_expr                    shift and go to state 19
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 210

    (47) scoped_if_stmt -> IF LPAREN boolean_expr RPAREN . LBRACE scoped_block RBRACE scoped_elif_stmt

    LBRACE          shift and go to state 216


state 211

    (52) scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN . LBRACE scoped_block RBRACE

    LBRACE          shift and go to state 217


state 212

    (53) scoped_for_stmt -> FOR LPAREN var_assign SEMI . boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr
    (57) var -> . ID
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var

    NOT             shift and go to state 35
    LPAREN          shift and go to state 94
    BOOLEAN         shift and go to state 40
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39

    boolean_expr                   shift and go to state 218
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41
    var                            shift and go to state 95
    expr                           shift and go to state 83
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34

state 213

    (43) elif_stmt -> ELIF LPAREN boolean_expr . RPAREN LBRACE block RBRACE elif_stmt
    (94) boolean_expr -> boolean_expr . AND boolean_expr
    (95) boolean_expr -> boolean_expr . OR boolean_expr
    (71) expr -> boolean_expr .
    (109) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    RPAREN          shift and go to state 219
    AND             shift and go to state 75
    OR              shift and go to state 76
    EQ              reduce using rule 71 (expr -> boolean_expr .)
    NE              reduce using rule 71 (expr -> boolean_expr .)
    LT              reduce using rule 71 (expr -> boolean_expr .)
    GT              reduce using rule 71 (expr -> boolean_expr .)
    LE              reduce using rule 71 (expr -> boolean_expr .)
    GE              reduce using rule 71 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 77


state 214

    (46) else_stmt -> ELSE LBRACE block . RBRACE

    RBRACE          shift and go to state 220


state 215

    (56) for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block . RBRACE

    RBRACE          shift and go to state 221


state 216

    (47) scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE . scoped_block RBRACE scoped_elif_stmt
    (16) scoped_block -> . scoped_statement_list
    (17) scoped_statement_list -> . scoped_statement scoped_statement_list
    (18) scoped_statement_list -> . empty
    (19) scoped_statement -> . var_assign SEMI
    (20) scoped_statement -> . final_assign SEMI
    (21) scoped_statement -> . var_compound_assign SEMI
    (22) scoped_statement -> . var_auto SEMI
    (23) scoped_statement -> . expr SEMI
    (24) scoped_statement -> . func_stmt
    (25) scoped_statement -> . scoped_if_stmt
    (26) scoped_statement -> . scoped_while_stmt
    (27) scoped_statement -> . scoped_for_stmt
    (28) scoped_statement -> . print_stmt SEMI
    (29) scoped_statement -> . return SEMI
    (30) scoped_statement -> . empty
    (110) empty -> .
    (58) var_assign -> . var ASSIGN expr
    (59) final_assign -> . FINAL var ASSIGN expr
    (60) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (61) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (62) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (63) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (64) var_compound_assign -> . var POWER_ASSIGN num_expr
    (65) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (66) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (67) var_auto -> . var INCREMENT
    (68) var_auto -> . var DECREMENT
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (32) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (47) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (52) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (53) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (54) print_stmt -> . PRINT LPAREN expr RPAREN
    (31) return -> . RETURN expr
    (57) var -> . ID
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 110 (empty -> .)
    FINAL           shift and go to state 17
    FN              shift and go to state 24
    IF              shift and go to state 177
    WHILE           shift and go to state 178
    FOR             shift and go to state 179
    PRINT           shift and go to state 29
    RETURN          shift and go to state 180
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

  ! FINAL           [ reduce using rule 110 (empty -> .) ]
  ! FN              [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! PRINT           [ reduce using rule 110 (empty -> .) ]
  ! RETURN          [ reduce using rule 110 (empty -> .) ]
  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! NOT             [ reduce using rule 110 (empty -> .) ]
  ! NULL            [ reduce using rule 110 (empty -> .) ]
  ! PLUS            [ reduce using rule 110 (empty -> .) ]
  ! MINUS           [ reduce using rule 110 (empty -> .) ]
  ! INTEGER         [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LPAREN          [ reduce using rule 110 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 110 (empty -> .) ]

    boolean_expr                   shift and go to state 20
    scoped_block                   shift and go to state 222
    scoped_statement_list          shift and go to state 163
    scoped_statement               shift and go to state 164
    empty                          shift and go to state 165
    var_assign                     shift and go to state 166
    final_assign                   shift and go to state 167
    var_compound_assign            shift and go to state 168
    var_auto                       shift and go to state 169
    expr                           shift and go to state 170
    func_stmt                      shift and go to state 171
    scoped_if_stmt                 shift and go to state 172
    scoped_while_stmt              shift and go to state 173
    scoped_for_stmt                shift and go to state 174
    print_stmt                     shift and go to state 175
    return                         shift and go to state 176
    var                            shift and go to state 16
    num_expr                       shift and go to state 18
    string_expr                    shift and go to state 19
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 217

    (52) scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE . scoped_block RBRACE
    (16) scoped_block -> . scoped_statement_list
    (17) scoped_statement_list -> . scoped_statement scoped_statement_list
    (18) scoped_statement_list -> . empty
    (19) scoped_statement -> . var_assign SEMI
    (20) scoped_statement -> . final_assign SEMI
    (21) scoped_statement -> . var_compound_assign SEMI
    (22) scoped_statement -> . var_auto SEMI
    (23) scoped_statement -> . expr SEMI
    (24) scoped_statement -> . func_stmt
    (25) scoped_statement -> . scoped_if_stmt
    (26) scoped_statement -> . scoped_while_stmt
    (27) scoped_statement -> . scoped_for_stmt
    (28) scoped_statement -> . print_stmt SEMI
    (29) scoped_statement -> . return SEMI
    (30) scoped_statement -> . empty
    (110) empty -> .
    (58) var_assign -> . var ASSIGN expr
    (59) final_assign -> . FINAL var ASSIGN expr
    (60) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (61) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (62) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (63) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (64) var_compound_assign -> . var POWER_ASSIGN num_expr
    (65) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (66) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (67) var_auto -> . var INCREMENT
    (68) var_auto -> . var DECREMENT
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (32) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (47) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (52) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (53) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (54) print_stmt -> . PRINT LPAREN expr RPAREN
    (31) return -> . RETURN expr
    (57) var -> . ID
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 110 (empty -> .)
    FINAL           shift and go to state 17
    FN              shift and go to state 24
    IF              shift and go to state 177
    WHILE           shift and go to state 178
    FOR             shift and go to state 179
    PRINT           shift and go to state 29
    RETURN          shift and go to state 180
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

  ! FINAL           [ reduce using rule 110 (empty -> .) ]
  ! FN              [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! PRINT           [ reduce using rule 110 (empty -> .) ]
  ! RETURN          [ reduce using rule 110 (empty -> .) ]
  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! NOT             [ reduce using rule 110 (empty -> .) ]
  ! NULL            [ reduce using rule 110 (empty -> .) ]
  ! PLUS            [ reduce using rule 110 (empty -> .) ]
  ! MINUS           [ reduce using rule 110 (empty -> .) ]
  ! INTEGER         [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LPAREN          [ reduce using rule 110 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 110 (empty -> .) ]

    boolean_expr                   shift and go to state 20
    scoped_block                   shift and go to state 223
    scoped_statement_list          shift and go to state 163
    scoped_statement               shift and go to state 164
    empty                          shift and go to state 165
    var_assign                     shift and go to state 166
    final_assign                   shift and go to state 167
    var_compound_assign            shift and go to state 168
    var_auto                       shift and go to state 169
    expr                           shift and go to state 170
    func_stmt                      shift and go to state 171
    scoped_if_stmt                 shift and go to state 172
    scoped_while_stmt              shift and go to state 173
    scoped_for_stmt                shift and go to state 174
    print_stmt                     shift and go to state 175
    return                         shift and go to state 176
    var                            shift and go to state 16
    num_expr                       shift and go to state 18
    string_expr                    shift and go to state 19
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 218

    (53) scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr . SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (94) boolean_expr -> boolean_expr . AND boolean_expr
    (95) boolean_expr -> boolean_expr . OR boolean_expr
    (71) expr -> boolean_expr .
    (109) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    SEMI            shift and go to state 224
    AND             shift and go to state 75
    OR              shift and go to state 76
    EQ              reduce using rule 71 (expr -> boolean_expr .)
    NE              reduce using rule 71 (expr -> boolean_expr .)
    LT              reduce using rule 71 (expr -> boolean_expr .)
    GT              reduce using rule 71 (expr -> boolean_expr .)
    LE              reduce using rule 71 (expr -> boolean_expr .)
    GE              reduce using rule 71 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 77


state 219

    (43) elif_stmt -> ELIF LPAREN boolean_expr RPAREN . LBRACE block RBRACE elif_stmt

    LBRACE          shift and go to state 225


state 220

    (46) else_stmt -> ELSE LBRACE block RBRACE .

    FINAL           reduce using rule 46 (else_stmt -> ELSE LBRACE block RBRACE .)
    FN              reduce using rule 46 (else_stmt -> ELSE LBRACE block RBRACE .)
    IF              reduce using rule 46 (else_stmt -> ELSE LBRACE block RBRACE .)
    WHILE           reduce using rule 46 (else_stmt -> ELSE LBRACE block RBRACE .)
    FOR             reduce using rule 46 (else_stmt -> ELSE LBRACE block RBRACE .)
    PRINT           reduce using rule 46 (else_stmt -> ELSE LBRACE block RBRACE .)
    ID              reduce using rule 46 (else_stmt -> ELSE LBRACE block RBRACE .)
    STRING          reduce using rule 46 (else_stmt -> ELSE LBRACE block RBRACE .)
    NOT             reduce using rule 46 (else_stmt -> ELSE LBRACE block RBRACE .)
    NULL            reduce using rule 46 (else_stmt -> ELSE LBRACE block RBRACE .)
    PLUS            reduce using rule 46 (else_stmt -> ELSE LBRACE block RBRACE .)
    MINUS           reduce using rule 46 (else_stmt -> ELSE LBRACE block RBRACE .)
    INTEGER         reduce using rule 46 (else_stmt -> ELSE LBRACE block RBRACE .)
    FLOAT           reduce using rule 46 (else_stmt -> ELSE LBRACE block RBRACE .)
    LPAREN          reduce using rule 46 (else_stmt -> ELSE LBRACE block RBRACE .)
    BOOLEAN         reduce using rule 46 (else_stmt -> ELSE LBRACE block RBRACE .)
    $end            reduce using rule 46 (else_stmt -> ELSE LBRACE block RBRACE .)
    RBRACE          reduce using rule 46 (else_stmt -> ELSE LBRACE block RBRACE .)


state 221

    (56) for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .

    FINAL           reduce using rule 56 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    FN              reduce using rule 56 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    IF              reduce using rule 56 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    WHILE           reduce using rule 56 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    FOR             reduce using rule 56 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    PRINT           reduce using rule 56 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    ID              reduce using rule 56 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    STRING          reduce using rule 56 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    NOT             reduce using rule 56 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    NULL            reduce using rule 56 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    PLUS            reduce using rule 56 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    MINUS           reduce using rule 56 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    INTEGER         reduce using rule 56 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    FLOAT           reduce using rule 56 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    LPAREN          reduce using rule 56 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    BOOLEAN         reduce using rule 56 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    $end            reduce using rule 56 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    RBRACE          reduce using rule 56 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)


state 222

    (47) scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block . RBRACE scoped_elif_stmt

    RBRACE          shift and go to state 226


state 223

    (52) scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block . RBRACE

    RBRACE          shift and go to state 227


state 224

    (53) scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI . var_auto RPAREN LBRACE scoped_block RBRACE
    (67) var_auto -> . var INCREMENT
    (68) var_auto -> . var DECREMENT
    (57) var -> . ID

    ID              shift and go to state 30

    var_auto                       shift and go to state 228
    var                            shift and go to state 184

state 225

    (43) elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE . block RBRACE elif_stmt
    (2) block -> . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . var_auto SEMI
    (9) statement -> . expr SEMI
    (10) statement -> . func_stmt
    (11) statement -> . if_stmt
    (12) statement -> . while_stmt
    (13) statement -> . for_stmt
    (14) statement -> . print_stmt SEMI
    (15) statement -> . empty
    (110) empty -> .
    (58) var_assign -> . var ASSIGN expr
    (59) final_assign -> . FINAL var ASSIGN expr
    (60) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (61) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (62) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (63) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (64) var_compound_assign -> . var POWER_ASSIGN num_expr
    (65) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (66) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (67) var_auto -> . var INCREMENT
    (68) var_auto -> . var DECREMENT
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (32) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (42) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (55) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (56) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (54) print_stmt -> . PRINT LPAREN expr RPAREN
    (57) var -> . ID
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 110 (empty -> .)
    FINAL           shift and go to state 17
    FN              shift and go to state 24
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28
    PRINT           shift and go to state 29
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

  ! FINAL           [ reduce using rule 110 (empty -> .) ]
  ! FN              [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! PRINT           [ reduce using rule 110 (empty -> .) ]
  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! NOT             [ reduce using rule 110 (empty -> .) ]
  ! NULL            [ reduce using rule 110 (empty -> .) ]
  ! PLUS            [ reduce using rule 110 (empty -> .) ]
  ! MINUS           [ reduce using rule 110 (empty -> .) ]
  ! INTEGER         [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LPAREN          [ reduce using rule 110 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 110 (empty -> .) ]

    boolean_expr                   shift and go to state 20
    block                          shift and go to state 229
    statement_list                 shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 5
    var_assign                     shift and go to state 6
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    var_auto                       shift and go to state 9
    expr                           shift and go to state 10
    func_stmt                      shift and go to state 11
    if_stmt                        shift and go to state 12
    while_stmt                     shift and go to state 13
    for_stmt                       shift and go to state 14
    print_stmt                     shift and go to state 15
    var                            shift and go to state 16
    num_expr                       shift and go to state 18
    string_expr                    shift and go to state 19
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 226

    (47) scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE . scoped_elif_stmt
    (48) scoped_elif_stmt -> . ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (49) scoped_elif_stmt -> . scoped_else_stmt
    (50) scoped_elif_stmt -> . empty
    (51) scoped_else_stmt -> . ELSE LBRACE scoped_block RBRACE
    (110) empty -> .

    ELIF            shift and go to state 231
    ELSE            shift and go to state 234
    FINAL           reduce using rule 110 (empty -> .)
    FN              reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    FOR             reduce using rule 110 (empty -> .)
    PRINT           reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    STRING          reduce using rule 110 (empty -> .)
    NOT             reduce using rule 110 (empty -> .)
    NULL            reduce using rule 110 (empty -> .)
    PLUS            reduce using rule 110 (empty -> .)
    MINUS           reduce using rule 110 (empty -> .)
    INTEGER         reduce using rule 110 (empty -> .)
    FLOAT           reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    BOOLEAN         reduce using rule 110 (empty -> .)
    RBRACE          reduce using rule 110 (empty -> .)

    scoped_elif_stmt               shift and go to state 230
    scoped_else_stmt               shift and go to state 232
    empty                          shift and go to state 233

state 227

    (52) scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .

    FINAL           reduce using rule 52 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    FN              reduce using rule 52 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    IF              reduce using rule 52 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    WHILE           reduce using rule 52 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    FOR             reduce using rule 52 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    PRINT           reduce using rule 52 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    RETURN          reduce using rule 52 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    ID              reduce using rule 52 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    STRING          reduce using rule 52 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    NOT             reduce using rule 52 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    NULL            reduce using rule 52 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    PLUS            reduce using rule 52 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    MINUS           reduce using rule 52 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    INTEGER         reduce using rule 52 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    FLOAT           reduce using rule 52 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    LPAREN          reduce using rule 52 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    BOOLEAN         reduce using rule 52 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    RBRACE          reduce using rule 52 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)


state 228

    (53) scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto . RPAREN LBRACE scoped_block RBRACE

    RPAREN          shift and go to state 235


state 229

    (43) elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block . RBRACE elif_stmt

    RBRACE          shift and go to state 236


state 230

    (47) scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .

    FINAL           reduce using rule 47 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    FN              reduce using rule 47 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    IF              reduce using rule 47 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    WHILE           reduce using rule 47 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    FOR             reduce using rule 47 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    PRINT           reduce using rule 47 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    RETURN          reduce using rule 47 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    ID              reduce using rule 47 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    STRING          reduce using rule 47 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    NOT             reduce using rule 47 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    NULL            reduce using rule 47 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    PLUS            reduce using rule 47 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    MINUS           reduce using rule 47 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    INTEGER         reduce using rule 47 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    FLOAT           reduce using rule 47 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    LPAREN          reduce using rule 47 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    BOOLEAN         reduce using rule 47 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    RBRACE          reduce using rule 47 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)


state 231

    (48) scoped_elif_stmt -> ELIF . LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt

    LPAREN          shift and go to state 237


state 232

    (49) scoped_elif_stmt -> scoped_else_stmt .

    FINAL           reduce using rule 49 (scoped_elif_stmt -> scoped_else_stmt .)
    FN              reduce using rule 49 (scoped_elif_stmt -> scoped_else_stmt .)
    IF              reduce using rule 49 (scoped_elif_stmt -> scoped_else_stmt .)
    WHILE           reduce using rule 49 (scoped_elif_stmt -> scoped_else_stmt .)
    FOR             reduce using rule 49 (scoped_elif_stmt -> scoped_else_stmt .)
    PRINT           reduce using rule 49 (scoped_elif_stmt -> scoped_else_stmt .)
    RETURN          reduce using rule 49 (scoped_elif_stmt -> scoped_else_stmt .)
    ID              reduce using rule 49 (scoped_elif_stmt -> scoped_else_stmt .)
    STRING          reduce using rule 49 (scoped_elif_stmt -> scoped_else_stmt .)
    NOT             reduce using rule 49 (scoped_elif_stmt -> scoped_else_stmt .)
    NULL            reduce using rule 49 (scoped_elif_stmt -> scoped_else_stmt .)
    PLUS            reduce using rule 49 (scoped_elif_stmt -> scoped_else_stmt .)
    MINUS           reduce using rule 49 (scoped_elif_stmt -> scoped_else_stmt .)
    INTEGER         reduce using rule 49 (scoped_elif_stmt -> scoped_else_stmt .)
    FLOAT           reduce using rule 49 (scoped_elif_stmt -> scoped_else_stmt .)
    LPAREN          reduce using rule 49 (scoped_elif_stmt -> scoped_else_stmt .)
    BOOLEAN         reduce using rule 49 (scoped_elif_stmt -> scoped_else_stmt .)
    RBRACE          reduce using rule 49 (scoped_elif_stmt -> scoped_else_stmt .)


state 233

    (50) scoped_elif_stmt -> empty .

    FINAL           reduce using rule 50 (scoped_elif_stmt -> empty .)
    FN              reduce using rule 50 (scoped_elif_stmt -> empty .)
    IF              reduce using rule 50 (scoped_elif_stmt -> empty .)
    WHILE           reduce using rule 50 (scoped_elif_stmt -> empty .)
    FOR             reduce using rule 50 (scoped_elif_stmt -> empty .)
    PRINT           reduce using rule 50 (scoped_elif_stmt -> empty .)
    RETURN          reduce using rule 50 (scoped_elif_stmt -> empty .)
    ID              reduce using rule 50 (scoped_elif_stmt -> empty .)
    STRING          reduce using rule 50 (scoped_elif_stmt -> empty .)
    NOT             reduce using rule 50 (scoped_elif_stmt -> empty .)
    NULL            reduce using rule 50 (scoped_elif_stmt -> empty .)
    PLUS            reduce using rule 50 (scoped_elif_stmt -> empty .)
    MINUS           reduce using rule 50 (scoped_elif_stmt -> empty .)
    INTEGER         reduce using rule 50 (scoped_elif_stmt -> empty .)
    FLOAT           reduce using rule 50 (scoped_elif_stmt -> empty .)
    LPAREN          reduce using rule 50 (scoped_elif_stmt -> empty .)
    BOOLEAN         reduce using rule 50 (scoped_elif_stmt -> empty .)
    RBRACE          reduce using rule 50 (scoped_elif_stmt -> empty .)


state 234

    (51) scoped_else_stmt -> ELSE . LBRACE scoped_block RBRACE

    LBRACE          shift and go to state 238


state 235

    (53) scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN . LBRACE scoped_block RBRACE

    LBRACE          shift and go to state 239


state 236

    (43) elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE . elif_stmt
    (43) elif_stmt -> . ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (44) elif_stmt -> . else_stmt
    (45) elif_stmt -> . empty
    (46) else_stmt -> . ELSE LBRACE block RBRACE
    (110) empty -> .

    ELIF            shift and go to state 199
    ELSE            shift and go to state 202
    FINAL           reduce using rule 110 (empty -> .)
    FN              reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    FOR             reduce using rule 110 (empty -> .)
    PRINT           reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    STRING          reduce using rule 110 (empty -> .)
    NOT             reduce using rule 110 (empty -> .)
    NULL            reduce using rule 110 (empty -> .)
    PLUS            reduce using rule 110 (empty -> .)
    MINUS           reduce using rule 110 (empty -> .)
    INTEGER         reduce using rule 110 (empty -> .)
    FLOAT           reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    BOOLEAN         reduce using rule 110 (empty -> .)
    $end            reduce using rule 110 (empty -> .)
    RBRACE          reduce using rule 110 (empty -> .)

    elif_stmt                      shift and go to state 240
    else_stmt                      shift and go to state 200
    empty                          shift and go to state 201

state 237

    (48) scoped_elif_stmt -> ELIF LPAREN . boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr
    (57) var -> . ID
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var

    NOT             shift and go to state 35
    LPAREN          shift and go to state 94
    BOOLEAN         shift and go to state 40
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39

    boolean_expr                   shift and go to state 241
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41
    var                            shift and go to state 95
    expr                           shift and go to state 83
    string_expr                    shift and go to state 19
    num_expr                       shift and go to state 18
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34

state 238

    (51) scoped_else_stmt -> ELSE LBRACE . scoped_block RBRACE
    (16) scoped_block -> . scoped_statement_list
    (17) scoped_statement_list -> . scoped_statement scoped_statement_list
    (18) scoped_statement_list -> . empty
    (19) scoped_statement -> . var_assign SEMI
    (20) scoped_statement -> . final_assign SEMI
    (21) scoped_statement -> . var_compound_assign SEMI
    (22) scoped_statement -> . var_auto SEMI
    (23) scoped_statement -> . expr SEMI
    (24) scoped_statement -> . func_stmt
    (25) scoped_statement -> . scoped_if_stmt
    (26) scoped_statement -> . scoped_while_stmt
    (27) scoped_statement -> . scoped_for_stmt
    (28) scoped_statement -> . print_stmt SEMI
    (29) scoped_statement -> . return SEMI
    (30) scoped_statement -> . empty
    (110) empty -> .
    (58) var_assign -> . var ASSIGN expr
    (59) final_assign -> . FINAL var ASSIGN expr
    (60) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (61) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (62) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (63) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (64) var_compound_assign -> . var POWER_ASSIGN num_expr
    (65) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (66) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (67) var_auto -> . var INCREMENT
    (68) var_auto -> . var DECREMENT
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (32) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (47) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (52) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (53) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (54) print_stmt -> . PRINT LPAREN expr RPAREN
    (31) return -> . RETURN expr
    (57) var -> . ID
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 110 (empty -> .)
    FINAL           shift and go to state 17
    FN              shift and go to state 24
    IF              shift and go to state 177
    WHILE           shift and go to state 178
    FOR             shift and go to state 179
    PRINT           shift and go to state 29
    RETURN          shift and go to state 180
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

  ! FINAL           [ reduce using rule 110 (empty -> .) ]
  ! FN              [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! PRINT           [ reduce using rule 110 (empty -> .) ]
  ! RETURN          [ reduce using rule 110 (empty -> .) ]
  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! NOT             [ reduce using rule 110 (empty -> .) ]
  ! NULL            [ reduce using rule 110 (empty -> .) ]
  ! PLUS            [ reduce using rule 110 (empty -> .) ]
  ! MINUS           [ reduce using rule 110 (empty -> .) ]
  ! INTEGER         [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LPAREN          [ reduce using rule 110 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 110 (empty -> .) ]

    scoped_block                   shift and go to state 242
    scoped_statement_list          shift and go to state 163
    scoped_statement               shift and go to state 164
    empty                          shift and go to state 165
    var_assign                     shift and go to state 166
    final_assign                   shift and go to state 167
    var_compound_assign            shift and go to state 168
    var_auto                       shift and go to state 169
    expr                           shift and go to state 170
    func_stmt                      shift and go to state 171
    scoped_if_stmt                 shift and go to state 172
    scoped_while_stmt              shift and go to state 173
    scoped_for_stmt                shift and go to state 174
    print_stmt                     shift and go to state 175
    return                         shift and go to state 176
    var                            shift and go to state 16
    num_expr                       shift and go to state 18
    string_expr                    shift and go to state 19
    boolean_expr                   shift and go to state 20
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 239

    (53) scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE . scoped_block RBRACE
    (16) scoped_block -> . scoped_statement_list
    (17) scoped_statement_list -> . scoped_statement scoped_statement_list
    (18) scoped_statement_list -> . empty
    (19) scoped_statement -> . var_assign SEMI
    (20) scoped_statement -> . final_assign SEMI
    (21) scoped_statement -> . var_compound_assign SEMI
    (22) scoped_statement -> . var_auto SEMI
    (23) scoped_statement -> . expr SEMI
    (24) scoped_statement -> . func_stmt
    (25) scoped_statement -> . scoped_if_stmt
    (26) scoped_statement -> . scoped_while_stmt
    (27) scoped_statement -> . scoped_for_stmt
    (28) scoped_statement -> . print_stmt SEMI
    (29) scoped_statement -> . return SEMI
    (30) scoped_statement -> . empty
    (110) empty -> .
    (58) var_assign -> . var ASSIGN expr
    (59) final_assign -> . FINAL var ASSIGN expr
    (60) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (61) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (62) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (63) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (64) var_compound_assign -> . var POWER_ASSIGN num_expr
    (65) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (66) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (67) var_auto -> . var INCREMENT
    (68) var_auto -> . var DECREMENT
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (32) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (47) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (52) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (53) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (54) print_stmt -> . PRINT LPAREN expr RPAREN
    (31) return -> . RETURN expr
    (57) var -> . ID
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 110 (empty -> .)
    FINAL           shift and go to state 17
    FN              shift and go to state 24
    IF              shift and go to state 177
    WHILE           shift and go to state 178
    FOR             shift and go to state 179
    PRINT           shift and go to state 29
    RETURN          shift and go to state 180
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

  ! FINAL           [ reduce using rule 110 (empty -> .) ]
  ! FN              [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! PRINT           [ reduce using rule 110 (empty -> .) ]
  ! RETURN          [ reduce using rule 110 (empty -> .) ]
  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! NOT             [ reduce using rule 110 (empty -> .) ]
  ! NULL            [ reduce using rule 110 (empty -> .) ]
  ! PLUS            [ reduce using rule 110 (empty -> .) ]
  ! MINUS           [ reduce using rule 110 (empty -> .) ]
  ! INTEGER         [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LPAREN          [ reduce using rule 110 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 110 (empty -> .) ]

    var_assign                     shift and go to state 166
    boolean_expr                   shift and go to state 20
    var_auto                       shift and go to state 169
    scoped_block                   shift and go to state 243
    scoped_statement_list          shift and go to state 163
    scoped_statement               shift and go to state 164
    empty                          shift and go to state 165
    final_assign                   shift and go to state 167
    var_compound_assign            shift and go to state 168
    expr                           shift and go to state 170
    func_stmt                      shift and go to state 171
    scoped_if_stmt                 shift and go to state 172
    scoped_while_stmt              shift and go to state 173
    scoped_for_stmt                shift and go to state 174
    print_stmt                     shift and go to state 175
    return                         shift and go to state 176
    var                            shift and go to state 16
    num_expr                       shift and go to state 18
    string_expr                    shift and go to state 19
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 240

    (43) elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .

    FINAL           reduce using rule 43 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    FN              reduce using rule 43 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    IF              reduce using rule 43 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    WHILE           reduce using rule 43 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    FOR             reduce using rule 43 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    PRINT           reduce using rule 43 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    ID              reduce using rule 43 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    STRING          reduce using rule 43 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    NOT             reduce using rule 43 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    NULL            reduce using rule 43 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    PLUS            reduce using rule 43 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    MINUS           reduce using rule 43 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    INTEGER         reduce using rule 43 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    FLOAT           reduce using rule 43 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    LPAREN          reduce using rule 43 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    BOOLEAN         reduce using rule 43 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    $end            reduce using rule 43 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    RBRACE          reduce using rule 43 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)


state 241

    (48) scoped_elif_stmt -> ELIF LPAREN boolean_expr . RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (94) boolean_expr -> boolean_expr . AND boolean_expr
    (95) boolean_expr -> boolean_expr . OR boolean_expr
    (71) expr -> boolean_expr .
    (109) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    RPAREN          shift and go to state 244
    AND             shift and go to state 75
    OR              shift and go to state 76
    EQ              reduce using rule 71 (expr -> boolean_expr .)
    NE              reduce using rule 71 (expr -> boolean_expr .)
    LT              reduce using rule 71 (expr -> boolean_expr .)
    GT              reduce using rule 71 (expr -> boolean_expr .)
    LE              reduce using rule 71 (expr -> boolean_expr .)
    GE              reduce using rule 71 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 77


state 242

    (51) scoped_else_stmt -> ELSE LBRACE scoped_block . RBRACE

    RBRACE          shift and go to state 245


state 243

    (53) scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block . RBRACE

    RBRACE          shift and go to state 246


state 244

    (48) scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN . LBRACE scoped_block RBRACE scoped_elif_stmt

    LBRACE          shift and go to state 247


state 245

    (51) scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .

    FINAL           reduce using rule 51 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    FN              reduce using rule 51 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    IF              reduce using rule 51 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    WHILE           reduce using rule 51 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    FOR             reduce using rule 51 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    PRINT           reduce using rule 51 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    RETURN          reduce using rule 51 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    ID              reduce using rule 51 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    STRING          reduce using rule 51 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    NOT             reduce using rule 51 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    NULL            reduce using rule 51 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    PLUS            reduce using rule 51 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    MINUS           reduce using rule 51 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    INTEGER         reduce using rule 51 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    FLOAT           reduce using rule 51 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    LPAREN          reduce using rule 51 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    BOOLEAN         reduce using rule 51 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    RBRACE          reduce using rule 51 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)


state 246

    (53) scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .

    FINAL           reduce using rule 53 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    FN              reduce using rule 53 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    IF              reduce using rule 53 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    WHILE           reduce using rule 53 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    FOR             reduce using rule 53 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    PRINT           reduce using rule 53 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    RETURN          reduce using rule 53 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    ID              reduce using rule 53 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    STRING          reduce using rule 53 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    NOT             reduce using rule 53 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    NULL            reduce using rule 53 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    PLUS            reduce using rule 53 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    MINUS           reduce using rule 53 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    INTEGER         reduce using rule 53 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    FLOAT           reduce using rule 53 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    LPAREN          reduce using rule 53 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    BOOLEAN         reduce using rule 53 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    RBRACE          reduce using rule 53 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)


state 247

    (48) scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE . scoped_block RBRACE scoped_elif_stmt
    (16) scoped_block -> . scoped_statement_list
    (17) scoped_statement_list -> . scoped_statement scoped_statement_list
    (18) scoped_statement_list -> . empty
    (19) scoped_statement -> . var_assign SEMI
    (20) scoped_statement -> . final_assign SEMI
    (21) scoped_statement -> . var_compound_assign SEMI
    (22) scoped_statement -> . var_auto SEMI
    (23) scoped_statement -> . expr SEMI
    (24) scoped_statement -> . func_stmt
    (25) scoped_statement -> . scoped_if_stmt
    (26) scoped_statement -> . scoped_while_stmt
    (27) scoped_statement -> . scoped_for_stmt
    (28) scoped_statement -> . print_stmt SEMI
    (29) scoped_statement -> . return SEMI
    (30) scoped_statement -> . empty
    (110) empty -> .
    (58) var_assign -> . var ASSIGN expr
    (59) final_assign -> . FINAL var ASSIGN expr
    (60) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (61) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (62) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (63) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (64) var_compound_assign -> . var POWER_ASSIGN num_expr
    (65) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (66) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (67) var_auto -> . var INCREMENT
    (68) var_auto -> . var DECREMENT
    (69) expr -> . string_expr
    (70) expr -> . num_expr
    (71) expr -> . boolean_expr
    (72) expr -> . null_expr
    (73) expr -> . ternary_expr
    (74) expr -> . var
    (75) expr -> . func_call
    (32) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (47) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (52) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (53) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (54) print_stmt -> . PRINT LPAREN expr RPAREN
    (31) return -> . RETURN expr
    (57) var -> . ID
    (91) string_expr -> . string_expr CONCAT string_expr
    (92) string_expr -> . STRING
    (93) string_expr -> . var
    (83) num_expr -> . num_expr PLUS num_expr
    (84) num_expr -> . num_expr MINUS num_expr
    (85) num_expr -> . num_expr TIMES num_expr
    (86) num_expr -> . num_expr DIVIDE num_expr
    (87) num_expr -> . num_expr INT_DIVIDE num_expr
    (88) num_expr -> . num_expr POWER num_expr
    (89) num_expr -> . num_expr MODULO num_expr
    (90) num_expr -> . num_factor
    (94) boolean_expr -> . boolean_expr AND boolean_expr
    (95) boolean_expr -> . boolean_expr OR boolean_expr
    (96) boolean_expr -> . NOT boolean_expr
    (97) boolean_expr -> . boolean_factor
    (108) null_expr -> . NULL
    (109) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (33) func_call -> . var LPAREN arguments_list RPAREN
    (76) num_factor -> . PLUS num_factor
    (77) num_factor -> . MINUS num_factor
    (78) num_factor -> . INTEGER
    (79) num_factor -> . FLOAT
    (80) num_factor -> . LPAREN num_expr RPAREN
    (81) num_factor -> . func_call
    (82) num_factor -> . var
    (98) boolean_factor -> . LPAREN boolean_expr RPAREN
    (99) boolean_factor -> . BOOLEAN
    (100) boolean_factor -> . comparison
    (101) boolean_factor -> . var
    (102) comparison -> . expr EQ expr
    (103) comparison -> . expr NE expr
    (104) comparison -> . expr LT expr
    (105) comparison -> . expr GT expr
    (106) comparison -> . expr LE expr
    (107) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 110 (empty -> .)
    FINAL           shift and go to state 17
    FN              shift and go to state 24
    IF              shift and go to state 177
    WHILE           shift and go to state 178
    FOR             shift and go to state 179
    PRINT           shift and go to state 29
    RETURN          shift and go to state 180
    ID              shift and go to state 30
    STRING          shift and go to state 31
    NOT             shift and go to state 35
    NULL            shift and go to state 37
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    LPAREN          shift and go to state 25
    BOOLEAN         shift and go to state 40

  ! FINAL           [ reduce using rule 110 (empty -> .) ]
  ! FN              [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! PRINT           [ reduce using rule 110 (empty -> .) ]
  ! RETURN          [ reduce using rule 110 (empty -> .) ]
  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! NOT             [ reduce using rule 110 (empty -> .) ]
  ! NULL            [ reduce using rule 110 (empty -> .) ]
  ! PLUS            [ reduce using rule 110 (empty -> .) ]
  ! MINUS           [ reduce using rule 110 (empty -> .) ]
  ! INTEGER         [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LPAREN          [ reduce using rule 110 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 110 (empty -> .) ]

    boolean_expr                   shift and go to state 20
    scoped_block                   shift and go to state 248
    scoped_statement_list          shift and go to state 163
    scoped_statement               shift and go to state 164
    empty                          shift and go to state 165
    var_assign                     shift and go to state 166
    final_assign                   shift and go to state 167
    var_compound_assign            shift and go to state 168
    var_auto                       shift and go to state 169
    expr                           shift and go to state 170
    func_stmt                      shift and go to state 171
    scoped_if_stmt                 shift and go to state 172
    scoped_while_stmt              shift and go to state 173
    scoped_for_stmt                shift and go to state 174
    print_stmt                     shift and go to state 175
    return                         shift and go to state 176
    var                            shift and go to state 16
    num_expr                       shift and go to state 18
    string_expr                    shift and go to state 19
    null_expr                      shift and go to state 21
    ternary_expr                   shift and go to state 22
    func_call                      shift and go to state 23
    num_factor                     shift and go to state 34
    boolean_factor                 shift and go to state 36
    comparison                     shift and go to state 41

state 248

    (48) scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block . RBRACE scoped_elif_stmt

    RBRACE          shift and go to state 249


state 249

    (48) scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE . scoped_elif_stmt
    (48) scoped_elif_stmt -> . ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (49) scoped_elif_stmt -> . scoped_else_stmt
    (50) scoped_elif_stmt -> . empty
    (51) scoped_else_stmt -> . ELSE LBRACE scoped_block RBRACE
    (110) empty -> .

    ELIF            shift and go to state 231
    ELSE            shift and go to state 234
    FINAL           reduce using rule 110 (empty -> .)
    FN              reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    FOR             reduce using rule 110 (empty -> .)
    PRINT           reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    STRING          reduce using rule 110 (empty -> .)
    NOT             reduce using rule 110 (empty -> .)
    NULL            reduce using rule 110 (empty -> .)
    PLUS            reduce using rule 110 (empty -> .)
    MINUS           reduce using rule 110 (empty -> .)
    INTEGER         reduce using rule 110 (empty -> .)
    FLOAT           reduce using rule 110 (empty -> .)
    LPAREN          reduce using rule 110 (empty -> .)
    BOOLEAN         reduce using rule 110 (empty -> .)
    RBRACE          reduce using rule 110 (empty -> .)

    scoped_elif_stmt               shift and go to state 250
    scoped_else_stmt               shift and go to state 232
    empty                          shift and go to state 233

state 250

    (48) scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .

    FINAL           reduce using rule 48 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    FN              reduce using rule 48 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    IF              reduce using rule 48 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    WHILE           reduce using rule 48 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    FOR             reduce using rule 48 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    PRINT           reduce using rule 48 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    RETURN          reduce using rule 48 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    ID              reduce using rule 48 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    STRING          reduce using rule 48 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    NOT             reduce using rule 48 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    NULL            reduce using rule 48 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    PLUS            reduce using rule 48 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    MINUS           reduce using rule 48 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    INTEGER         reduce using rule 48 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    FLOAT           reduce using rule 48 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    LPAREN          reduce using rule 48 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    BOOLEAN         reduce using rule 48 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    RBRACE          reduce using rule 48 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FINAL in state 0 resolved as shift
WARNING: shift/reduce conflict for FN in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for NOT in state 0 resolved as shift
WARNING: shift/reduce conflict for NULL in state 0 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 0 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 0 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 0 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 4 resolved as shift
WARNING: shift/reduce conflict for FN in state 4 resolved as shift
WARNING: shift/reduce conflict for IF in state 4 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 4 resolved as shift
WARNING: shift/reduce conflict for FOR in state 4 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 4 resolved as shift
WARNING: shift/reduce conflict for ID in state 4 resolved as shift
WARNING: shift/reduce conflict for STRING in state 4 resolved as shift
WARNING: shift/reduce conflict for NOT in state 4 resolved as shift
WARNING: shift/reduce conflict for NULL in state 4 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 4 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 4 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 4 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 4 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 4 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 4 resolved as shift
WARNING: shift/reduce conflict for AND in state 20 resolved as shift
WARNING: shift/reduce conflict for OR in state 20 resolved as shift
WARNING: shift/reduce conflict for TERNARY_Q in state 20 resolved as shift
WARNING: shift/reduce conflict for AND in state 93 resolved as shift
WARNING: shift/reduce conflict for OR in state 93 resolved as shift
WARNING: shift/reduce conflict for TERNARY_Q in state 93 resolved as shift
WARNING: shift/reduce conflict for EQ in state 96 resolved as shift
WARNING: shift/reduce conflict for NE in state 96 resolved as shift
WARNING: shift/reduce conflict for LT in state 96 resolved as shift
WARNING: shift/reduce conflict for GT in state 96 resolved as shift
WARNING: shift/reduce conflict for LE in state 96 resolved as shift
WARNING: shift/reduce conflict for GE in state 96 resolved as shift
WARNING: shift/reduce conflict for EQ in state 98 resolved as shift
WARNING: shift/reduce conflict for NE in state 98 resolved as shift
WARNING: shift/reduce conflict for LT in state 98 resolved as shift
WARNING: shift/reduce conflict for GT in state 98 resolved as shift
WARNING: shift/reduce conflict for LE in state 98 resolved as shift
WARNING: shift/reduce conflict for GE in state 98 resolved as shift
WARNING: shift/reduce conflict for EQ in state 99 resolved as shift
WARNING: shift/reduce conflict for NE in state 99 resolved as shift
WARNING: shift/reduce conflict for LT in state 99 resolved as shift
WARNING: shift/reduce conflict for GT in state 99 resolved as shift
WARNING: shift/reduce conflict for LE in state 99 resolved as shift
WARNING: shift/reduce conflict for GE in state 99 resolved as shift
WARNING: shift/reduce conflict for EQ in state 100 resolved as shift
WARNING: shift/reduce conflict for NE in state 100 resolved as shift
WARNING: shift/reduce conflict for LT in state 100 resolved as shift
WARNING: shift/reduce conflict for GT in state 100 resolved as shift
WARNING: shift/reduce conflict for LE in state 100 resolved as shift
WARNING: shift/reduce conflict for GE in state 100 resolved as shift
WARNING: shift/reduce conflict for EQ in state 101 resolved as shift
WARNING: shift/reduce conflict for NE in state 101 resolved as shift
WARNING: shift/reduce conflict for LT in state 101 resolved as shift
WARNING: shift/reduce conflict for GT in state 101 resolved as shift
WARNING: shift/reduce conflict for LE in state 101 resolved as shift
WARNING: shift/reduce conflict for GE in state 101 resolved as shift
WARNING: shift/reduce conflict for EQ in state 102 resolved as shift
WARNING: shift/reduce conflict for NE in state 102 resolved as shift
WARNING: shift/reduce conflict for LT in state 102 resolved as shift
WARNING: shift/reduce conflict for GT in state 102 resolved as shift
WARNING: shift/reduce conflict for LE in state 102 resolved as shift
WARNING: shift/reduce conflict for GE in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 122 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 122 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 122 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 122 resolved as shift
WARNING: shift/reduce conflict for INT_DIVIDE in state 122 resolved as shift
WARNING: shift/reduce conflict for POWER in state 122 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 122 resolved as shift
WARNING: shift/reduce conflict for CONCAT in state 123 resolved as shift
WARNING: shift/reduce conflict for AND in state 125 resolved as shift
WARNING: shift/reduce conflict for OR in state 125 resolved as shift
WARNING: shift/reduce conflict for TERNARY_Q in state 125 resolved as shift
WARNING: shift/reduce conflict for AND in state 126 resolved as shift
WARNING: shift/reduce conflict for OR in state 126 resolved as shift
WARNING: shift/reduce conflict for TERNARY_Q in state 126 resolved as shift
WARNING: shift/reduce conflict for EQ in state 151 resolved as shift
WARNING: shift/reduce conflict for NE in state 151 resolved as shift
WARNING: shift/reduce conflict for LT in state 151 resolved as shift
WARNING: shift/reduce conflict for GT in state 151 resolved as shift
WARNING: shift/reduce conflict for LE in state 151 resolved as shift
WARNING: shift/reduce conflict for GE in state 151 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 154 resolved as shift
WARNING: shift/reduce conflict for FN in state 154 resolved as shift
WARNING: shift/reduce conflict for IF in state 154 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 154 resolved as shift
WARNING: shift/reduce conflict for FOR in state 154 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 154 resolved as shift
WARNING: shift/reduce conflict for ID in state 154 resolved as shift
WARNING: shift/reduce conflict for STRING in state 154 resolved as shift
WARNING: shift/reduce conflict for NOT in state 154 resolved as shift
WARNING: shift/reduce conflict for NULL in state 154 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 154 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 154 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 154 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 154 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 154 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 154 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 155 resolved as shift
WARNING: shift/reduce conflict for FN in state 155 resolved as shift
WARNING: shift/reduce conflict for IF in state 155 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 155 resolved as shift
WARNING: shift/reduce conflict for FOR in state 155 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 155 resolved as shift
WARNING: shift/reduce conflict for ID in state 155 resolved as shift
WARNING: shift/reduce conflict for STRING in state 155 resolved as shift
WARNING: shift/reduce conflict for NOT in state 155 resolved as shift
WARNING: shift/reduce conflict for NULL in state 155 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 155 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 155 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 155 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 155 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 155 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 155 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 158 resolved as shift
WARNING: shift/reduce conflict for FN in state 158 resolved as shift
WARNING: shift/reduce conflict for IF in state 158 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 158 resolved as shift
WARNING: shift/reduce conflict for FOR in state 158 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 158 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 158 resolved as shift
WARNING: shift/reduce conflict for ID in state 158 resolved as shift
WARNING: shift/reduce conflict for STRING in state 158 resolved as shift
WARNING: shift/reduce conflict for NOT in state 158 resolved as shift
WARNING: shift/reduce conflict for NULL in state 158 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 158 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 158 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 158 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 158 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 158 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 158 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 164 resolved as shift
WARNING: shift/reduce conflict for FN in state 164 resolved as shift
WARNING: shift/reduce conflict for IF in state 164 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 164 resolved as shift
WARNING: shift/reduce conflict for FOR in state 164 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 164 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 164 resolved as shift
WARNING: shift/reduce conflict for ID in state 164 resolved as shift
WARNING: shift/reduce conflict for STRING in state 164 resolved as shift
WARNING: shift/reduce conflict for NOT in state 164 resolved as shift
WARNING: shift/reduce conflict for NULL in state 164 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 164 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 164 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 164 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 164 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 164 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 164 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 208 resolved as shift
WARNING: shift/reduce conflict for FN in state 208 resolved as shift
WARNING: shift/reduce conflict for IF in state 208 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 208 resolved as shift
WARNING: shift/reduce conflict for FOR in state 208 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 208 resolved as shift
WARNING: shift/reduce conflict for ID in state 208 resolved as shift
WARNING: shift/reduce conflict for STRING in state 208 resolved as shift
WARNING: shift/reduce conflict for NOT in state 208 resolved as shift
WARNING: shift/reduce conflict for NULL in state 208 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 208 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 208 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 208 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 208 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 208 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 208 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 209 resolved as shift
WARNING: shift/reduce conflict for FN in state 209 resolved as shift
WARNING: shift/reduce conflict for IF in state 209 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 209 resolved as shift
WARNING: shift/reduce conflict for FOR in state 209 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 209 resolved as shift
WARNING: shift/reduce conflict for ID in state 209 resolved as shift
WARNING: shift/reduce conflict for STRING in state 209 resolved as shift
WARNING: shift/reduce conflict for NOT in state 209 resolved as shift
WARNING: shift/reduce conflict for NULL in state 209 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 209 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 209 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 209 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 209 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 209 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 209 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 216 resolved as shift
WARNING: shift/reduce conflict for FN in state 216 resolved as shift
WARNING: shift/reduce conflict for IF in state 216 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 216 resolved as shift
WARNING: shift/reduce conflict for FOR in state 216 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 216 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 216 resolved as shift
WARNING: shift/reduce conflict for ID in state 216 resolved as shift
WARNING: shift/reduce conflict for STRING in state 216 resolved as shift
WARNING: shift/reduce conflict for NOT in state 216 resolved as shift
WARNING: shift/reduce conflict for NULL in state 216 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 216 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 216 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 216 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 216 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 216 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 216 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 217 resolved as shift
WARNING: shift/reduce conflict for FN in state 217 resolved as shift
WARNING: shift/reduce conflict for IF in state 217 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 217 resolved as shift
WARNING: shift/reduce conflict for FOR in state 217 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 217 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 217 resolved as shift
WARNING: shift/reduce conflict for ID in state 217 resolved as shift
WARNING: shift/reduce conflict for STRING in state 217 resolved as shift
WARNING: shift/reduce conflict for NOT in state 217 resolved as shift
WARNING: shift/reduce conflict for NULL in state 217 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 217 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 217 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 217 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 217 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 217 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 217 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 225 resolved as shift
WARNING: shift/reduce conflict for FN in state 225 resolved as shift
WARNING: shift/reduce conflict for IF in state 225 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 225 resolved as shift
WARNING: shift/reduce conflict for FOR in state 225 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 225 resolved as shift
WARNING: shift/reduce conflict for ID in state 225 resolved as shift
WARNING: shift/reduce conflict for STRING in state 225 resolved as shift
WARNING: shift/reduce conflict for NOT in state 225 resolved as shift
WARNING: shift/reduce conflict for NULL in state 225 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 225 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 225 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 225 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 225 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 225 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 225 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 238 resolved as shift
WARNING: shift/reduce conflict for FN in state 238 resolved as shift
WARNING: shift/reduce conflict for IF in state 238 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 238 resolved as shift
WARNING: shift/reduce conflict for FOR in state 238 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 238 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 238 resolved as shift
WARNING: shift/reduce conflict for ID in state 238 resolved as shift
WARNING: shift/reduce conflict for STRING in state 238 resolved as shift
WARNING: shift/reduce conflict for NOT in state 238 resolved as shift
WARNING: shift/reduce conflict for NULL in state 238 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 238 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 238 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 238 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 238 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 238 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 238 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 239 resolved as shift
WARNING: shift/reduce conflict for FN in state 239 resolved as shift
WARNING: shift/reduce conflict for IF in state 239 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 239 resolved as shift
WARNING: shift/reduce conflict for FOR in state 239 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 239 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 239 resolved as shift
WARNING: shift/reduce conflict for ID in state 239 resolved as shift
WARNING: shift/reduce conflict for STRING in state 239 resolved as shift
WARNING: shift/reduce conflict for NOT in state 239 resolved as shift
WARNING: shift/reduce conflict for NULL in state 239 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 239 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 239 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 239 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 239 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 239 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 239 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 247 resolved as shift
WARNING: shift/reduce conflict for FN in state 247 resolved as shift
WARNING: shift/reduce conflict for IF in state 247 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 247 resolved as shift
WARNING: shift/reduce conflict for FOR in state 247 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 247 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 247 resolved as shift
WARNING: shift/reduce conflict for ID in state 247 resolved as shift
WARNING: shift/reduce conflict for STRING in state 247 resolved as shift
WARNING: shift/reduce conflict for NOT in state 247 resolved as shift
WARNING: shift/reduce conflict for NULL in state 247 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 247 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 247 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 247 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 247 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 247 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 247 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (statement_list -> empty)
WARNING: rejected rule (statement -> empty) in state 5
WARNING: reduce/reduce conflict in state 16 resolved using rule (expr -> var)
WARNING: rejected rule (string_expr -> var) in state 16
WARNING: reduce/reduce conflict in state 16 resolved using rule (expr -> var)
WARNING: rejected rule (num_factor -> var) in state 16
WARNING: reduce/reduce conflict in state 16 resolved using rule (expr -> var)
WARNING: rejected rule (boolean_factor -> var) in state 16
WARNING: reduce/reduce conflict in state 23 resolved using rule (expr -> func_call)
WARNING: rejected rule (num_factor -> func_call) in state 23
WARNING: reduce/reduce conflict in state 81 resolved using rule (expr -> func_call)
WARNING: rejected rule (num_factor -> func_call) in state 81
WARNING: reduce/reduce conflict in state 82 resolved using rule (num_factor -> var)
WARNING: rejected rule (boolean_factor -> var) in state 82
WARNING: reduce/reduce conflict in state 82 resolved using rule (expr -> var)
WARNING: rejected rule (num_factor -> var) in state 82
WARNING: reduce/reduce conflict in state 82 resolved using rule (expr -> var)
WARNING: rejected rule (string_expr -> var) in state 82
WARNING: reduce/reduce conflict in state 93 resolved using rule (expr -> boolean_expr)
WARNING: rejected rule (boolean_expr -> NOT boolean_expr) in state 93
WARNING: reduce/reduce conflict in state 95 resolved using rule (expr -> var)
WARNING: rejected rule (boolean_factor -> var) in state 95
WARNING: reduce/reduce conflict in state 95 resolved using rule (expr -> var)
WARNING: rejected rule (string_expr -> var) in state 95
WARNING: reduce/reduce conflict in state 95 resolved using rule (expr -> var)
WARNING: rejected rule (num_factor -> var) in state 95
WARNING: reduce/reduce conflict in state 97 resolved using rule (expr -> var)
WARNING: rejected rule (string_expr -> var) in state 97
WARNING: reduce/reduce conflict in state 97 resolved using rule (expr -> var)
WARNING: rejected rule (num_factor -> var) in state 97
WARNING: reduce/reduce conflict in state 97 resolved using rule (expr -> var)
WARNING: rejected rule (boolean_factor -> var) in state 97
WARNING: reduce/reduce conflict in state 125 resolved using rule (expr -> boolean_expr)
WARNING: rejected rule (boolean_expr -> boolean_expr AND boolean_expr) in state 125
WARNING: reduce/reduce conflict in state 126 resolved using rule (expr -> boolean_expr)
WARNING: rejected rule (boolean_expr -> boolean_expr OR boolean_expr) in state 126
WARNING: reduce/reduce conflict in state 137 resolved using rule (num_factor -> var)
WARNING: rejected rule (boolean_factor -> var) in state 137
WARNING: reduce/reduce conflict in state 137 resolved using rule (expr -> var)
WARNING: rejected rule (num_factor -> var) in state 137
WARNING: reduce/reduce conflict in state 137 resolved using rule (expr -> var)
WARNING: rejected rule (string_expr -> var) in state 137
WARNING: reduce/reduce conflict in state 165 resolved using rule (scoped_statement_list -> empty)
WARNING: rejected rule (scoped_statement -> empty) in state 165
