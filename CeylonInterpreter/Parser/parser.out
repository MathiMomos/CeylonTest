Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CLASS
    DOT
    FALSE
    FSTRING
    IN
    LBRACKET
    RBRACKET
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> block
Rule 2     block -> statement_list
Rule 3     statement_list -> statement statement_list
Rule 4     statement_list -> empty
Rule 5     statement -> var_assign SEMI
Rule 6     statement -> final_assign SEMI
Rule 7     statement -> var_compound_assign SEMI
Rule 8     statement -> concat_assign SEMI
Rule 9     statement -> var_auto SEMI
Rule 10    statement -> expr SEMI
Rule 11    statement -> func_stmt
Rule 12    statement -> switch_stmt
Rule 13    statement -> if_stmt
Rule 14    statement -> while_stmt
Rule 15    statement -> for_stmt
Rule 16    statement -> print_stmt SEMI
Rule 17    statement -> scan_stmt SEMI
Rule 18    statement -> empty
Rule 19    scoped_block -> scoped_statement_list
Rule 20    scoped_statement_list -> scoped_statement scoped_statement_list
Rule 21    scoped_statement_list -> empty
Rule 22    scoped_statement -> var_assign SEMI
Rule 23    scoped_statement -> final_assign SEMI
Rule 24    scoped_statement -> var_compound_assign SEMI
Rule 25    scoped_statement -> concat_assign SEMI
Rule 26    scoped_statement -> var_auto SEMI
Rule 27    scoped_statement -> expr SEMI
Rule 28    scoped_statement -> func_stmt
Rule 29    scoped_statement -> scoped_switch_stmt
Rule 30    scoped_statement -> scoped_if_stmt
Rule 31    scoped_statement -> scoped_while_stmt
Rule 32    scoped_statement -> scoped_for_stmt
Rule 33    scoped_statement -> print_stmt SEMI
Rule 34    scoped_statement -> scan_stmt SEMI
Rule 35    scoped_statement -> return SEMI
Rule 36    scoped_statement -> empty
Rule 37    return -> RETURN expr
Rule 38    func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
Rule 39    func_call -> var LPAREN arguments_list RPAREN
Rule 40    arguments_list -> non_empty_arguments_list
Rule 41    arguments_list -> empty
Rule 42    non_empty_arguments_list -> expr COMMA non_empty_arguments_list
Rule 43    non_empty_arguments_list -> expr
Rule 44    parameters_list -> non_empty_parameters_list
Rule 45    parameters_list -> empty
Rule 46    non_empty_parameters_list -> var COMMA non_empty_parameters_list
Rule 47    non_empty_parameters_list -> var
Rule 48    switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE
Rule 49    case -> CASE expr LBRACE block RBRACE case
Rule 50    case -> default_case
Rule 51    case -> empty
Rule 52    default_case -> DEFAULT LBRACE block RBRACE
Rule 53    if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
Rule 54    elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
Rule 55    elif_stmt -> else_stmt
Rule 56    elif_stmt -> empty
Rule 57    else_stmt -> ELSE LBRACE block RBRACE
Rule 58    scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE
Rule 59    scoped_case -> CASE expr LBRACE scoped_block RBRACE scoped_case
Rule 60    scoped_case -> scoped_default_case
Rule 61    scoped_case -> empty
Rule 62    scoped_default_case -> DEFAULT LBRACE scoped_block RBRACE
Rule 63    scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
Rule 64    scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
Rule 65    scoped_elif_stmt -> scoped_else_stmt
Rule 66    scoped_elif_stmt -> empty
Rule 67    scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE
Rule 68    scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
Rule 69    scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
Rule 70    print_stmt -> PRINT LPAREN expr RPAREN
Rule 71    scan_stmt -> SCANSTR LPAREN var RPAREN
Rule 72    scan_stmt -> SCANNUM LPAREN var RPAREN
Rule 73    while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
Rule 74    for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
Rule 75    var -> ID
Rule 76    var_assign -> var ASSIGN expr
Rule 77    final_assign -> FINAL var ASSIGN expr
Rule 78    var_compound_assign -> var PLUS_ASSIGN num_expr
Rule 79    var_compound_assign -> var MINUS_ASSIGN num_expr
Rule 80    var_compound_assign -> var TIMES_ASSIGN num_expr
Rule 81    var_compound_assign -> var DIVIDE_ASSIGN num_expr
Rule 82    var_compound_assign -> var POWER_ASSIGN num_expr
Rule 83    var_compound_assign -> var MODULO_ASSIGN num_expr
Rule 84    var_compound_assign -> var INT_DIVIDE_ASSIGN num_expr
Rule 85    var_auto -> var INCREMENT
Rule 86    var_auto -> var DECREMENT
Rule 87    concat_assign -> var CONCAT_ASSIGN string_expr
Rule 88    expr -> string_expr
Rule 89    expr -> num_expr
Rule 90    expr -> boolean_expr
Rule 91    expr -> null_expr
Rule 92    expr -> ternary_expr
Rule 93    expr -> var
Rule 94    expr -> func_call
Rule 95    num_factor -> PLUS num_factor
Rule 96    num_factor -> MINUS num_factor
Rule 97    num_factor -> INTEGER
Rule 98    num_factor -> FLOAT
Rule 99    num_factor -> LPAREN num_expr RPAREN
Rule 100   num_factor -> func_call
Rule 101   num_factor -> var
Rule 102   num_expr -> num_expr PLUS num_expr
Rule 103   num_expr -> num_expr MINUS num_expr
Rule 104   num_expr -> num_expr TIMES num_expr
Rule 105   num_expr -> num_expr DIVIDE num_expr
Rule 106   num_expr -> num_expr INT_DIVIDE num_expr
Rule 107   num_expr -> num_expr POWER num_expr
Rule 108   num_expr -> num_expr MODULO num_expr
Rule 109   num_expr -> num_factor
Rule 110   string_expr -> string_expr CONCAT string_expr
Rule 111   string_expr -> STRING
Rule 112   string_expr -> var
Rule 113   boolean_expr -> boolean_expr AND boolean_expr
Rule 114   boolean_expr -> boolean_expr OR boolean_expr
Rule 115   boolean_expr -> NOT boolean_expr
Rule 116   boolean_expr -> boolean_factor
Rule 117   boolean_factor -> LPAREN boolean_expr RPAREN
Rule 118   boolean_factor -> BOOLEAN
Rule 119   boolean_factor -> comparison
Rule 120   boolean_factor -> var
Rule 121   comparison -> expr EQ expr
Rule 122   comparison -> expr NE expr
Rule 123   comparison -> expr LT expr
Rule 124   comparison -> expr GT expr
Rule 125   comparison -> expr LE expr
Rule 126   comparison -> expr GE expr
Rule 127   null_expr -> NULL
Rule 128   ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr
Rule 129   empty -> <empty>

Terminals, with rules where they appear

AND                  : 113
ASSIGN               : 76 77
BOOLEAN              : 118
CASE                 : 49 59
CLASS                : 
COMMA                : 42 46
CONCAT               : 110
CONCAT_ASSIGN        : 87
DECREMENT            : 86
DEFAULT              : 52 62
DIVIDE               : 105
DIVIDE_ASSIGN        : 81
DOT                  : 
ELIF                 : 54 64
ELSE                 : 57 67
EQ                   : 121
FALSE                : 
FINAL                : 77
FLOAT                : 98
FN                   : 38
FOR                  : 69 74
FSTRING              : 
GE                   : 126
GT                   : 124
ID                   : 75
IF                   : 53 63
IN                   : 
INCREMENT            : 85
INTEGER              : 97
INT_DIVIDE           : 106
INT_DIVIDE_ASSIGN    : 84
LBRACE               : 38 48 49 52 53 54 57 58 59 62 63 64 67 68 69 73 74
LBRACKET             : 
LE                   : 125
LPAREN               : 38 39 48 53 54 58 63 64 68 69 70 71 72 73 74 99 117
LT                   : 123
MINUS                : 96 103
MINUS_ASSIGN         : 79
MODULO               : 108
MODULO_ASSIGN        : 83
NE                   : 122
NOT                  : 115
NULL                 : 127
OR                   : 114
PLUS                 : 95 102
PLUS_ASSIGN          : 78
POWER                : 107
POWER_ASSIGN         : 82
PRINT                : 70
RBRACE               : 38 48 49 52 53 54 57 58 59 62 63 64 67 68 69 73 74
RBRACKET             : 
RETURN               : 37
RPAREN               : 38 39 48 53 54 58 63 64 68 69 70 71 72 73 74 99 117
SCANNUM              : 72
SCANSTR              : 71
SEMI                 : 5 6 7 8 9 10 16 17 22 23 24 25 26 27 33 34 35 69 69 74 74
STRING               : 111
SWITCH               : 48 58
TERNARY_C            : 128
TERNARY_Q            : 128
TIMES                : 104
TIMES_ASSIGN         : 80
TRUE                 : 
WHILE                : 68 73
error                : 

Nonterminals, with rules where they appear

arguments_list       : 39
block                : 1 49 52 53 54 57 73 74
boolean_expr         : 53 54 63 64 68 69 73 74 90 113 113 114 114 115 117 128
boolean_factor       : 116
case                 : 48 49
comparison           : 119
concat_assign        : 8 25
default_case         : 50
elif_stmt            : 53 54
else_stmt            : 55
empty                : 4 18 21 36 41 45 51 56 61 66
expr                 : 10 27 37 42 43 49 59 70 76 77 121 121 122 122 123 123 124 124 125 125 126 126 128 128
final_assign         : 6 23
for_stmt             : 15
func_call            : 94 100
func_stmt            : 11 28
if_stmt              : 13
non_empty_arguments_list : 40 42
non_empty_parameters_list : 44 46
null_expr            : 91
num_expr             : 78 79 80 81 82 83 84 89 99 102 102 103 103 104 104 105 105 106 106 107 107 108 108
num_factor           : 95 96 109
parameters_list      : 38
print_stmt           : 16 33
program              : 0
return               : 35
scan_stmt            : 17 34
scoped_block         : 38 59 62 63 64 67 68 69
scoped_case          : 58 59
scoped_default_case  : 60
scoped_elif_stmt     : 63 64
scoped_else_stmt     : 65
scoped_for_stmt      : 32
scoped_if_stmt       : 30
scoped_statement     : 20
scoped_statement_list : 19 20
scoped_switch_stmt   : 29
scoped_while_stmt    : 31
statement            : 3
statement_list       : 2 3
string_expr          : 87 88 110 110
switch_stmt          : 12
ternary_expr         : 92
var                  : 38 39 46 47 48 58 71 72 76 77 78 79 80 81 82 83 84 85 86 87 93 101 112 120
var_assign           : 5 22 69 74
var_auto             : 9 26 69 74
var_compound_assign  : 7 24
while_stmt           : 14

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . block
    (2) block -> . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . concat_assign SEMI
    (9) statement -> . var_auto SEMI
    (10) statement -> . expr SEMI
    (11) statement -> . func_stmt
    (12) statement -> . switch_stmt
    (13) statement -> . if_stmt
    (14) statement -> . while_stmt
    (15) statement -> . for_stmt
    (16) statement -> . print_stmt SEMI
    (17) statement -> . scan_stmt SEMI
    (18) statement -> . empty
    (129) empty -> .
    (76) var_assign -> . var ASSIGN expr
    (77) final_assign -> . FINAL var ASSIGN expr
    (78) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (79) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (80) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (81) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (82) var_compound_assign -> . var POWER_ASSIGN num_expr
    (83) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (84) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (87) concat_assign -> . var CONCAT_ASSIGN string_expr
    (85) var_auto -> . var INCREMENT
    (86) var_auto -> . var DECREMENT
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (38) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (48) switch_stmt -> . SWITCH LPAREN var RPAREN LBRACE case RBRACE
    (53) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (73) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (74) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (70) print_stmt -> . PRINT LPAREN expr RPAREN
    (71) scan_stmt -> . SCANSTR LPAREN var RPAREN
    (72) scan_stmt -> . SCANNUM LPAREN var RPAREN
    (75) var -> . ID
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for SCANSTR resolved as shift
  ! shift/reduce conflict for SCANNUM resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    $end            reduce using rule 129 (empty -> .)
    FINAL           shift and go to state 20
    FN              shift and go to state 27
    SWITCH          shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    SCANSTR         shift and go to state 34
    SCANNUM         shift and go to state 35
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

  ! FINAL           [ reduce using rule 129 (empty -> .) ]
  ! FN              [ reduce using rule 129 (empty -> .) ]
  ! SWITCH          [ reduce using rule 129 (empty -> .) ]
  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! PRINT           [ reduce using rule 129 (empty -> .) ]
  ! SCANSTR         [ reduce using rule 129 (empty -> .) ]
  ! SCANNUM         [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! STRING          [ reduce using rule 129 (empty -> .) ]
  ! NOT             [ reduce using rule 129 (empty -> .) ]
  ! NULL            [ reduce using rule 129 (empty -> .) ]
  ! PLUS            [ reduce using rule 129 (empty -> .) ]
  ! MINUS           [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]
  ! FLOAT           [ reduce using rule 129 (empty -> .) ]
  ! LPAREN          [ reduce using rule 129 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 129 (empty -> .) ]

    program                        shift and go to state 1
    block                          shift and go to state 2
    statement_list                 shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 5
    var_assign                     shift and go to state 6
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    concat_assign                  shift and go to state 9
    var_auto                       shift and go to state 10
    expr                           shift and go to state 11
    func_stmt                      shift and go to state 12
    switch_stmt                    shift and go to state 13
    if_stmt                        shift and go to state 14
    while_stmt                     shift and go to state 15
    for_stmt                       shift and go to state 16
    print_stmt                     shift and go to state 17
    scan_stmt                      shift and go to state 18
    var                            shift and go to state 19
    num_expr                       shift and go to state 21
    string_expr                    shift and go to state 22
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 1

    (0) S' -> program .



state 2

    (1) program -> block .

    $end            reduce using rule 1 (program -> block .)


state 3

    (2) block -> statement_list .

    $end            reduce using rule 2 (block -> statement_list .)
    RBRACE          reduce using rule 2 (block -> statement_list .)


state 4

    (3) statement_list -> statement . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . concat_assign SEMI
    (9) statement -> . var_auto SEMI
    (10) statement -> . expr SEMI
    (11) statement -> . func_stmt
    (12) statement -> . switch_stmt
    (13) statement -> . if_stmt
    (14) statement -> . while_stmt
    (15) statement -> . for_stmt
    (16) statement -> . print_stmt SEMI
    (17) statement -> . scan_stmt SEMI
    (18) statement -> . empty
    (129) empty -> .
    (76) var_assign -> . var ASSIGN expr
    (77) final_assign -> . FINAL var ASSIGN expr
    (78) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (79) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (80) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (81) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (82) var_compound_assign -> . var POWER_ASSIGN num_expr
    (83) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (84) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (87) concat_assign -> . var CONCAT_ASSIGN string_expr
    (85) var_auto -> . var INCREMENT
    (86) var_auto -> . var DECREMENT
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (38) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (48) switch_stmt -> . SWITCH LPAREN var RPAREN LBRACE case RBRACE
    (53) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (73) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (74) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (70) print_stmt -> . PRINT LPAREN expr RPAREN
    (71) scan_stmt -> . SCANSTR LPAREN var RPAREN
    (72) scan_stmt -> . SCANNUM LPAREN var RPAREN
    (75) var -> . ID
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for SCANSTR resolved as shift
  ! shift/reduce conflict for SCANNUM resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    $end            reduce using rule 129 (empty -> .)
    RBRACE          reduce using rule 129 (empty -> .)
    FINAL           shift and go to state 20
    FN              shift and go to state 27
    SWITCH          shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    SCANSTR         shift and go to state 34
    SCANNUM         shift and go to state 35
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

  ! FINAL           [ reduce using rule 129 (empty -> .) ]
  ! FN              [ reduce using rule 129 (empty -> .) ]
  ! SWITCH          [ reduce using rule 129 (empty -> .) ]
  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! PRINT           [ reduce using rule 129 (empty -> .) ]
  ! SCANSTR         [ reduce using rule 129 (empty -> .) ]
  ! SCANNUM         [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! STRING          [ reduce using rule 129 (empty -> .) ]
  ! NOT             [ reduce using rule 129 (empty -> .) ]
  ! NULL            [ reduce using rule 129 (empty -> .) ]
  ! PLUS            [ reduce using rule 129 (empty -> .) ]
  ! MINUS           [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]
  ! FLOAT           [ reduce using rule 129 (empty -> .) ]
  ! LPAREN          [ reduce using rule 129 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 129 (empty -> .) ]

    statement                      shift and go to state 4
    statement_list                 shift and go to state 48
    empty                          shift and go to state 5
    var_assign                     shift and go to state 6
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    concat_assign                  shift and go to state 9
    var_auto                       shift and go to state 10
    expr                           shift and go to state 11
    func_stmt                      shift and go to state 12
    switch_stmt                    shift and go to state 13
    if_stmt                        shift and go to state 14
    while_stmt                     shift and go to state 15
    for_stmt                       shift and go to state 16
    print_stmt                     shift and go to state 17
    scan_stmt                      shift and go to state 18
    var                            shift and go to state 19
    num_expr                       shift and go to state 21
    string_expr                    shift and go to state 22
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 5

    (4) statement_list -> empty .
    (18) statement -> empty .

  ! reduce/reduce conflict for $end resolved using rule 4 (statement_list -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 4 (statement_list -> empty .)
    $end            reduce using rule 4 (statement_list -> empty .)
    RBRACE          reduce using rule 4 (statement_list -> empty .)
    FINAL           reduce using rule 18 (statement -> empty .)
    FN              reduce using rule 18 (statement -> empty .)
    SWITCH          reduce using rule 18 (statement -> empty .)
    IF              reduce using rule 18 (statement -> empty .)
    WHILE           reduce using rule 18 (statement -> empty .)
    FOR             reduce using rule 18 (statement -> empty .)
    PRINT           reduce using rule 18 (statement -> empty .)
    SCANSTR         reduce using rule 18 (statement -> empty .)
    SCANNUM         reduce using rule 18 (statement -> empty .)
    ID              reduce using rule 18 (statement -> empty .)
    STRING          reduce using rule 18 (statement -> empty .)
    NOT             reduce using rule 18 (statement -> empty .)
    NULL            reduce using rule 18 (statement -> empty .)
    PLUS            reduce using rule 18 (statement -> empty .)
    MINUS           reduce using rule 18 (statement -> empty .)
    INTEGER         reduce using rule 18 (statement -> empty .)
    FLOAT           reduce using rule 18 (statement -> empty .)
    LPAREN          reduce using rule 18 (statement -> empty .)
    BOOLEAN         reduce using rule 18 (statement -> empty .)

  ! $end            [ reduce using rule 18 (statement -> empty .) ]
  ! RBRACE          [ reduce using rule 18 (statement -> empty .) ]


state 6

    (5) statement -> var_assign . SEMI

    SEMI            shift and go to state 49


state 7

    (6) statement -> final_assign . SEMI

    SEMI            shift and go to state 50


state 8

    (7) statement -> var_compound_assign . SEMI

    SEMI            shift and go to state 51


state 9

    (8) statement -> concat_assign . SEMI

    SEMI            shift and go to state 52


state 10

    (9) statement -> var_auto . SEMI

    SEMI            shift and go to state 53


state 11

    (10) statement -> expr . SEMI
    (121) comparison -> expr . EQ expr
    (122) comparison -> expr . NE expr
    (123) comparison -> expr . LT expr
    (124) comparison -> expr . GT expr
    (125) comparison -> expr . LE expr
    (126) comparison -> expr . GE expr

    SEMI            shift and go to state 54
    EQ              shift and go to state 55
    NE              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60


state 12

    (11) statement -> func_stmt .

    FINAL           reduce using rule 11 (statement -> func_stmt .)
    FN              reduce using rule 11 (statement -> func_stmt .)
    SWITCH          reduce using rule 11 (statement -> func_stmt .)
    IF              reduce using rule 11 (statement -> func_stmt .)
    WHILE           reduce using rule 11 (statement -> func_stmt .)
    FOR             reduce using rule 11 (statement -> func_stmt .)
    PRINT           reduce using rule 11 (statement -> func_stmt .)
    SCANSTR         reduce using rule 11 (statement -> func_stmt .)
    SCANNUM         reduce using rule 11 (statement -> func_stmt .)
    ID              reduce using rule 11 (statement -> func_stmt .)
    STRING          reduce using rule 11 (statement -> func_stmt .)
    NOT             reduce using rule 11 (statement -> func_stmt .)
    NULL            reduce using rule 11 (statement -> func_stmt .)
    PLUS            reduce using rule 11 (statement -> func_stmt .)
    MINUS           reduce using rule 11 (statement -> func_stmt .)
    INTEGER         reduce using rule 11 (statement -> func_stmt .)
    FLOAT           reduce using rule 11 (statement -> func_stmt .)
    LPAREN          reduce using rule 11 (statement -> func_stmt .)
    BOOLEAN         reduce using rule 11 (statement -> func_stmt .)
    $end            reduce using rule 11 (statement -> func_stmt .)
    RBRACE          reduce using rule 11 (statement -> func_stmt .)


state 13

    (12) statement -> switch_stmt .

    FINAL           reduce using rule 12 (statement -> switch_stmt .)
    FN              reduce using rule 12 (statement -> switch_stmt .)
    SWITCH          reduce using rule 12 (statement -> switch_stmt .)
    IF              reduce using rule 12 (statement -> switch_stmt .)
    WHILE           reduce using rule 12 (statement -> switch_stmt .)
    FOR             reduce using rule 12 (statement -> switch_stmt .)
    PRINT           reduce using rule 12 (statement -> switch_stmt .)
    SCANSTR         reduce using rule 12 (statement -> switch_stmt .)
    SCANNUM         reduce using rule 12 (statement -> switch_stmt .)
    ID              reduce using rule 12 (statement -> switch_stmt .)
    STRING          reduce using rule 12 (statement -> switch_stmt .)
    NOT             reduce using rule 12 (statement -> switch_stmt .)
    NULL            reduce using rule 12 (statement -> switch_stmt .)
    PLUS            reduce using rule 12 (statement -> switch_stmt .)
    MINUS           reduce using rule 12 (statement -> switch_stmt .)
    INTEGER         reduce using rule 12 (statement -> switch_stmt .)
    FLOAT           reduce using rule 12 (statement -> switch_stmt .)
    LPAREN          reduce using rule 12 (statement -> switch_stmt .)
    BOOLEAN         reduce using rule 12 (statement -> switch_stmt .)
    $end            reduce using rule 12 (statement -> switch_stmt .)
    RBRACE          reduce using rule 12 (statement -> switch_stmt .)


state 14

    (13) statement -> if_stmt .

    FINAL           reduce using rule 13 (statement -> if_stmt .)
    FN              reduce using rule 13 (statement -> if_stmt .)
    SWITCH          reduce using rule 13 (statement -> if_stmt .)
    IF              reduce using rule 13 (statement -> if_stmt .)
    WHILE           reduce using rule 13 (statement -> if_stmt .)
    FOR             reduce using rule 13 (statement -> if_stmt .)
    PRINT           reduce using rule 13 (statement -> if_stmt .)
    SCANSTR         reduce using rule 13 (statement -> if_stmt .)
    SCANNUM         reduce using rule 13 (statement -> if_stmt .)
    ID              reduce using rule 13 (statement -> if_stmt .)
    STRING          reduce using rule 13 (statement -> if_stmt .)
    NOT             reduce using rule 13 (statement -> if_stmt .)
    NULL            reduce using rule 13 (statement -> if_stmt .)
    PLUS            reduce using rule 13 (statement -> if_stmt .)
    MINUS           reduce using rule 13 (statement -> if_stmt .)
    INTEGER         reduce using rule 13 (statement -> if_stmt .)
    FLOAT           reduce using rule 13 (statement -> if_stmt .)
    LPAREN          reduce using rule 13 (statement -> if_stmt .)
    BOOLEAN         reduce using rule 13 (statement -> if_stmt .)
    $end            reduce using rule 13 (statement -> if_stmt .)
    RBRACE          reduce using rule 13 (statement -> if_stmt .)


state 15

    (14) statement -> while_stmt .

    FINAL           reduce using rule 14 (statement -> while_stmt .)
    FN              reduce using rule 14 (statement -> while_stmt .)
    SWITCH          reduce using rule 14 (statement -> while_stmt .)
    IF              reduce using rule 14 (statement -> while_stmt .)
    WHILE           reduce using rule 14 (statement -> while_stmt .)
    FOR             reduce using rule 14 (statement -> while_stmt .)
    PRINT           reduce using rule 14 (statement -> while_stmt .)
    SCANSTR         reduce using rule 14 (statement -> while_stmt .)
    SCANNUM         reduce using rule 14 (statement -> while_stmt .)
    ID              reduce using rule 14 (statement -> while_stmt .)
    STRING          reduce using rule 14 (statement -> while_stmt .)
    NOT             reduce using rule 14 (statement -> while_stmt .)
    NULL            reduce using rule 14 (statement -> while_stmt .)
    PLUS            reduce using rule 14 (statement -> while_stmt .)
    MINUS           reduce using rule 14 (statement -> while_stmt .)
    INTEGER         reduce using rule 14 (statement -> while_stmt .)
    FLOAT           reduce using rule 14 (statement -> while_stmt .)
    LPAREN          reduce using rule 14 (statement -> while_stmt .)
    BOOLEAN         reduce using rule 14 (statement -> while_stmt .)
    $end            reduce using rule 14 (statement -> while_stmt .)
    RBRACE          reduce using rule 14 (statement -> while_stmt .)


state 16

    (15) statement -> for_stmt .

    FINAL           reduce using rule 15 (statement -> for_stmt .)
    FN              reduce using rule 15 (statement -> for_stmt .)
    SWITCH          reduce using rule 15 (statement -> for_stmt .)
    IF              reduce using rule 15 (statement -> for_stmt .)
    WHILE           reduce using rule 15 (statement -> for_stmt .)
    FOR             reduce using rule 15 (statement -> for_stmt .)
    PRINT           reduce using rule 15 (statement -> for_stmt .)
    SCANSTR         reduce using rule 15 (statement -> for_stmt .)
    SCANNUM         reduce using rule 15 (statement -> for_stmt .)
    ID              reduce using rule 15 (statement -> for_stmt .)
    STRING          reduce using rule 15 (statement -> for_stmt .)
    NOT             reduce using rule 15 (statement -> for_stmt .)
    NULL            reduce using rule 15 (statement -> for_stmt .)
    PLUS            reduce using rule 15 (statement -> for_stmt .)
    MINUS           reduce using rule 15 (statement -> for_stmt .)
    INTEGER         reduce using rule 15 (statement -> for_stmt .)
    FLOAT           reduce using rule 15 (statement -> for_stmt .)
    LPAREN          reduce using rule 15 (statement -> for_stmt .)
    BOOLEAN         reduce using rule 15 (statement -> for_stmt .)
    $end            reduce using rule 15 (statement -> for_stmt .)
    RBRACE          reduce using rule 15 (statement -> for_stmt .)


state 17

    (16) statement -> print_stmt . SEMI

    SEMI            shift and go to state 61


state 18

    (17) statement -> scan_stmt . SEMI

    SEMI            shift and go to state 62


state 19

    (76) var_assign -> var . ASSIGN expr
    (78) var_compound_assign -> var . PLUS_ASSIGN num_expr
    (79) var_compound_assign -> var . MINUS_ASSIGN num_expr
    (80) var_compound_assign -> var . TIMES_ASSIGN num_expr
    (81) var_compound_assign -> var . DIVIDE_ASSIGN num_expr
    (82) var_compound_assign -> var . POWER_ASSIGN num_expr
    (83) var_compound_assign -> var . MODULO_ASSIGN num_expr
    (84) var_compound_assign -> var . INT_DIVIDE_ASSIGN num_expr
    (87) concat_assign -> var . CONCAT_ASSIGN string_expr
    (85) var_auto -> var . INCREMENT
    (86) var_auto -> var . DECREMENT
    (93) expr -> var .
    (112) string_expr -> var .
    (39) func_call -> var . LPAREN arguments_list RPAREN
    (101) num_factor -> var .
    (120) boolean_factor -> var .

  ! reduce/reduce conflict for SEMI resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for SEMI resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for SEMI resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 93 (expr -> var .)
    ASSIGN          shift and go to state 63
    PLUS_ASSIGN     shift and go to state 64
    MINUS_ASSIGN    shift and go to state 65
    TIMES_ASSIGN    shift and go to state 66
    DIVIDE_ASSIGN   shift and go to state 67
    POWER_ASSIGN    shift and go to state 68
    MODULO_ASSIGN   shift and go to state 69
    INT_DIVIDE_ASSIGN shift and go to state 70
    CONCAT_ASSIGN   shift and go to state 71
    INCREMENT       shift and go to state 72
    DECREMENT       shift and go to state 73
    SEMI            reduce using rule 93 (expr -> var .)
    EQ              reduce using rule 93 (expr -> var .)
    NE              reduce using rule 93 (expr -> var .)
    LT              reduce using rule 93 (expr -> var .)
    GT              reduce using rule 93 (expr -> var .)
    LE              reduce using rule 93 (expr -> var .)
    GE              reduce using rule 93 (expr -> var .)
    CONCAT          reduce using rule 112 (string_expr -> var .)
    LPAREN          shift and go to state 74
    PLUS            reduce using rule 101 (num_factor -> var .)
    MINUS           reduce using rule 101 (num_factor -> var .)
    TIMES           reduce using rule 101 (num_factor -> var .)
    DIVIDE          reduce using rule 101 (num_factor -> var .)
    INT_DIVIDE      reduce using rule 101 (num_factor -> var .)
    POWER           reduce using rule 101 (num_factor -> var .)
    MODULO          reduce using rule 101 (num_factor -> var .)
    AND             reduce using rule 120 (boolean_factor -> var .)
    OR              reduce using rule 120 (boolean_factor -> var .)
    TERNARY_Q       reduce using rule 120 (boolean_factor -> var .)

  ! SEMI            [ reduce using rule 112 (string_expr -> var .) ]
  ! EQ              [ reduce using rule 112 (string_expr -> var .) ]
  ! NE              [ reduce using rule 112 (string_expr -> var .) ]
  ! LT              [ reduce using rule 112 (string_expr -> var .) ]
  ! GT              [ reduce using rule 112 (string_expr -> var .) ]
  ! LE              [ reduce using rule 112 (string_expr -> var .) ]
  ! GE              [ reduce using rule 112 (string_expr -> var .) ]
  ! SEMI            [ reduce using rule 101 (num_factor -> var .) ]
  ! EQ              [ reduce using rule 101 (num_factor -> var .) ]
  ! NE              [ reduce using rule 101 (num_factor -> var .) ]
  ! LT              [ reduce using rule 101 (num_factor -> var .) ]
  ! GT              [ reduce using rule 101 (num_factor -> var .) ]
  ! LE              [ reduce using rule 101 (num_factor -> var .) ]
  ! GE              [ reduce using rule 101 (num_factor -> var .) ]
  ! SEMI            [ reduce using rule 120 (boolean_factor -> var .) ]
  ! EQ              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! NE              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! LT              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! GT              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! LE              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! GE              [ reduce using rule 120 (boolean_factor -> var .) ]


state 20

    (77) final_assign -> FINAL . var ASSIGN expr
    (75) var -> . ID

    ID              shift and go to state 36

    var                            shift and go to state 75

state 21

    (89) expr -> num_expr .
    (102) num_expr -> num_expr . PLUS num_expr
    (103) num_expr -> num_expr . MINUS num_expr
    (104) num_expr -> num_expr . TIMES num_expr
    (105) num_expr -> num_expr . DIVIDE num_expr
    (106) num_expr -> num_expr . INT_DIVIDE num_expr
    (107) num_expr -> num_expr . POWER num_expr
    (108) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 89 (expr -> num_expr .)
    EQ              reduce using rule 89 (expr -> num_expr .)
    NE              reduce using rule 89 (expr -> num_expr .)
    LT              reduce using rule 89 (expr -> num_expr .)
    GT              reduce using rule 89 (expr -> num_expr .)
    LE              reduce using rule 89 (expr -> num_expr .)
    GE              reduce using rule 89 (expr -> num_expr .)
    AND             reduce using rule 89 (expr -> num_expr .)
    OR              reduce using rule 89 (expr -> num_expr .)
    TERNARY_Q       reduce using rule 89 (expr -> num_expr .)
    RPAREN          reduce using rule 89 (expr -> num_expr .)
    COMMA           reduce using rule 89 (expr -> num_expr .)
    TERNARY_C       reduce using rule 89 (expr -> num_expr .)
    LBRACE          reduce using rule 89 (expr -> num_expr .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79
    INT_DIVIDE      shift and go to state 80
    POWER           shift and go to state 81
    MODULO          shift and go to state 82


state 22

    (88) expr -> string_expr .
    (110) string_expr -> string_expr . CONCAT string_expr

    SEMI            reduce using rule 88 (expr -> string_expr .)
    EQ              reduce using rule 88 (expr -> string_expr .)
    NE              reduce using rule 88 (expr -> string_expr .)
    LT              reduce using rule 88 (expr -> string_expr .)
    GT              reduce using rule 88 (expr -> string_expr .)
    LE              reduce using rule 88 (expr -> string_expr .)
    GE              reduce using rule 88 (expr -> string_expr .)
    AND             reduce using rule 88 (expr -> string_expr .)
    OR              reduce using rule 88 (expr -> string_expr .)
    TERNARY_Q       reduce using rule 88 (expr -> string_expr .)
    RPAREN          reduce using rule 88 (expr -> string_expr .)
    COMMA           reduce using rule 88 (expr -> string_expr .)
    TERNARY_C       reduce using rule 88 (expr -> string_expr .)
    LBRACE          reduce using rule 88 (expr -> string_expr .)
    CONCAT          shift and go to state 83


state 23

    (90) expr -> boolean_expr .
    (113) boolean_expr -> boolean_expr . AND boolean_expr
    (114) boolean_expr -> boolean_expr . OR boolean_expr
    (128) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for TERNARY_Q resolved as shift
    SEMI            reduce using rule 90 (expr -> boolean_expr .)
    EQ              reduce using rule 90 (expr -> boolean_expr .)
    NE              reduce using rule 90 (expr -> boolean_expr .)
    LT              reduce using rule 90 (expr -> boolean_expr .)
    GT              reduce using rule 90 (expr -> boolean_expr .)
    LE              reduce using rule 90 (expr -> boolean_expr .)
    GE              reduce using rule 90 (expr -> boolean_expr .)
    RPAREN          reduce using rule 90 (expr -> boolean_expr .)
    COMMA           reduce using rule 90 (expr -> boolean_expr .)
    TERNARY_C       reduce using rule 90 (expr -> boolean_expr .)
    LBRACE          reduce using rule 90 (expr -> boolean_expr .)
    AND             shift and go to state 84
    OR              shift and go to state 85
    TERNARY_Q       shift and go to state 86

  ! AND             [ reduce using rule 90 (expr -> boolean_expr .) ]
  ! OR              [ reduce using rule 90 (expr -> boolean_expr .) ]
  ! TERNARY_Q       [ reduce using rule 90 (expr -> boolean_expr .) ]


state 24

    (91) expr -> null_expr .

    SEMI            reduce using rule 91 (expr -> null_expr .)
    EQ              reduce using rule 91 (expr -> null_expr .)
    NE              reduce using rule 91 (expr -> null_expr .)
    LT              reduce using rule 91 (expr -> null_expr .)
    GT              reduce using rule 91 (expr -> null_expr .)
    LE              reduce using rule 91 (expr -> null_expr .)
    GE              reduce using rule 91 (expr -> null_expr .)
    AND             reduce using rule 91 (expr -> null_expr .)
    OR              reduce using rule 91 (expr -> null_expr .)
    TERNARY_Q       reduce using rule 91 (expr -> null_expr .)
    RPAREN          reduce using rule 91 (expr -> null_expr .)
    COMMA           reduce using rule 91 (expr -> null_expr .)
    TERNARY_C       reduce using rule 91 (expr -> null_expr .)
    LBRACE          reduce using rule 91 (expr -> null_expr .)


state 25

    (92) expr -> ternary_expr .

    SEMI            reduce using rule 92 (expr -> ternary_expr .)
    EQ              reduce using rule 92 (expr -> ternary_expr .)
    NE              reduce using rule 92 (expr -> ternary_expr .)
    LT              reduce using rule 92 (expr -> ternary_expr .)
    GT              reduce using rule 92 (expr -> ternary_expr .)
    LE              reduce using rule 92 (expr -> ternary_expr .)
    GE              reduce using rule 92 (expr -> ternary_expr .)
    AND             reduce using rule 92 (expr -> ternary_expr .)
    OR              reduce using rule 92 (expr -> ternary_expr .)
    TERNARY_Q       reduce using rule 92 (expr -> ternary_expr .)
    RPAREN          reduce using rule 92 (expr -> ternary_expr .)
    COMMA           reduce using rule 92 (expr -> ternary_expr .)
    TERNARY_C       reduce using rule 92 (expr -> ternary_expr .)
    LBRACE          reduce using rule 92 (expr -> ternary_expr .)


state 26

    (94) expr -> func_call .
    (100) num_factor -> func_call .

  ! reduce/reduce conflict for SEMI resolved using rule 94 (expr -> func_call .)
  ! reduce/reduce conflict for EQ resolved using rule 94 (expr -> func_call .)
  ! reduce/reduce conflict for NE resolved using rule 94 (expr -> func_call .)
  ! reduce/reduce conflict for LT resolved using rule 94 (expr -> func_call .)
  ! reduce/reduce conflict for GT resolved using rule 94 (expr -> func_call .)
  ! reduce/reduce conflict for LE resolved using rule 94 (expr -> func_call .)
  ! reduce/reduce conflict for GE resolved using rule 94 (expr -> func_call .)
  ! reduce/reduce conflict for AND resolved using rule 94 (expr -> func_call .)
  ! reduce/reduce conflict for OR resolved using rule 94 (expr -> func_call .)
  ! reduce/reduce conflict for TERNARY_Q resolved using rule 94 (expr -> func_call .)
  ! reduce/reduce conflict for RPAREN resolved using rule 94 (expr -> func_call .)
  ! reduce/reduce conflict for COMMA resolved using rule 94 (expr -> func_call .)
  ! reduce/reduce conflict for TERNARY_C resolved using rule 94 (expr -> func_call .)
  ! reduce/reduce conflict for LBRACE resolved using rule 94 (expr -> func_call .)
    SEMI            reduce using rule 94 (expr -> func_call .)
    EQ              reduce using rule 94 (expr -> func_call .)
    NE              reduce using rule 94 (expr -> func_call .)
    LT              reduce using rule 94 (expr -> func_call .)
    GT              reduce using rule 94 (expr -> func_call .)
    LE              reduce using rule 94 (expr -> func_call .)
    GE              reduce using rule 94 (expr -> func_call .)
    AND             reduce using rule 94 (expr -> func_call .)
    OR              reduce using rule 94 (expr -> func_call .)
    TERNARY_Q       reduce using rule 94 (expr -> func_call .)
    RPAREN          reduce using rule 94 (expr -> func_call .)
    COMMA           reduce using rule 94 (expr -> func_call .)
    TERNARY_C       reduce using rule 94 (expr -> func_call .)
    LBRACE          reduce using rule 94 (expr -> func_call .)
    PLUS            reduce using rule 100 (num_factor -> func_call .)
    MINUS           reduce using rule 100 (num_factor -> func_call .)
    TIMES           reduce using rule 100 (num_factor -> func_call .)
    DIVIDE          reduce using rule 100 (num_factor -> func_call .)
    INT_DIVIDE      reduce using rule 100 (num_factor -> func_call .)
    POWER           reduce using rule 100 (num_factor -> func_call .)
    MODULO          reduce using rule 100 (num_factor -> func_call .)

  ! SEMI            [ reduce using rule 100 (num_factor -> func_call .) ]
  ! EQ              [ reduce using rule 100 (num_factor -> func_call .) ]
  ! NE              [ reduce using rule 100 (num_factor -> func_call .) ]
  ! LT              [ reduce using rule 100 (num_factor -> func_call .) ]
  ! GT              [ reduce using rule 100 (num_factor -> func_call .) ]
  ! LE              [ reduce using rule 100 (num_factor -> func_call .) ]
  ! GE              [ reduce using rule 100 (num_factor -> func_call .) ]
  ! AND             [ reduce using rule 100 (num_factor -> func_call .) ]
  ! OR              [ reduce using rule 100 (num_factor -> func_call .) ]
  ! TERNARY_Q       [ reduce using rule 100 (num_factor -> func_call .) ]
  ! RPAREN          [ reduce using rule 100 (num_factor -> func_call .) ]
  ! COMMA           [ reduce using rule 100 (num_factor -> func_call .) ]
  ! TERNARY_C       [ reduce using rule 100 (num_factor -> func_call .) ]
  ! LBRACE          [ reduce using rule 100 (num_factor -> func_call .) ]


state 27

    (38) func_stmt -> FN . var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (75) var -> . ID

    ID              shift and go to state 36

    var                            shift and go to state 87

state 28

    (99) num_factor -> LPAREN . num_expr RPAREN
    (117) boolean_factor -> LPAREN . boolean_expr RPAREN
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (75) var -> . ID
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr

    NOT             shift and go to state 41
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NULL            shift and go to state 43

    num_expr                       shift and go to state 88
    boolean_expr                   shift and go to state 89
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    func_call                      shift and go to state 90
    var                            shift and go to state 91
    comparison                     shift and go to state 47
    expr                           shift and go to state 92
    string_expr                    shift and go to state 22
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25

state 29

    (48) switch_stmt -> SWITCH . LPAREN var RPAREN LBRACE case RBRACE

    LPAREN          shift and go to state 93


state 30

    (53) if_stmt -> IF . LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt

    LPAREN          shift and go to state 94


state 31

    (73) while_stmt -> WHILE . LPAREN boolean_expr RPAREN LBRACE block RBRACE

    LPAREN          shift and go to state 95


state 32

    (74) for_stmt -> FOR . LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE

    LPAREN          shift and go to state 96


state 33

    (70) print_stmt -> PRINT . LPAREN expr RPAREN

    LPAREN          shift and go to state 97


state 34

    (71) scan_stmt -> SCANSTR . LPAREN var RPAREN

    LPAREN          shift and go to state 98


state 35

    (72) scan_stmt -> SCANNUM . LPAREN var RPAREN

    LPAREN          shift and go to state 99


state 36

    (75) var -> ID .

    ASSIGN          reduce using rule 75 (var -> ID .)
    PLUS_ASSIGN     reduce using rule 75 (var -> ID .)
    MINUS_ASSIGN    reduce using rule 75 (var -> ID .)
    TIMES_ASSIGN    reduce using rule 75 (var -> ID .)
    DIVIDE_ASSIGN   reduce using rule 75 (var -> ID .)
    POWER_ASSIGN    reduce using rule 75 (var -> ID .)
    MODULO_ASSIGN   reduce using rule 75 (var -> ID .)
    INT_DIVIDE_ASSIGN reduce using rule 75 (var -> ID .)
    CONCAT_ASSIGN   reduce using rule 75 (var -> ID .)
    INCREMENT       reduce using rule 75 (var -> ID .)
    DECREMENT       reduce using rule 75 (var -> ID .)
    LPAREN          reduce using rule 75 (var -> ID .)
    SEMI            reduce using rule 75 (var -> ID .)
    EQ              reduce using rule 75 (var -> ID .)
    NE              reduce using rule 75 (var -> ID .)
    LT              reduce using rule 75 (var -> ID .)
    GT              reduce using rule 75 (var -> ID .)
    LE              reduce using rule 75 (var -> ID .)
    GE              reduce using rule 75 (var -> ID .)
    CONCAT          reduce using rule 75 (var -> ID .)
    PLUS            reduce using rule 75 (var -> ID .)
    MINUS           reduce using rule 75 (var -> ID .)
    TIMES           reduce using rule 75 (var -> ID .)
    DIVIDE          reduce using rule 75 (var -> ID .)
    INT_DIVIDE      reduce using rule 75 (var -> ID .)
    POWER           reduce using rule 75 (var -> ID .)
    MODULO          reduce using rule 75 (var -> ID .)
    AND             reduce using rule 75 (var -> ID .)
    OR              reduce using rule 75 (var -> ID .)
    TERNARY_Q       reduce using rule 75 (var -> ID .)
    RPAREN          reduce using rule 75 (var -> ID .)
    COMMA           reduce using rule 75 (var -> ID .)
    TERNARY_C       reduce using rule 75 (var -> ID .)
    LBRACE          reduce using rule 75 (var -> ID .)


state 37

    (111) string_expr -> STRING .

    CONCAT          reduce using rule 111 (string_expr -> STRING .)
    SEMI            reduce using rule 111 (string_expr -> STRING .)
    EQ              reduce using rule 111 (string_expr -> STRING .)
    NE              reduce using rule 111 (string_expr -> STRING .)
    LT              reduce using rule 111 (string_expr -> STRING .)
    GT              reduce using rule 111 (string_expr -> STRING .)
    LE              reduce using rule 111 (string_expr -> STRING .)
    GE              reduce using rule 111 (string_expr -> STRING .)
    AND             reduce using rule 111 (string_expr -> STRING .)
    OR              reduce using rule 111 (string_expr -> STRING .)
    TERNARY_Q       reduce using rule 111 (string_expr -> STRING .)
    RPAREN          reduce using rule 111 (string_expr -> STRING .)
    COMMA           reduce using rule 111 (string_expr -> STRING .)
    TERNARY_C       reduce using rule 111 (string_expr -> STRING .)
    LBRACE          reduce using rule 111 (string_expr -> STRING .)


state 38

    (95) num_factor -> PLUS . num_factor
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (75) var -> . ID

    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 101
    ID              shift and go to state 36

    num_factor                     shift and go to state 100
    func_call                      shift and go to state 102
    var                            shift and go to state 103

state 39

    (96) num_factor -> MINUS . num_factor
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (75) var -> . ID

    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 101
    ID              shift and go to state 36

    num_factor                     shift and go to state 104
    func_call                      shift and go to state 102
    var                            shift and go to state 103

state 40

    (109) num_expr -> num_factor .

    PLUS            reduce using rule 109 (num_expr -> num_factor .)
    MINUS           reduce using rule 109 (num_expr -> num_factor .)
    TIMES           reduce using rule 109 (num_expr -> num_factor .)
    DIVIDE          reduce using rule 109 (num_expr -> num_factor .)
    INT_DIVIDE      reduce using rule 109 (num_expr -> num_factor .)
    POWER           reduce using rule 109 (num_expr -> num_factor .)
    MODULO          reduce using rule 109 (num_expr -> num_factor .)
    SEMI            reduce using rule 109 (num_expr -> num_factor .)
    EQ              reduce using rule 109 (num_expr -> num_factor .)
    NE              reduce using rule 109 (num_expr -> num_factor .)
    LT              reduce using rule 109 (num_expr -> num_factor .)
    GT              reduce using rule 109 (num_expr -> num_factor .)
    LE              reduce using rule 109 (num_expr -> num_factor .)
    GE              reduce using rule 109 (num_expr -> num_factor .)
    RPAREN          reduce using rule 109 (num_expr -> num_factor .)
    AND             reduce using rule 109 (num_expr -> num_factor .)
    OR              reduce using rule 109 (num_expr -> num_factor .)
    TERNARY_Q       reduce using rule 109 (num_expr -> num_factor .)
    COMMA           reduce using rule 109 (num_expr -> num_factor .)
    TERNARY_C       reduce using rule 109 (num_expr -> num_factor .)
    LBRACE          reduce using rule 109 (num_expr -> num_factor .)


state 41

    (115) boolean_expr -> NOT . boolean_expr
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr
    (75) var -> . ID
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var

    NOT             shift and go to state 41
    LPAREN          shift and go to state 106
    BOOLEAN         shift and go to state 46
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45

    boolean_expr                   shift and go to state 105
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47
    var                            shift and go to state 107
    expr                           shift and go to state 92
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40

state 42

    (116) boolean_expr -> boolean_factor .

    AND             reduce using rule 116 (boolean_expr -> boolean_factor .)
    OR              reduce using rule 116 (boolean_expr -> boolean_factor .)
    TERNARY_Q       reduce using rule 116 (boolean_expr -> boolean_factor .)
    SEMI            reduce using rule 116 (boolean_expr -> boolean_factor .)
    EQ              reduce using rule 116 (boolean_expr -> boolean_factor .)
    NE              reduce using rule 116 (boolean_expr -> boolean_factor .)
    LT              reduce using rule 116 (boolean_expr -> boolean_factor .)
    GT              reduce using rule 116 (boolean_expr -> boolean_factor .)
    LE              reduce using rule 116 (boolean_expr -> boolean_factor .)
    GE              reduce using rule 116 (boolean_expr -> boolean_factor .)
    RPAREN          reduce using rule 116 (boolean_expr -> boolean_factor .)
    COMMA           reduce using rule 116 (boolean_expr -> boolean_factor .)
    TERNARY_C       reduce using rule 116 (boolean_expr -> boolean_factor .)
    LBRACE          reduce using rule 116 (boolean_expr -> boolean_factor .)


state 43

    (127) null_expr -> NULL .

    SEMI            reduce using rule 127 (null_expr -> NULL .)
    EQ              reduce using rule 127 (null_expr -> NULL .)
    NE              reduce using rule 127 (null_expr -> NULL .)
    LT              reduce using rule 127 (null_expr -> NULL .)
    GT              reduce using rule 127 (null_expr -> NULL .)
    LE              reduce using rule 127 (null_expr -> NULL .)
    GE              reduce using rule 127 (null_expr -> NULL .)
    AND             reduce using rule 127 (null_expr -> NULL .)
    OR              reduce using rule 127 (null_expr -> NULL .)
    TERNARY_Q       reduce using rule 127 (null_expr -> NULL .)
    RPAREN          reduce using rule 127 (null_expr -> NULL .)
    COMMA           reduce using rule 127 (null_expr -> NULL .)
    TERNARY_C       reduce using rule 127 (null_expr -> NULL .)
    LBRACE          reduce using rule 127 (null_expr -> NULL .)


state 44

    (97) num_factor -> INTEGER .

    PLUS            reduce using rule 97 (num_factor -> INTEGER .)
    MINUS           reduce using rule 97 (num_factor -> INTEGER .)
    TIMES           reduce using rule 97 (num_factor -> INTEGER .)
    DIVIDE          reduce using rule 97 (num_factor -> INTEGER .)
    INT_DIVIDE      reduce using rule 97 (num_factor -> INTEGER .)
    POWER           reduce using rule 97 (num_factor -> INTEGER .)
    MODULO          reduce using rule 97 (num_factor -> INTEGER .)
    SEMI            reduce using rule 97 (num_factor -> INTEGER .)
    EQ              reduce using rule 97 (num_factor -> INTEGER .)
    NE              reduce using rule 97 (num_factor -> INTEGER .)
    LT              reduce using rule 97 (num_factor -> INTEGER .)
    GT              reduce using rule 97 (num_factor -> INTEGER .)
    LE              reduce using rule 97 (num_factor -> INTEGER .)
    GE              reduce using rule 97 (num_factor -> INTEGER .)
    RPAREN          reduce using rule 97 (num_factor -> INTEGER .)
    AND             reduce using rule 97 (num_factor -> INTEGER .)
    OR              reduce using rule 97 (num_factor -> INTEGER .)
    TERNARY_Q       reduce using rule 97 (num_factor -> INTEGER .)
    COMMA           reduce using rule 97 (num_factor -> INTEGER .)
    TERNARY_C       reduce using rule 97 (num_factor -> INTEGER .)
    LBRACE          reduce using rule 97 (num_factor -> INTEGER .)


state 45

    (98) num_factor -> FLOAT .

    PLUS            reduce using rule 98 (num_factor -> FLOAT .)
    MINUS           reduce using rule 98 (num_factor -> FLOAT .)
    TIMES           reduce using rule 98 (num_factor -> FLOAT .)
    DIVIDE          reduce using rule 98 (num_factor -> FLOAT .)
    INT_DIVIDE      reduce using rule 98 (num_factor -> FLOAT .)
    POWER           reduce using rule 98 (num_factor -> FLOAT .)
    MODULO          reduce using rule 98 (num_factor -> FLOAT .)
    SEMI            reduce using rule 98 (num_factor -> FLOAT .)
    EQ              reduce using rule 98 (num_factor -> FLOAT .)
    NE              reduce using rule 98 (num_factor -> FLOAT .)
    LT              reduce using rule 98 (num_factor -> FLOAT .)
    GT              reduce using rule 98 (num_factor -> FLOAT .)
    LE              reduce using rule 98 (num_factor -> FLOAT .)
    GE              reduce using rule 98 (num_factor -> FLOAT .)
    RPAREN          reduce using rule 98 (num_factor -> FLOAT .)
    AND             reduce using rule 98 (num_factor -> FLOAT .)
    OR              reduce using rule 98 (num_factor -> FLOAT .)
    TERNARY_Q       reduce using rule 98 (num_factor -> FLOAT .)
    COMMA           reduce using rule 98 (num_factor -> FLOAT .)
    TERNARY_C       reduce using rule 98 (num_factor -> FLOAT .)
    LBRACE          reduce using rule 98 (num_factor -> FLOAT .)


state 46

    (118) boolean_factor -> BOOLEAN .

    AND             reduce using rule 118 (boolean_factor -> BOOLEAN .)
    OR              reduce using rule 118 (boolean_factor -> BOOLEAN .)
    TERNARY_Q       reduce using rule 118 (boolean_factor -> BOOLEAN .)
    SEMI            reduce using rule 118 (boolean_factor -> BOOLEAN .)
    EQ              reduce using rule 118 (boolean_factor -> BOOLEAN .)
    NE              reduce using rule 118 (boolean_factor -> BOOLEAN .)
    LT              reduce using rule 118 (boolean_factor -> BOOLEAN .)
    GT              reduce using rule 118 (boolean_factor -> BOOLEAN .)
    LE              reduce using rule 118 (boolean_factor -> BOOLEAN .)
    GE              reduce using rule 118 (boolean_factor -> BOOLEAN .)
    RPAREN          reduce using rule 118 (boolean_factor -> BOOLEAN .)
    COMMA           reduce using rule 118 (boolean_factor -> BOOLEAN .)
    TERNARY_C       reduce using rule 118 (boolean_factor -> BOOLEAN .)
    LBRACE          reduce using rule 118 (boolean_factor -> BOOLEAN .)


state 47

    (119) boolean_factor -> comparison .

    AND             reduce using rule 119 (boolean_factor -> comparison .)
    OR              reduce using rule 119 (boolean_factor -> comparison .)
    TERNARY_Q       reduce using rule 119 (boolean_factor -> comparison .)
    SEMI            reduce using rule 119 (boolean_factor -> comparison .)
    EQ              reduce using rule 119 (boolean_factor -> comparison .)
    NE              reduce using rule 119 (boolean_factor -> comparison .)
    LT              reduce using rule 119 (boolean_factor -> comparison .)
    GT              reduce using rule 119 (boolean_factor -> comparison .)
    LE              reduce using rule 119 (boolean_factor -> comparison .)
    GE              reduce using rule 119 (boolean_factor -> comparison .)
    RPAREN          reduce using rule 119 (boolean_factor -> comparison .)
    COMMA           reduce using rule 119 (boolean_factor -> comparison .)
    TERNARY_C       reduce using rule 119 (boolean_factor -> comparison .)
    LBRACE          reduce using rule 119 (boolean_factor -> comparison .)


state 48

    (3) statement_list -> statement statement_list .

    $end            reduce using rule 3 (statement_list -> statement statement_list .)
    RBRACE          reduce using rule 3 (statement_list -> statement statement_list .)


state 49

    (5) statement -> var_assign SEMI .

    FINAL           reduce using rule 5 (statement -> var_assign SEMI .)
    FN              reduce using rule 5 (statement -> var_assign SEMI .)
    SWITCH          reduce using rule 5 (statement -> var_assign SEMI .)
    IF              reduce using rule 5 (statement -> var_assign SEMI .)
    WHILE           reduce using rule 5 (statement -> var_assign SEMI .)
    FOR             reduce using rule 5 (statement -> var_assign SEMI .)
    PRINT           reduce using rule 5 (statement -> var_assign SEMI .)
    SCANSTR         reduce using rule 5 (statement -> var_assign SEMI .)
    SCANNUM         reduce using rule 5 (statement -> var_assign SEMI .)
    ID              reduce using rule 5 (statement -> var_assign SEMI .)
    STRING          reduce using rule 5 (statement -> var_assign SEMI .)
    NOT             reduce using rule 5 (statement -> var_assign SEMI .)
    NULL            reduce using rule 5 (statement -> var_assign SEMI .)
    PLUS            reduce using rule 5 (statement -> var_assign SEMI .)
    MINUS           reduce using rule 5 (statement -> var_assign SEMI .)
    INTEGER         reduce using rule 5 (statement -> var_assign SEMI .)
    FLOAT           reduce using rule 5 (statement -> var_assign SEMI .)
    LPAREN          reduce using rule 5 (statement -> var_assign SEMI .)
    BOOLEAN         reduce using rule 5 (statement -> var_assign SEMI .)
    $end            reduce using rule 5 (statement -> var_assign SEMI .)
    RBRACE          reduce using rule 5 (statement -> var_assign SEMI .)


state 50

    (6) statement -> final_assign SEMI .

    FINAL           reduce using rule 6 (statement -> final_assign SEMI .)
    FN              reduce using rule 6 (statement -> final_assign SEMI .)
    SWITCH          reduce using rule 6 (statement -> final_assign SEMI .)
    IF              reduce using rule 6 (statement -> final_assign SEMI .)
    WHILE           reduce using rule 6 (statement -> final_assign SEMI .)
    FOR             reduce using rule 6 (statement -> final_assign SEMI .)
    PRINT           reduce using rule 6 (statement -> final_assign SEMI .)
    SCANSTR         reduce using rule 6 (statement -> final_assign SEMI .)
    SCANNUM         reduce using rule 6 (statement -> final_assign SEMI .)
    ID              reduce using rule 6 (statement -> final_assign SEMI .)
    STRING          reduce using rule 6 (statement -> final_assign SEMI .)
    NOT             reduce using rule 6 (statement -> final_assign SEMI .)
    NULL            reduce using rule 6 (statement -> final_assign SEMI .)
    PLUS            reduce using rule 6 (statement -> final_assign SEMI .)
    MINUS           reduce using rule 6 (statement -> final_assign SEMI .)
    INTEGER         reduce using rule 6 (statement -> final_assign SEMI .)
    FLOAT           reduce using rule 6 (statement -> final_assign SEMI .)
    LPAREN          reduce using rule 6 (statement -> final_assign SEMI .)
    BOOLEAN         reduce using rule 6 (statement -> final_assign SEMI .)
    $end            reduce using rule 6 (statement -> final_assign SEMI .)
    RBRACE          reduce using rule 6 (statement -> final_assign SEMI .)


state 51

    (7) statement -> var_compound_assign SEMI .

    FINAL           reduce using rule 7 (statement -> var_compound_assign SEMI .)
    FN              reduce using rule 7 (statement -> var_compound_assign SEMI .)
    SWITCH          reduce using rule 7 (statement -> var_compound_assign SEMI .)
    IF              reduce using rule 7 (statement -> var_compound_assign SEMI .)
    WHILE           reduce using rule 7 (statement -> var_compound_assign SEMI .)
    FOR             reduce using rule 7 (statement -> var_compound_assign SEMI .)
    PRINT           reduce using rule 7 (statement -> var_compound_assign SEMI .)
    SCANSTR         reduce using rule 7 (statement -> var_compound_assign SEMI .)
    SCANNUM         reduce using rule 7 (statement -> var_compound_assign SEMI .)
    ID              reduce using rule 7 (statement -> var_compound_assign SEMI .)
    STRING          reduce using rule 7 (statement -> var_compound_assign SEMI .)
    NOT             reduce using rule 7 (statement -> var_compound_assign SEMI .)
    NULL            reduce using rule 7 (statement -> var_compound_assign SEMI .)
    PLUS            reduce using rule 7 (statement -> var_compound_assign SEMI .)
    MINUS           reduce using rule 7 (statement -> var_compound_assign SEMI .)
    INTEGER         reduce using rule 7 (statement -> var_compound_assign SEMI .)
    FLOAT           reduce using rule 7 (statement -> var_compound_assign SEMI .)
    LPAREN          reduce using rule 7 (statement -> var_compound_assign SEMI .)
    BOOLEAN         reduce using rule 7 (statement -> var_compound_assign SEMI .)
    $end            reduce using rule 7 (statement -> var_compound_assign SEMI .)
    RBRACE          reduce using rule 7 (statement -> var_compound_assign SEMI .)


state 52

    (8) statement -> concat_assign SEMI .

    FINAL           reduce using rule 8 (statement -> concat_assign SEMI .)
    FN              reduce using rule 8 (statement -> concat_assign SEMI .)
    SWITCH          reduce using rule 8 (statement -> concat_assign SEMI .)
    IF              reduce using rule 8 (statement -> concat_assign SEMI .)
    WHILE           reduce using rule 8 (statement -> concat_assign SEMI .)
    FOR             reduce using rule 8 (statement -> concat_assign SEMI .)
    PRINT           reduce using rule 8 (statement -> concat_assign SEMI .)
    SCANSTR         reduce using rule 8 (statement -> concat_assign SEMI .)
    SCANNUM         reduce using rule 8 (statement -> concat_assign SEMI .)
    ID              reduce using rule 8 (statement -> concat_assign SEMI .)
    STRING          reduce using rule 8 (statement -> concat_assign SEMI .)
    NOT             reduce using rule 8 (statement -> concat_assign SEMI .)
    NULL            reduce using rule 8 (statement -> concat_assign SEMI .)
    PLUS            reduce using rule 8 (statement -> concat_assign SEMI .)
    MINUS           reduce using rule 8 (statement -> concat_assign SEMI .)
    INTEGER         reduce using rule 8 (statement -> concat_assign SEMI .)
    FLOAT           reduce using rule 8 (statement -> concat_assign SEMI .)
    LPAREN          reduce using rule 8 (statement -> concat_assign SEMI .)
    BOOLEAN         reduce using rule 8 (statement -> concat_assign SEMI .)
    $end            reduce using rule 8 (statement -> concat_assign SEMI .)
    RBRACE          reduce using rule 8 (statement -> concat_assign SEMI .)


state 53

    (9) statement -> var_auto SEMI .

    FINAL           reduce using rule 9 (statement -> var_auto SEMI .)
    FN              reduce using rule 9 (statement -> var_auto SEMI .)
    SWITCH          reduce using rule 9 (statement -> var_auto SEMI .)
    IF              reduce using rule 9 (statement -> var_auto SEMI .)
    WHILE           reduce using rule 9 (statement -> var_auto SEMI .)
    FOR             reduce using rule 9 (statement -> var_auto SEMI .)
    PRINT           reduce using rule 9 (statement -> var_auto SEMI .)
    SCANSTR         reduce using rule 9 (statement -> var_auto SEMI .)
    SCANNUM         reduce using rule 9 (statement -> var_auto SEMI .)
    ID              reduce using rule 9 (statement -> var_auto SEMI .)
    STRING          reduce using rule 9 (statement -> var_auto SEMI .)
    NOT             reduce using rule 9 (statement -> var_auto SEMI .)
    NULL            reduce using rule 9 (statement -> var_auto SEMI .)
    PLUS            reduce using rule 9 (statement -> var_auto SEMI .)
    MINUS           reduce using rule 9 (statement -> var_auto SEMI .)
    INTEGER         reduce using rule 9 (statement -> var_auto SEMI .)
    FLOAT           reduce using rule 9 (statement -> var_auto SEMI .)
    LPAREN          reduce using rule 9 (statement -> var_auto SEMI .)
    BOOLEAN         reduce using rule 9 (statement -> var_auto SEMI .)
    $end            reduce using rule 9 (statement -> var_auto SEMI .)
    RBRACE          reduce using rule 9 (statement -> var_auto SEMI .)


state 54

    (10) statement -> expr SEMI .

    FINAL           reduce using rule 10 (statement -> expr SEMI .)
    FN              reduce using rule 10 (statement -> expr SEMI .)
    SWITCH          reduce using rule 10 (statement -> expr SEMI .)
    IF              reduce using rule 10 (statement -> expr SEMI .)
    WHILE           reduce using rule 10 (statement -> expr SEMI .)
    FOR             reduce using rule 10 (statement -> expr SEMI .)
    PRINT           reduce using rule 10 (statement -> expr SEMI .)
    SCANSTR         reduce using rule 10 (statement -> expr SEMI .)
    SCANNUM         reduce using rule 10 (statement -> expr SEMI .)
    ID              reduce using rule 10 (statement -> expr SEMI .)
    STRING          reduce using rule 10 (statement -> expr SEMI .)
    NOT             reduce using rule 10 (statement -> expr SEMI .)
    NULL            reduce using rule 10 (statement -> expr SEMI .)
    PLUS            reduce using rule 10 (statement -> expr SEMI .)
    MINUS           reduce using rule 10 (statement -> expr SEMI .)
    INTEGER         reduce using rule 10 (statement -> expr SEMI .)
    FLOAT           reduce using rule 10 (statement -> expr SEMI .)
    LPAREN          reduce using rule 10 (statement -> expr SEMI .)
    BOOLEAN         reduce using rule 10 (statement -> expr SEMI .)
    $end            reduce using rule 10 (statement -> expr SEMI .)
    RBRACE          reduce using rule 10 (statement -> expr SEMI .)


state 55

    (121) comparison -> expr EQ . expr
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (75) var -> . ID
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    ID              shift and go to state 36
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

    expr                           shift and go to state 108
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    var                            shift and go to state 109
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 56

    (122) comparison -> expr NE . expr
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (75) var -> . ID
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    ID              shift and go to state 36
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

    expr                           shift and go to state 110
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    var                            shift and go to state 109
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 57

    (123) comparison -> expr LT . expr
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (75) var -> . ID
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    ID              shift and go to state 36
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

    expr                           shift and go to state 111
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    var                            shift and go to state 109
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 58

    (124) comparison -> expr GT . expr
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (75) var -> . ID
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    ID              shift and go to state 36
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

    expr                           shift and go to state 112
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    var                            shift and go to state 109
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 59

    (125) comparison -> expr LE . expr
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (75) var -> . ID
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    ID              shift and go to state 36
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

    expr                           shift and go to state 113
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    var                            shift and go to state 109
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 60

    (126) comparison -> expr GE . expr
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (75) var -> . ID
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    ID              shift and go to state 36
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

    expr                           shift and go to state 114
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    var                            shift and go to state 109
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 61

    (16) statement -> print_stmt SEMI .

    FINAL           reduce using rule 16 (statement -> print_stmt SEMI .)
    FN              reduce using rule 16 (statement -> print_stmt SEMI .)
    SWITCH          reduce using rule 16 (statement -> print_stmt SEMI .)
    IF              reduce using rule 16 (statement -> print_stmt SEMI .)
    WHILE           reduce using rule 16 (statement -> print_stmt SEMI .)
    FOR             reduce using rule 16 (statement -> print_stmt SEMI .)
    PRINT           reduce using rule 16 (statement -> print_stmt SEMI .)
    SCANSTR         reduce using rule 16 (statement -> print_stmt SEMI .)
    SCANNUM         reduce using rule 16 (statement -> print_stmt SEMI .)
    ID              reduce using rule 16 (statement -> print_stmt SEMI .)
    STRING          reduce using rule 16 (statement -> print_stmt SEMI .)
    NOT             reduce using rule 16 (statement -> print_stmt SEMI .)
    NULL            reduce using rule 16 (statement -> print_stmt SEMI .)
    PLUS            reduce using rule 16 (statement -> print_stmt SEMI .)
    MINUS           reduce using rule 16 (statement -> print_stmt SEMI .)
    INTEGER         reduce using rule 16 (statement -> print_stmt SEMI .)
    FLOAT           reduce using rule 16 (statement -> print_stmt SEMI .)
    LPAREN          reduce using rule 16 (statement -> print_stmt SEMI .)
    BOOLEAN         reduce using rule 16 (statement -> print_stmt SEMI .)
    $end            reduce using rule 16 (statement -> print_stmt SEMI .)
    RBRACE          reduce using rule 16 (statement -> print_stmt SEMI .)


state 62

    (17) statement -> scan_stmt SEMI .

    FINAL           reduce using rule 17 (statement -> scan_stmt SEMI .)
    FN              reduce using rule 17 (statement -> scan_stmt SEMI .)
    SWITCH          reduce using rule 17 (statement -> scan_stmt SEMI .)
    IF              reduce using rule 17 (statement -> scan_stmt SEMI .)
    WHILE           reduce using rule 17 (statement -> scan_stmt SEMI .)
    FOR             reduce using rule 17 (statement -> scan_stmt SEMI .)
    PRINT           reduce using rule 17 (statement -> scan_stmt SEMI .)
    SCANSTR         reduce using rule 17 (statement -> scan_stmt SEMI .)
    SCANNUM         reduce using rule 17 (statement -> scan_stmt SEMI .)
    ID              reduce using rule 17 (statement -> scan_stmt SEMI .)
    STRING          reduce using rule 17 (statement -> scan_stmt SEMI .)
    NOT             reduce using rule 17 (statement -> scan_stmt SEMI .)
    NULL            reduce using rule 17 (statement -> scan_stmt SEMI .)
    PLUS            reduce using rule 17 (statement -> scan_stmt SEMI .)
    MINUS           reduce using rule 17 (statement -> scan_stmt SEMI .)
    INTEGER         reduce using rule 17 (statement -> scan_stmt SEMI .)
    FLOAT           reduce using rule 17 (statement -> scan_stmt SEMI .)
    LPAREN          reduce using rule 17 (statement -> scan_stmt SEMI .)
    BOOLEAN         reduce using rule 17 (statement -> scan_stmt SEMI .)
    $end            reduce using rule 17 (statement -> scan_stmt SEMI .)
    RBRACE          reduce using rule 17 (statement -> scan_stmt SEMI .)


state 63

    (76) var_assign -> var ASSIGN . expr
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (75) var -> . ID
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    ID              shift and go to state 36
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

    var                            shift and go to state 109
    expr                           shift and go to state 115
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 64

    (78) var_compound_assign -> var PLUS_ASSIGN . num_expr
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (75) var -> . ID

    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 101
    ID              shift and go to state 36

    var                            shift and go to state 103
    num_expr                       shift and go to state 116
    num_factor                     shift and go to state 40
    func_call                      shift and go to state 102

state 65

    (79) var_compound_assign -> var MINUS_ASSIGN . num_expr
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (75) var -> . ID

    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 101
    ID              shift and go to state 36

    var                            shift and go to state 103
    num_expr                       shift and go to state 117
    num_factor                     shift and go to state 40
    func_call                      shift and go to state 102

state 66

    (80) var_compound_assign -> var TIMES_ASSIGN . num_expr
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (75) var -> . ID

    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 101
    ID              shift and go to state 36

    var                            shift and go to state 103
    num_expr                       shift and go to state 118
    num_factor                     shift and go to state 40
    func_call                      shift and go to state 102

state 67

    (81) var_compound_assign -> var DIVIDE_ASSIGN . num_expr
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (75) var -> . ID

    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 101
    ID              shift and go to state 36

    var                            shift and go to state 103
    num_expr                       shift and go to state 119
    num_factor                     shift and go to state 40
    func_call                      shift and go to state 102

state 68

    (82) var_compound_assign -> var POWER_ASSIGN . num_expr
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (75) var -> . ID

    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 101
    ID              shift and go to state 36

    var                            shift and go to state 103
    num_expr                       shift and go to state 120
    num_factor                     shift and go to state 40
    func_call                      shift and go to state 102

state 69

    (83) var_compound_assign -> var MODULO_ASSIGN . num_expr
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (75) var -> . ID

    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 101
    ID              shift and go to state 36

    var                            shift and go to state 103
    num_expr                       shift and go to state 121
    num_factor                     shift and go to state 40
    func_call                      shift and go to state 102

state 70

    (84) var_compound_assign -> var INT_DIVIDE_ASSIGN . num_expr
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (75) var -> . ID

    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 101
    ID              shift and go to state 36

    var                            shift and go to state 103
    num_expr                       shift and go to state 122
    num_factor                     shift and go to state 40
    func_call                      shift and go to state 102

state 71

    (87) concat_assign -> var CONCAT_ASSIGN . string_expr
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (75) var -> . ID

    STRING          shift and go to state 37
    ID              shift and go to state 36

    var                            shift and go to state 123
    string_expr                    shift and go to state 124

state 72

    (85) var_auto -> var INCREMENT .

    SEMI            reduce using rule 85 (var_auto -> var INCREMENT .)
    RPAREN          reduce using rule 85 (var_auto -> var INCREMENT .)


state 73

    (86) var_auto -> var DECREMENT .

    SEMI            reduce using rule 86 (var_auto -> var DECREMENT .)
    RPAREN          reduce using rule 86 (var_auto -> var DECREMENT .)


state 74

    (39) func_call -> var LPAREN . arguments_list RPAREN
    (40) arguments_list -> . non_empty_arguments_list
    (41) arguments_list -> . empty
    (42) non_empty_arguments_list -> . expr COMMA non_empty_arguments_list
    (43) non_empty_arguments_list -> . expr
    (129) empty -> .
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (75) var -> . ID
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

    RPAREN          reduce using rule 129 (empty -> .)
    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    ID              shift and go to state 36
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

    var                            shift and go to state 109
    arguments_list                 shift and go to state 125
    non_empty_arguments_list       shift and go to state 126
    empty                          shift and go to state 127
    expr                           shift and go to state 128
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 75

    (77) final_assign -> FINAL var . ASSIGN expr

    ASSIGN          shift and go to state 129


state 76

    (102) num_expr -> num_expr PLUS . num_expr
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (75) var -> . ID

    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 101
    ID              shift and go to state 36

    num_expr                       shift and go to state 130
    num_factor                     shift and go to state 40
    func_call                      shift and go to state 102
    var                            shift and go to state 103

state 77

    (103) num_expr -> num_expr MINUS . num_expr
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (75) var -> . ID

    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 101
    ID              shift and go to state 36

    num_expr                       shift and go to state 131
    num_factor                     shift and go to state 40
    func_call                      shift and go to state 102
    var                            shift and go to state 103

state 78

    (104) num_expr -> num_expr TIMES . num_expr
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (75) var -> . ID

    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 101
    ID              shift and go to state 36

    num_expr                       shift and go to state 132
    num_factor                     shift and go to state 40
    func_call                      shift and go to state 102
    var                            shift and go to state 103

state 79

    (105) num_expr -> num_expr DIVIDE . num_expr
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (75) var -> . ID

    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 101
    ID              shift and go to state 36

    num_expr                       shift and go to state 133
    num_factor                     shift and go to state 40
    func_call                      shift and go to state 102
    var                            shift and go to state 103

state 80

    (106) num_expr -> num_expr INT_DIVIDE . num_expr
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (75) var -> . ID

    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 101
    ID              shift and go to state 36

    num_expr                       shift and go to state 134
    num_factor                     shift and go to state 40
    func_call                      shift and go to state 102
    var                            shift and go to state 103

state 81

    (107) num_expr -> num_expr POWER . num_expr
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (75) var -> . ID

    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 101
    ID              shift and go to state 36

    num_expr                       shift and go to state 135
    num_factor                     shift and go to state 40
    func_call                      shift and go to state 102
    var                            shift and go to state 103

state 82

    (108) num_expr -> num_expr MODULO . num_expr
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (75) var -> . ID

    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 101
    ID              shift and go to state 36

    num_expr                       shift and go to state 136
    num_factor                     shift and go to state 40
    func_call                      shift and go to state 102
    var                            shift and go to state 103

state 83

    (110) string_expr -> string_expr CONCAT . string_expr
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (75) var -> . ID

    STRING          shift and go to state 37
    ID              shift and go to state 36

    string_expr                    shift and go to state 137
    var                            shift and go to state 123

state 84

    (113) boolean_expr -> boolean_expr AND . boolean_expr
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr
    (75) var -> . ID
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var

    NOT             shift and go to state 41
    LPAREN          shift and go to state 106
    BOOLEAN         shift and go to state 46
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45

    boolean_expr                   shift and go to state 138
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47
    var                            shift and go to state 107
    expr                           shift and go to state 92
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40

state 85

    (114) boolean_expr -> boolean_expr OR . boolean_expr
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr
    (75) var -> . ID
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var

    NOT             shift and go to state 41
    LPAREN          shift and go to state 106
    BOOLEAN         shift and go to state 46
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45

    boolean_expr                   shift and go to state 139
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47
    var                            shift and go to state 107
    expr                           shift and go to state 92
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40

state 86

    (128) ternary_expr -> boolean_expr TERNARY_Q . expr TERNARY_C expr
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (75) var -> . ID
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    ID              shift and go to state 36
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

    boolean_expr                   shift and go to state 23
    expr                           shift and go to state 140
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    var                            shift and go to state 109
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 87

    (38) func_stmt -> FN var . LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE

    LPAREN          shift and go to state 141


state 88

    (99) num_factor -> LPAREN num_expr . RPAREN
    (102) num_expr -> num_expr . PLUS num_expr
    (103) num_expr -> num_expr . MINUS num_expr
    (104) num_expr -> num_expr . TIMES num_expr
    (105) num_expr -> num_expr . DIVIDE num_expr
    (106) num_expr -> num_expr . INT_DIVIDE num_expr
    (107) num_expr -> num_expr . POWER num_expr
    (108) num_expr -> num_expr . MODULO num_expr
    (89) expr -> num_expr .

    RPAREN          shift and go to state 142
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79
    INT_DIVIDE      shift and go to state 80
    POWER           shift and go to state 81
    MODULO          shift and go to state 82
    EQ              reduce using rule 89 (expr -> num_expr .)
    NE              reduce using rule 89 (expr -> num_expr .)
    LT              reduce using rule 89 (expr -> num_expr .)
    GT              reduce using rule 89 (expr -> num_expr .)
    LE              reduce using rule 89 (expr -> num_expr .)
    GE              reduce using rule 89 (expr -> num_expr .)


state 89

    (117) boolean_factor -> LPAREN boolean_expr . RPAREN
    (113) boolean_expr -> boolean_expr . AND boolean_expr
    (114) boolean_expr -> boolean_expr . OR boolean_expr
    (90) expr -> boolean_expr .
    (128) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    RPAREN          shift and go to state 143
    AND             shift and go to state 84
    OR              shift and go to state 85
    EQ              reduce using rule 90 (expr -> boolean_expr .)
    NE              reduce using rule 90 (expr -> boolean_expr .)
    LT              reduce using rule 90 (expr -> boolean_expr .)
    GT              reduce using rule 90 (expr -> boolean_expr .)
    LE              reduce using rule 90 (expr -> boolean_expr .)
    GE              reduce using rule 90 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 86


state 90

    (100) num_factor -> func_call .
    (94) expr -> func_call .

  ! reduce/reduce conflict for EQ resolved using rule 94 (expr -> func_call .)
  ! reduce/reduce conflict for NE resolved using rule 94 (expr -> func_call .)
  ! reduce/reduce conflict for LT resolved using rule 94 (expr -> func_call .)
  ! reduce/reduce conflict for GT resolved using rule 94 (expr -> func_call .)
  ! reduce/reduce conflict for LE resolved using rule 94 (expr -> func_call .)
  ! reduce/reduce conflict for GE resolved using rule 94 (expr -> func_call .)
    RPAREN          reduce using rule 100 (num_factor -> func_call .)
    PLUS            reduce using rule 100 (num_factor -> func_call .)
    MINUS           reduce using rule 100 (num_factor -> func_call .)
    TIMES           reduce using rule 100 (num_factor -> func_call .)
    DIVIDE          reduce using rule 100 (num_factor -> func_call .)
    INT_DIVIDE      reduce using rule 100 (num_factor -> func_call .)
    POWER           reduce using rule 100 (num_factor -> func_call .)
    MODULO          reduce using rule 100 (num_factor -> func_call .)
    EQ              reduce using rule 94 (expr -> func_call .)
    NE              reduce using rule 94 (expr -> func_call .)
    LT              reduce using rule 94 (expr -> func_call .)
    GT              reduce using rule 94 (expr -> func_call .)
    LE              reduce using rule 94 (expr -> func_call .)
    GE              reduce using rule 94 (expr -> func_call .)

  ! EQ              [ reduce using rule 100 (num_factor -> func_call .) ]
  ! NE              [ reduce using rule 100 (num_factor -> func_call .) ]
  ! LT              [ reduce using rule 100 (num_factor -> func_call .) ]
  ! GT              [ reduce using rule 100 (num_factor -> func_call .) ]
  ! LE              [ reduce using rule 100 (num_factor -> func_call .) ]
  ! GE              [ reduce using rule 100 (num_factor -> func_call .) ]


state 91

    (101) num_factor -> var .
    (120) boolean_factor -> var .
    (39) func_call -> var . LPAREN arguments_list RPAREN
    (93) expr -> var .
    (112) string_expr -> var .

  ! reduce/reduce conflict for RPAREN resolved using rule 101 (num_factor -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 101 (num_factor -> var .)
  ! reduce/reduce conflict for NE resolved using rule 101 (num_factor -> var .)
  ! reduce/reduce conflict for LT resolved using rule 101 (num_factor -> var .)
  ! reduce/reduce conflict for GT resolved using rule 101 (num_factor -> var .)
  ! reduce/reduce conflict for LE resolved using rule 101 (num_factor -> var .)
  ! reduce/reduce conflict for GE resolved using rule 101 (num_factor -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 93 (expr -> var .)
    RPAREN          reduce using rule 101 (num_factor -> var .)
    PLUS            reduce using rule 101 (num_factor -> var .)
    MINUS           reduce using rule 101 (num_factor -> var .)
    TIMES           reduce using rule 101 (num_factor -> var .)
    DIVIDE          reduce using rule 101 (num_factor -> var .)
    INT_DIVIDE      reduce using rule 101 (num_factor -> var .)
    POWER           reduce using rule 101 (num_factor -> var .)
    MODULO          reduce using rule 101 (num_factor -> var .)
    AND             reduce using rule 120 (boolean_factor -> var .)
    OR              reduce using rule 120 (boolean_factor -> var .)
    TERNARY_Q       reduce using rule 120 (boolean_factor -> var .)
    LPAREN          shift and go to state 74
    EQ              reduce using rule 93 (expr -> var .)
    NE              reduce using rule 93 (expr -> var .)
    LT              reduce using rule 93 (expr -> var .)
    GT              reduce using rule 93 (expr -> var .)
    LE              reduce using rule 93 (expr -> var .)
    GE              reduce using rule 93 (expr -> var .)
    CONCAT          reduce using rule 112 (string_expr -> var .)

  ! EQ              [ reduce using rule 101 (num_factor -> var .) ]
  ! NE              [ reduce using rule 101 (num_factor -> var .) ]
  ! LT              [ reduce using rule 101 (num_factor -> var .) ]
  ! GT              [ reduce using rule 101 (num_factor -> var .) ]
  ! LE              [ reduce using rule 101 (num_factor -> var .) ]
  ! GE              [ reduce using rule 101 (num_factor -> var .) ]
  ! RPAREN          [ reduce using rule 120 (boolean_factor -> var .) ]
  ! EQ              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! NE              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! LT              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! GT              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! LE              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! GE              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! EQ              [ reduce using rule 112 (string_expr -> var .) ]
  ! NE              [ reduce using rule 112 (string_expr -> var .) ]
  ! LT              [ reduce using rule 112 (string_expr -> var .) ]
  ! GT              [ reduce using rule 112 (string_expr -> var .) ]
  ! LE              [ reduce using rule 112 (string_expr -> var .) ]
  ! GE              [ reduce using rule 112 (string_expr -> var .) ]


state 92

    (121) comparison -> expr . EQ expr
    (122) comparison -> expr . NE expr
    (123) comparison -> expr . LT expr
    (124) comparison -> expr . GT expr
    (125) comparison -> expr . LE expr
    (126) comparison -> expr . GE expr

    EQ              shift and go to state 55
    NE              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60


state 93

    (48) switch_stmt -> SWITCH LPAREN . var RPAREN LBRACE case RBRACE
    (75) var -> . ID

    ID              shift and go to state 36

    var                            shift and go to state 144

state 94

    (53) if_stmt -> IF LPAREN . boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr
    (75) var -> . ID
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var

    NOT             shift and go to state 41
    LPAREN          shift and go to state 106
    BOOLEAN         shift and go to state 46
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45

    boolean_expr                   shift and go to state 145
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47
    var                            shift and go to state 107
    expr                           shift and go to state 92
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40

state 95

    (73) while_stmt -> WHILE LPAREN . boolean_expr RPAREN LBRACE block RBRACE
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr
    (75) var -> . ID
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var

    NOT             shift and go to state 41
    LPAREN          shift and go to state 106
    BOOLEAN         shift and go to state 46
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45

    boolean_expr                   shift and go to state 146
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47
    var                            shift and go to state 107
    expr                           shift and go to state 92
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40

state 96

    (74) for_stmt -> FOR LPAREN . var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (76) var_assign -> . var ASSIGN expr
    (75) var -> . ID

    ID              shift and go to state 36

    var_assign                     shift and go to state 147
    var                            shift and go to state 148

state 97

    (70) print_stmt -> PRINT LPAREN . expr RPAREN
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (75) var -> . ID
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    ID              shift and go to state 36
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

    expr                           shift and go to state 149
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    var                            shift and go to state 109
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 98

    (71) scan_stmt -> SCANSTR LPAREN . var RPAREN
    (75) var -> . ID

    ID              shift and go to state 36

    var                            shift and go to state 150

state 99

    (72) scan_stmt -> SCANNUM LPAREN . var RPAREN
    (75) var -> . ID

    ID              shift and go to state 36

    var                            shift and go to state 151

state 100

    (95) num_factor -> PLUS num_factor .

    PLUS            reduce using rule 95 (num_factor -> PLUS num_factor .)
    MINUS           reduce using rule 95 (num_factor -> PLUS num_factor .)
    TIMES           reduce using rule 95 (num_factor -> PLUS num_factor .)
    DIVIDE          reduce using rule 95 (num_factor -> PLUS num_factor .)
    INT_DIVIDE      reduce using rule 95 (num_factor -> PLUS num_factor .)
    POWER           reduce using rule 95 (num_factor -> PLUS num_factor .)
    MODULO          reduce using rule 95 (num_factor -> PLUS num_factor .)
    SEMI            reduce using rule 95 (num_factor -> PLUS num_factor .)
    EQ              reduce using rule 95 (num_factor -> PLUS num_factor .)
    NE              reduce using rule 95 (num_factor -> PLUS num_factor .)
    LT              reduce using rule 95 (num_factor -> PLUS num_factor .)
    GT              reduce using rule 95 (num_factor -> PLUS num_factor .)
    LE              reduce using rule 95 (num_factor -> PLUS num_factor .)
    GE              reduce using rule 95 (num_factor -> PLUS num_factor .)
    RPAREN          reduce using rule 95 (num_factor -> PLUS num_factor .)
    AND             reduce using rule 95 (num_factor -> PLUS num_factor .)
    OR              reduce using rule 95 (num_factor -> PLUS num_factor .)
    TERNARY_Q       reduce using rule 95 (num_factor -> PLUS num_factor .)
    COMMA           reduce using rule 95 (num_factor -> PLUS num_factor .)
    TERNARY_C       reduce using rule 95 (num_factor -> PLUS num_factor .)
    LBRACE          reduce using rule 95 (num_factor -> PLUS num_factor .)


state 101

    (99) num_factor -> LPAREN . num_expr RPAREN
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (75) var -> . ID

    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 101
    ID              shift and go to state 36

    num_expr                       shift and go to state 152
    num_factor                     shift and go to state 40
    func_call                      shift and go to state 102
    var                            shift and go to state 103

state 102

    (100) num_factor -> func_call .

    PLUS            reduce using rule 100 (num_factor -> func_call .)
    MINUS           reduce using rule 100 (num_factor -> func_call .)
    TIMES           reduce using rule 100 (num_factor -> func_call .)
    DIVIDE          reduce using rule 100 (num_factor -> func_call .)
    INT_DIVIDE      reduce using rule 100 (num_factor -> func_call .)
    POWER           reduce using rule 100 (num_factor -> func_call .)
    MODULO          reduce using rule 100 (num_factor -> func_call .)
    SEMI            reduce using rule 100 (num_factor -> func_call .)
    EQ              reduce using rule 100 (num_factor -> func_call .)
    NE              reduce using rule 100 (num_factor -> func_call .)
    LT              reduce using rule 100 (num_factor -> func_call .)
    GT              reduce using rule 100 (num_factor -> func_call .)
    LE              reduce using rule 100 (num_factor -> func_call .)
    GE              reduce using rule 100 (num_factor -> func_call .)
    RPAREN          reduce using rule 100 (num_factor -> func_call .)
    AND             reduce using rule 100 (num_factor -> func_call .)
    OR              reduce using rule 100 (num_factor -> func_call .)
    TERNARY_Q       reduce using rule 100 (num_factor -> func_call .)
    COMMA           reduce using rule 100 (num_factor -> func_call .)
    TERNARY_C       reduce using rule 100 (num_factor -> func_call .)
    LBRACE          reduce using rule 100 (num_factor -> func_call .)


state 103

    (101) num_factor -> var .
    (39) func_call -> var . LPAREN arguments_list RPAREN

    PLUS            reduce using rule 101 (num_factor -> var .)
    MINUS           reduce using rule 101 (num_factor -> var .)
    TIMES           reduce using rule 101 (num_factor -> var .)
    DIVIDE          reduce using rule 101 (num_factor -> var .)
    INT_DIVIDE      reduce using rule 101 (num_factor -> var .)
    POWER           reduce using rule 101 (num_factor -> var .)
    MODULO          reduce using rule 101 (num_factor -> var .)
    SEMI            reduce using rule 101 (num_factor -> var .)
    EQ              reduce using rule 101 (num_factor -> var .)
    NE              reduce using rule 101 (num_factor -> var .)
    LT              reduce using rule 101 (num_factor -> var .)
    GT              reduce using rule 101 (num_factor -> var .)
    LE              reduce using rule 101 (num_factor -> var .)
    GE              reduce using rule 101 (num_factor -> var .)
    RPAREN          reduce using rule 101 (num_factor -> var .)
    AND             reduce using rule 101 (num_factor -> var .)
    OR              reduce using rule 101 (num_factor -> var .)
    TERNARY_Q       reduce using rule 101 (num_factor -> var .)
    COMMA           reduce using rule 101 (num_factor -> var .)
    TERNARY_C       reduce using rule 101 (num_factor -> var .)
    LBRACE          reduce using rule 101 (num_factor -> var .)
    LPAREN          shift and go to state 74


state 104

    (96) num_factor -> MINUS num_factor .

    PLUS            reduce using rule 96 (num_factor -> MINUS num_factor .)
    MINUS           reduce using rule 96 (num_factor -> MINUS num_factor .)
    TIMES           reduce using rule 96 (num_factor -> MINUS num_factor .)
    DIVIDE          reduce using rule 96 (num_factor -> MINUS num_factor .)
    INT_DIVIDE      reduce using rule 96 (num_factor -> MINUS num_factor .)
    POWER           reduce using rule 96 (num_factor -> MINUS num_factor .)
    MODULO          reduce using rule 96 (num_factor -> MINUS num_factor .)
    SEMI            reduce using rule 96 (num_factor -> MINUS num_factor .)
    EQ              reduce using rule 96 (num_factor -> MINUS num_factor .)
    NE              reduce using rule 96 (num_factor -> MINUS num_factor .)
    LT              reduce using rule 96 (num_factor -> MINUS num_factor .)
    GT              reduce using rule 96 (num_factor -> MINUS num_factor .)
    LE              reduce using rule 96 (num_factor -> MINUS num_factor .)
    GE              reduce using rule 96 (num_factor -> MINUS num_factor .)
    RPAREN          reduce using rule 96 (num_factor -> MINUS num_factor .)
    AND             reduce using rule 96 (num_factor -> MINUS num_factor .)
    OR              reduce using rule 96 (num_factor -> MINUS num_factor .)
    TERNARY_Q       reduce using rule 96 (num_factor -> MINUS num_factor .)
    COMMA           reduce using rule 96 (num_factor -> MINUS num_factor .)
    TERNARY_C       reduce using rule 96 (num_factor -> MINUS num_factor .)
    LBRACE          reduce using rule 96 (num_factor -> MINUS num_factor .)


state 105

    (115) boolean_expr -> NOT boolean_expr .
    (113) boolean_expr -> boolean_expr . AND boolean_expr
    (114) boolean_expr -> boolean_expr . OR boolean_expr
    (90) expr -> boolean_expr .
    (128) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for EQ resolved using rule 90 (expr -> boolean_expr .)
  ! reduce/reduce conflict for NE resolved using rule 90 (expr -> boolean_expr .)
  ! reduce/reduce conflict for LT resolved using rule 90 (expr -> boolean_expr .)
  ! reduce/reduce conflict for GT resolved using rule 90 (expr -> boolean_expr .)
  ! reduce/reduce conflict for LE resolved using rule 90 (expr -> boolean_expr .)
  ! reduce/reduce conflict for GE resolved using rule 90 (expr -> boolean_expr .)
  ! shift/reduce conflict for TERNARY_Q resolved as shift
    SEMI            reduce using rule 115 (boolean_expr -> NOT boolean_expr .)
    RPAREN          reduce using rule 115 (boolean_expr -> NOT boolean_expr .)
    COMMA           reduce using rule 115 (boolean_expr -> NOT boolean_expr .)
    TERNARY_C       reduce using rule 115 (boolean_expr -> NOT boolean_expr .)
    LBRACE          reduce using rule 115 (boolean_expr -> NOT boolean_expr .)
    AND             shift and go to state 84
    OR              shift and go to state 85
    EQ              reduce using rule 90 (expr -> boolean_expr .)
    NE              reduce using rule 90 (expr -> boolean_expr .)
    LT              reduce using rule 90 (expr -> boolean_expr .)
    GT              reduce using rule 90 (expr -> boolean_expr .)
    LE              reduce using rule 90 (expr -> boolean_expr .)
    GE              reduce using rule 90 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 86

  ! AND             [ reduce using rule 115 (boolean_expr -> NOT boolean_expr .) ]
  ! OR              [ reduce using rule 115 (boolean_expr -> NOT boolean_expr .) ]
  ! TERNARY_Q       [ reduce using rule 115 (boolean_expr -> NOT boolean_expr .) ]
  ! EQ              [ reduce using rule 115 (boolean_expr -> NOT boolean_expr .) ]
  ! NE              [ reduce using rule 115 (boolean_expr -> NOT boolean_expr .) ]
  ! LT              [ reduce using rule 115 (boolean_expr -> NOT boolean_expr .) ]
  ! GT              [ reduce using rule 115 (boolean_expr -> NOT boolean_expr .) ]
  ! LE              [ reduce using rule 115 (boolean_expr -> NOT boolean_expr .) ]
  ! GE              [ reduce using rule 115 (boolean_expr -> NOT boolean_expr .) ]


state 106

    (117) boolean_factor -> LPAREN . boolean_expr RPAREN
    (99) num_factor -> LPAREN . num_expr RPAREN
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr
    (75) var -> . ID
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr

    NOT             shift and go to state 41
    LPAREN          shift and go to state 106
    BOOLEAN         shift and go to state 46
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NULL            shift and go to state 43

    boolean_expr                   shift and go to state 89
    num_expr                       shift and go to state 88
    boolean_factor                 shift and go to state 42
    num_factor                     shift and go to state 40
    comparison                     shift and go to state 47
    var                            shift and go to state 153
    func_call                      shift and go to state 90
    expr                           shift and go to state 92
    string_expr                    shift and go to state 22
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25

state 107

    (120) boolean_factor -> var .
    (93) expr -> var .
    (112) string_expr -> var .
    (39) func_call -> var . LPAREN arguments_list RPAREN
    (101) num_factor -> var .

  ! reduce/reduce conflict for EQ resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 93 (expr -> var .)
    AND             reduce using rule 120 (boolean_factor -> var .)
    OR              reduce using rule 120 (boolean_factor -> var .)
    TERNARY_Q       reduce using rule 120 (boolean_factor -> var .)
    SEMI            reduce using rule 120 (boolean_factor -> var .)
    RPAREN          reduce using rule 120 (boolean_factor -> var .)
    COMMA           reduce using rule 120 (boolean_factor -> var .)
    TERNARY_C       reduce using rule 120 (boolean_factor -> var .)
    LBRACE          reduce using rule 120 (boolean_factor -> var .)
    EQ              reduce using rule 93 (expr -> var .)
    NE              reduce using rule 93 (expr -> var .)
    LT              reduce using rule 93 (expr -> var .)
    GT              reduce using rule 93 (expr -> var .)
    LE              reduce using rule 93 (expr -> var .)
    GE              reduce using rule 93 (expr -> var .)
    CONCAT          reduce using rule 112 (string_expr -> var .)
    LPAREN          shift and go to state 74
    PLUS            reduce using rule 101 (num_factor -> var .)
    MINUS           reduce using rule 101 (num_factor -> var .)
    TIMES           reduce using rule 101 (num_factor -> var .)
    DIVIDE          reduce using rule 101 (num_factor -> var .)
    INT_DIVIDE      reduce using rule 101 (num_factor -> var .)
    POWER           reduce using rule 101 (num_factor -> var .)
    MODULO          reduce using rule 101 (num_factor -> var .)

  ! EQ              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! NE              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! LT              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! GT              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! LE              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! GE              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! EQ              [ reduce using rule 112 (string_expr -> var .) ]
  ! NE              [ reduce using rule 112 (string_expr -> var .) ]
  ! LT              [ reduce using rule 112 (string_expr -> var .) ]
  ! GT              [ reduce using rule 112 (string_expr -> var .) ]
  ! LE              [ reduce using rule 112 (string_expr -> var .) ]
  ! GE              [ reduce using rule 112 (string_expr -> var .) ]
  ! EQ              [ reduce using rule 101 (num_factor -> var .) ]
  ! NE              [ reduce using rule 101 (num_factor -> var .) ]
  ! LT              [ reduce using rule 101 (num_factor -> var .) ]
  ! GT              [ reduce using rule 101 (num_factor -> var .) ]
  ! LE              [ reduce using rule 101 (num_factor -> var .) ]
  ! GE              [ reduce using rule 101 (num_factor -> var .) ]


state 108

    (121) comparison -> expr EQ expr .
    (121) comparison -> expr . EQ expr
    (122) comparison -> expr . NE expr
    (123) comparison -> expr . LT expr
    (124) comparison -> expr . GT expr
    (125) comparison -> expr . LE expr
    (126) comparison -> expr . GE expr

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    AND             reduce using rule 121 (comparison -> expr EQ expr .)
    OR              reduce using rule 121 (comparison -> expr EQ expr .)
    TERNARY_Q       reduce using rule 121 (comparison -> expr EQ expr .)
    SEMI            reduce using rule 121 (comparison -> expr EQ expr .)
    RPAREN          reduce using rule 121 (comparison -> expr EQ expr .)
    COMMA           reduce using rule 121 (comparison -> expr EQ expr .)
    TERNARY_C       reduce using rule 121 (comparison -> expr EQ expr .)
    LBRACE          reduce using rule 121 (comparison -> expr EQ expr .)
    EQ              shift and go to state 55
    NE              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

  ! EQ              [ reduce using rule 121 (comparison -> expr EQ expr .) ]
  ! NE              [ reduce using rule 121 (comparison -> expr EQ expr .) ]
  ! LT              [ reduce using rule 121 (comparison -> expr EQ expr .) ]
  ! GT              [ reduce using rule 121 (comparison -> expr EQ expr .) ]
  ! LE              [ reduce using rule 121 (comparison -> expr EQ expr .) ]
  ! GE              [ reduce using rule 121 (comparison -> expr EQ expr .) ]


state 109

    (93) expr -> var .
    (112) string_expr -> var .
    (39) func_call -> var . LPAREN arguments_list RPAREN
    (101) num_factor -> var .
    (120) boolean_factor -> var .

  ! reduce/reduce conflict for EQ resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for AND resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for OR resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for TERNARY_Q resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for SEMI resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for RPAREN resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for COMMA resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for TERNARY_C resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LBRACE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for AND resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for OR resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for TERNARY_Q resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for SEMI resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for RPAREN resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for COMMA resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for TERNARY_C resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LBRACE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for AND resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for OR resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for TERNARY_Q resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for SEMI resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for RPAREN resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for COMMA resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for TERNARY_C resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LBRACE resolved using rule 93 (expr -> var .)
    EQ              reduce using rule 93 (expr -> var .)
    NE              reduce using rule 93 (expr -> var .)
    LT              reduce using rule 93 (expr -> var .)
    GT              reduce using rule 93 (expr -> var .)
    LE              reduce using rule 93 (expr -> var .)
    GE              reduce using rule 93 (expr -> var .)
    AND             reduce using rule 93 (expr -> var .)
    OR              reduce using rule 93 (expr -> var .)
    TERNARY_Q       reduce using rule 93 (expr -> var .)
    SEMI            reduce using rule 93 (expr -> var .)
    RPAREN          reduce using rule 93 (expr -> var .)
    COMMA           reduce using rule 93 (expr -> var .)
    TERNARY_C       reduce using rule 93 (expr -> var .)
    LBRACE          reduce using rule 93 (expr -> var .)
    CONCAT          reduce using rule 112 (string_expr -> var .)
    LPAREN          shift and go to state 74
    PLUS            reduce using rule 101 (num_factor -> var .)
    MINUS           reduce using rule 101 (num_factor -> var .)
    TIMES           reduce using rule 101 (num_factor -> var .)
    DIVIDE          reduce using rule 101 (num_factor -> var .)
    INT_DIVIDE      reduce using rule 101 (num_factor -> var .)
    POWER           reduce using rule 101 (num_factor -> var .)
    MODULO          reduce using rule 101 (num_factor -> var .)

  ! EQ              [ reduce using rule 112 (string_expr -> var .) ]
  ! NE              [ reduce using rule 112 (string_expr -> var .) ]
  ! LT              [ reduce using rule 112 (string_expr -> var .) ]
  ! GT              [ reduce using rule 112 (string_expr -> var .) ]
  ! LE              [ reduce using rule 112 (string_expr -> var .) ]
  ! GE              [ reduce using rule 112 (string_expr -> var .) ]
  ! AND             [ reduce using rule 112 (string_expr -> var .) ]
  ! OR              [ reduce using rule 112 (string_expr -> var .) ]
  ! TERNARY_Q       [ reduce using rule 112 (string_expr -> var .) ]
  ! SEMI            [ reduce using rule 112 (string_expr -> var .) ]
  ! RPAREN          [ reduce using rule 112 (string_expr -> var .) ]
  ! COMMA           [ reduce using rule 112 (string_expr -> var .) ]
  ! TERNARY_C       [ reduce using rule 112 (string_expr -> var .) ]
  ! LBRACE          [ reduce using rule 112 (string_expr -> var .) ]
  ! EQ              [ reduce using rule 101 (num_factor -> var .) ]
  ! NE              [ reduce using rule 101 (num_factor -> var .) ]
  ! LT              [ reduce using rule 101 (num_factor -> var .) ]
  ! GT              [ reduce using rule 101 (num_factor -> var .) ]
  ! LE              [ reduce using rule 101 (num_factor -> var .) ]
  ! GE              [ reduce using rule 101 (num_factor -> var .) ]
  ! AND             [ reduce using rule 101 (num_factor -> var .) ]
  ! OR              [ reduce using rule 101 (num_factor -> var .) ]
  ! TERNARY_Q       [ reduce using rule 101 (num_factor -> var .) ]
  ! SEMI            [ reduce using rule 101 (num_factor -> var .) ]
  ! RPAREN          [ reduce using rule 101 (num_factor -> var .) ]
  ! COMMA           [ reduce using rule 101 (num_factor -> var .) ]
  ! TERNARY_C       [ reduce using rule 101 (num_factor -> var .) ]
  ! LBRACE          [ reduce using rule 101 (num_factor -> var .) ]
  ! EQ              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! NE              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! LT              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! GT              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! LE              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! GE              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! AND             [ reduce using rule 120 (boolean_factor -> var .) ]
  ! OR              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! TERNARY_Q       [ reduce using rule 120 (boolean_factor -> var .) ]
  ! SEMI            [ reduce using rule 120 (boolean_factor -> var .) ]
  ! RPAREN          [ reduce using rule 120 (boolean_factor -> var .) ]
  ! COMMA           [ reduce using rule 120 (boolean_factor -> var .) ]
  ! TERNARY_C       [ reduce using rule 120 (boolean_factor -> var .) ]
  ! LBRACE          [ reduce using rule 120 (boolean_factor -> var .) ]


state 110

    (122) comparison -> expr NE expr .
    (121) comparison -> expr . EQ expr
    (122) comparison -> expr . NE expr
    (123) comparison -> expr . LT expr
    (124) comparison -> expr . GT expr
    (125) comparison -> expr . LE expr
    (126) comparison -> expr . GE expr

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    AND             reduce using rule 122 (comparison -> expr NE expr .)
    OR              reduce using rule 122 (comparison -> expr NE expr .)
    TERNARY_Q       reduce using rule 122 (comparison -> expr NE expr .)
    SEMI            reduce using rule 122 (comparison -> expr NE expr .)
    RPAREN          reduce using rule 122 (comparison -> expr NE expr .)
    COMMA           reduce using rule 122 (comparison -> expr NE expr .)
    TERNARY_C       reduce using rule 122 (comparison -> expr NE expr .)
    LBRACE          reduce using rule 122 (comparison -> expr NE expr .)
    EQ              shift and go to state 55
    NE              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

  ! EQ              [ reduce using rule 122 (comparison -> expr NE expr .) ]
  ! NE              [ reduce using rule 122 (comparison -> expr NE expr .) ]
  ! LT              [ reduce using rule 122 (comparison -> expr NE expr .) ]
  ! GT              [ reduce using rule 122 (comparison -> expr NE expr .) ]
  ! LE              [ reduce using rule 122 (comparison -> expr NE expr .) ]
  ! GE              [ reduce using rule 122 (comparison -> expr NE expr .) ]


state 111

    (123) comparison -> expr LT expr .
    (121) comparison -> expr . EQ expr
    (122) comparison -> expr . NE expr
    (123) comparison -> expr . LT expr
    (124) comparison -> expr . GT expr
    (125) comparison -> expr . LE expr
    (126) comparison -> expr . GE expr

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    AND             reduce using rule 123 (comparison -> expr LT expr .)
    OR              reduce using rule 123 (comparison -> expr LT expr .)
    TERNARY_Q       reduce using rule 123 (comparison -> expr LT expr .)
    SEMI            reduce using rule 123 (comparison -> expr LT expr .)
    RPAREN          reduce using rule 123 (comparison -> expr LT expr .)
    COMMA           reduce using rule 123 (comparison -> expr LT expr .)
    TERNARY_C       reduce using rule 123 (comparison -> expr LT expr .)
    LBRACE          reduce using rule 123 (comparison -> expr LT expr .)
    EQ              shift and go to state 55
    NE              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

  ! EQ              [ reduce using rule 123 (comparison -> expr LT expr .) ]
  ! NE              [ reduce using rule 123 (comparison -> expr LT expr .) ]
  ! LT              [ reduce using rule 123 (comparison -> expr LT expr .) ]
  ! GT              [ reduce using rule 123 (comparison -> expr LT expr .) ]
  ! LE              [ reduce using rule 123 (comparison -> expr LT expr .) ]
  ! GE              [ reduce using rule 123 (comparison -> expr LT expr .) ]


state 112

    (124) comparison -> expr GT expr .
    (121) comparison -> expr . EQ expr
    (122) comparison -> expr . NE expr
    (123) comparison -> expr . LT expr
    (124) comparison -> expr . GT expr
    (125) comparison -> expr . LE expr
    (126) comparison -> expr . GE expr

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    AND             reduce using rule 124 (comparison -> expr GT expr .)
    OR              reduce using rule 124 (comparison -> expr GT expr .)
    TERNARY_Q       reduce using rule 124 (comparison -> expr GT expr .)
    SEMI            reduce using rule 124 (comparison -> expr GT expr .)
    RPAREN          reduce using rule 124 (comparison -> expr GT expr .)
    COMMA           reduce using rule 124 (comparison -> expr GT expr .)
    TERNARY_C       reduce using rule 124 (comparison -> expr GT expr .)
    LBRACE          reduce using rule 124 (comparison -> expr GT expr .)
    EQ              shift and go to state 55
    NE              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

  ! EQ              [ reduce using rule 124 (comparison -> expr GT expr .) ]
  ! NE              [ reduce using rule 124 (comparison -> expr GT expr .) ]
  ! LT              [ reduce using rule 124 (comparison -> expr GT expr .) ]
  ! GT              [ reduce using rule 124 (comparison -> expr GT expr .) ]
  ! LE              [ reduce using rule 124 (comparison -> expr GT expr .) ]
  ! GE              [ reduce using rule 124 (comparison -> expr GT expr .) ]


state 113

    (125) comparison -> expr LE expr .
    (121) comparison -> expr . EQ expr
    (122) comparison -> expr . NE expr
    (123) comparison -> expr . LT expr
    (124) comparison -> expr . GT expr
    (125) comparison -> expr . LE expr
    (126) comparison -> expr . GE expr

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    AND             reduce using rule 125 (comparison -> expr LE expr .)
    OR              reduce using rule 125 (comparison -> expr LE expr .)
    TERNARY_Q       reduce using rule 125 (comparison -> expr LE expr .)
    SEMI            reduce using rule 125 (comparison -> expr LE expr .)
    RPAREN          reduce using rule 125 (comparison -> expr LE expr .)
    COMMA           reduce using rule 125 (comparison -> expr LE expr .)
    TERNARY_C       reduce using rule 125 (comparison -> expr LE expr .)
    LBRACE          reduce using rule 125 (comparison -> expr LE expr .)
    EQ              shift and go to state 55
    NE              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

  ! EQ              [ reduce using rule 125 (comparison -> expr LE expr .) ]
  ! NE              [ reduce using rule 125 (comparison -> expr LE expr .) ]
  ! LT              [ reduce using rule 125 (comparison -> expr LE expr .) ]
  ! GT              [ reduce using rule 125 (comparison -> expr LE expr .) ]
  ! LE              [ reduce using rule 125 (comparison -> expr LE expr .) ]
  ! GE              [ reduce using rule 125 (comparison -> expr LE expr .) ]


state 114

    (126) comparison -> expr GE expr .
    (121) comparison -> expr . EQ expr
    (122) comparison -> expr . NE expr
    (123) comparison -> expr . LT expr
    (124) comparison -> expr . GT expr
    (125) comparison -> expr . LE expr
    (126) comparison -> expr . GE expr

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    AND             reduce using rule 126 (comparison -> expr GE expr .)
    OR              reduce using rule 126 (comparison -> expr GE expr .)
    TERNARY_Q       reduce using rule 126 (comparison -> expr GE expr .)
    SEMI            reduce using rule 126 (comparison -> expr GE expr .)
    RPAREN          reduce using rule 126 (comparison -> expr GE expr .)
    COMMA           reduce using rule 126 (comparison -> expr GE expr .)
    TERNARY_C       reduce using rule 126 (comparison -> expr GE expr .)
    LBRACE          reduce using rule 126 (comparison -> expr GE expr .)
    EQ              shift and go to state 55
    NE              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

  ! EQ              [ reduce using rule 126 (comparison -> expr GE expr .) ]
  ! NE              [ reduce using rule 126 (comparison -> expr GE expr .) ]
  ! LT              [ reduce using rule 126 (comparison -> expr GE expr .) ]
  ! GT              [ reduce using rule 126 (comparison -> expr GE expr .) ]
  ! LE              [ reduce using rule 126 (comparison -> expr GE expr .) ]
  ! GE              [ reduce using rule 126 (comparison -> expr GE expr .) ]


state 115

    (76) var_assign -> var ASSIGN expr .
    (121) comparison -> expr . EQ expr
    (122) comparison -> expr . NE expr
    (123) comparison -> expr . LT expr
    (124) comparison -> expr . GT expr
    (125) comparison -> expr . LE expr
    (126) comparison -> expr . GE expr

    SEMI            reduce using rule 76 (var_assign -> var ASSIGN expr .)
    EQ              shift and go to state 55
    NE              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60


state 116

    (78) var_compound_assign -> var PLUS_ASSIGN num_expr .
    (102) num_expr -> num_expr . PLUS num_expr
    (103) num_expr -> num_expr . MINUS num_expr
    (104) num_expr -> num_expr . TIMES num_expr
    (105) num_expr -> num_expr . DIVIDE num_expr
    (106) num_expr -> num_expr . INT_DIVIDE num_expr
    (107) num_expr -> num_expr . POWER num_expr
    (108) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 78 (var_compound_assign -> var PLUS_ASSIGN num_expr .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79
    INT_DIVIDE      shift and go to state 80
    POWER           shift and go to state 81
    MODULO          shift and go to state 82


state 117

    (79) var_compound_assign -> var MINUS_ASSIGN num_expr .
    (102) num_expr -> num_expr . PLUS num_expr
    (103) num_expr -> num_expr . MINUS num_expr
    (104) num_expr -> num_expr . TIMES num_expr
    (105) num_expr -> num_expr . DIVIDE num_expr
    (106) num_expr -> num_expr . INT_DIVIDE num_expr
    (107) num_expr -> num_expr . POWER num_expr
    (108) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 79 (var_compound_assign -> var MINUS_ASSIGN num_expr .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79
    INT_DIVIDE      shift and go to state 80
    POWER           shift and go to state 81
    MODULO          shift and go to state 82


state 118

    (80) var_compound_assign -> var TIMES_ASSIGN num_expr .
    (102) num_expr -> num_expr . PLUS num_expr
    (103) num_expr -> num_expr . MINUS num_expr
    (104) num_expr -> num_expr . TIMES num_expr
    (105) num_expr -> num_expr . DIVIDE num_expr
    (106) num_expr -> num_expr . INT_DIVIDE num_expr
    (107) num_expr -> num_expr . POWER num_expr
    (108) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 80 (var_compound_assign -> var TIMES_ASSIGN num_expr .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79
    INT_DIVIDE      shift and go to state 80
    POWER           shift and go to state 81
    MODULO          shift and go to state 82


state 119

    (81) var_compound_assign -> var DIVIDE_ASSIGN num_expr .
    (102) num_expr -> num_expr . PLUS num_expr
    (103) num_expr -> num_expr . MINUS num_expr
    (104) num_expr -> num_expr . TIMES num_expr
    (105) num_expr -> num_expr . DIVIDE num_expr
    (106) num_expr -> num_expr . INT_DIVIDE num_expr
    (107) num_expr -> num_expr . POWER num_expr
    (108) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 81 (var_compound_assign -> var DIVIDE_ASSIGN num_expr .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79
    INT_DIVIDE      shift and go to state 80
    POWER           shift and go to state 81
    MODULO          shift and go to state 82


state 120

    (82) var_compound_assign -> var POWER_ASSIGN num_expr .
    (102) num_expr -> num_expr . PLUS num_expr
    (103) num_expr -> num_expr . MINUS num_expr
    (104) num_expr -> num_expr . TIMES num_expr
    (105) num_expr -> num_expr . DIVIDE num_expr
    (106) num_expr -> num_expr . INT_DIVIDE num_expr
    (107) num_expr -> num_expr . POWER num_expr
    (108) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 82 (var_compound_assign -> var POWER_ASSIGN num_expr .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79
    INT_DIVIDE      shift and go to state 80
    POWER           shift and go to state 81
    MODULO          shift and go to state 82


state 121

    (83) var_compound_assign -> var MODULO_ASSIGN num_expr .
    (102) num_expr -> num_expr . PLUS num_expr
    (103) num_expr -> num_expr . MINUS num_expr
    (104) num_expr -> num_expr . TIMES num_expr
    (105) num_expr -> num_expr . DIVIDE num_expr
    (106) num_expr -> num_expr . INT_DIVIDE num_expr
    (107) num_expr -> num_expr . POWER num_expr
    (108) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 83 (var_compound_assign -> var MODULO_ASSIGN num_expr .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79
    INT_DIVIDE      shift and go to state 80
    POWER           shift and go to state 81
    MODULO          shift and go to state 82


state 122

    (84) var_compound_assign -> var INT_DIVIDE_ASSIGN num_expr .
    (102) num_expr -> num_expr . PLUS num_expr
    (103) num_expr -> num_expr . MINUS num_expr
    (104) num_expr -> num_expr . TIMES num_expr
    (105) num_expr -> num_expr . DIVIDE num_expr
    (106) num_expr -> num_expr . INT_DIVIDE num_expr
    (107) num_expr -> num_expr . POWER num_expr
    (108) num_expr -> num_expr . MODULO num_expr

    SEMI            reduce using rule 84 (var_compound_assign -> var INT_DIVIDE_ASSIGN num_expr .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79
    INT_DIVIDE      shift and go to state 80
    POWER           shift and go to state 81
    MODULO          shift and go to state 82


state 123

    (112) string_expr -> var .

    CONCAT          reduce using rule 112 (string_expr -> var .)
    SEMI            reduce using rule 112 (string_expr -> var .)
    EQ              reduce using rule 112 (string_expr -> var .)
    NE              reduce using rule 112 (string_expr -> var .)
    LT              reduce using rule 112 (string_expr -> var .)
    GT              reduce using rule 112 (string_expr -> var .)
    LE              reduce using rule 112 (string_expr -> var .)
    GE              reduce using rule 112 (string_expr -> var .)
    AND             reduce using rule 112 (string_expr -> var .)
    OR              reduce using rule 112 (string_expr -> var .)
    TERNARY_Q       reduce using rule 112 (string_expr -> var .)
    RPAREN          reduce using rule 112 (string_expr -> var .)
    COMMA           reduce using rule 112 (string_expr -> var .)
    TERNARY_C       reduce using rule 112 (string_expr -> var .)
    LBRACE          reduce using rule 112 (string_expr -> var .)


state 124

    (87) concat_assign -> var CONCAT_ASSIGN string_expr .
    (110) string_expr -> string_expr . CONCAT string_expr

    SEMI            reduce using rule 87 (concat_assign -> var CONCAT_ASSIGN string_expr .)
    CONCAT          shift and go to state 83


state 125

    (39) func_call -> var LPAREN arguments_list . RPAREN

    RPAREN          shift and go to state 154


state 126

    (40) arguments_list -> non_empty_arguments_list .

    RPAREN          reduce using rule 40 (arguments_list -> non_empty_arguments_list .)


state 127

    (41) arguments_list -> empty .

    RPAREN          reduce using rule 41 (arguments_list -> empty .)


state 128

    (42) non_empty_arguments_list -> expr . COMMA non_empty_arguments_list
    (43) non_empty_arguments_list -> expr .
    (121) comparison -> expr . EQ expr
    (122) comparison -> expr . NE expr
    (123) comparison -> expr . LT expr
    (124) comparison -> expr . GT expr
    (125) comparison -> expr . LE expr
    (126) comparison -> expr . GE expr

    COMMA           shift and go to state 155
    RPAREN          reduce using rule 43 (non_empty_arguments_list -> expr .)
    EQ              shift and go to state 55
    NE              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60


state 129

    (77) final_assign -> FINAL var ASSIGN . expr
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (75) var -> . ID
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    ID              shift and go to state 36
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

    var                            shift and go to state 109
    expr                           shift and go to state 156
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 130

    (102) num_expr -> num_expr PLUS num_expr .
    (102) num_expr -> num_expr . PLUS num_expr
    (103) num_expr -> num_expr . MINUS num_expr
    (104) num_expr -> num_expr . TIMES num_expr
    (105) num_expr -> num_expr . DIVIDE num_expr
    (106) num_expr -> num_expr . INT_DIVIDE num_expr
    (107) num_expr -> num_expr . POWER num_expr
    (108) num_expr -> num_expr . MODULO num_expr

    PLUS            reduce using rule 102 (num_expr -> num_expr PLUS num_expr .)
    MINUS           reduce using rule 102 (num_expr -> num_expr PLUS num_expr .)
    MODULO          reduce using rule 102 (num_expr -> num_expr PLUS num_expr .)
    SEMI            reduce using rule 102 (num_expr -> num_expr PLUS num_expr .)
    EQ              reduce using rule 102 (num_expr -> num_expr PLUS num_expr .)
    NE              reduce using rule 102 (num_expr -> num_expr PLUS num_expr .)
    LT              reduce using rule 102 (num_expr -> num_expr PLUS num_expr .)
    GT              reduce using rule 102 (num_expr -> num_expr PLUS num_expr .)
    LE              reduce using rule 102 (num_expr -> num_expr PLUS num_expr .)
    GE              reduce using rule 102 (num_expr -> num_expr PLUS num_expr .)
    RPAREN          reduce using rule 102 (num_expr -> num_expr PLUS num_expr .)
    AND             reduce using rule 102 (num_expr -> num_expr PLUS num_expr .)
    OR              reduce using rule 102 (num_expr -> num_expr PLUS num_expr .)
    TERNARY_Q       reduce using rule 102 (num_expr -> num_expr PLUS num_expr .)
    COMMA           reduce using rule 102 (num_expr -> num_expr PLUS num_expr .)
    TERNARY_C       reduce using rule 102 (num_expr -> num_expr PLUS num_expr .)
    LBRACE          reduce using rule 102 (num_expr -> num_expr PLUS num_expr .)
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79
    INT_DIVIDE      shift and go to state 80
    POWER           shift and go to state 81

  ! TIMES           [ reduce using rule 102 (num_expr -> num_expr PLUS num_expr .) ]
  ! DIVIDE          [ reduce using rule 102 (num_expr -> num_expr PLUS num_expr .) ]
  ! INT_DIVIDE      [ reduce using rule 102 (num_expr -> num_expr PLUS num_expr .) ]
  ! POWER           [ reduce using rule 102 (num_expr -> num_expr PLUS num_expr .) ]
  ! PLUS            [ shift and go to state 76 ]
  ! MINUS           [ shift and go to state 77 ]
  ! MODULO          [ shift and go to state 82 ]


state 131

    (103) num_expr -> num_expr MINUS num_expr .
    (102) num_expr -> num_expr . PLUS num_expr
    (103) num_expr -> num_expr . MINUS num_expr
    (104) num_expr -> num_expr . TIMES num_expr
    (105) num_expr -> num_expr . DIVIDE num_expr
    (106) num_expr -> num_expr . INT_DIVIDE num_expr
    (107) num_expr -> num_expr . POWER num_expr
    (108) num_expr -> num_expr . MODULO num_expr

    PLUS            reduce using rule 103 (num_expr -> num_expr MINUS num_expr .)
    MINUS           reduce using rule 103 (num_expr -> num_expr MINUS num_expr .)
    MODULO          reduce using rule 103 (num_expr -> num_expr MINUS num_expr .)
    SEMI            reduce using rule 103 (num_expr -> num_expr MINUS num_expr .)
    EQ              reduce using rule 103 (num_expr -> num_expr MINUS num_expr .)
    NE              reduce using rule 103 (num_expr -> num_expr MINUS num_expr .)
    LT              reduce using rule 103 (num_expr -> num_expr MINUS num_expr .)
    GT              reduce using rule 103 (num_expr -> num_expr MINUS num_expr .)
    LE              reduce using rule 103 (num_expr -> num_expr MINUS num_expr .)
    GE              reduce using rule 103 (num_expr -> num_expr MINUS num_expr .)
    RPAREN          reduce using rule 103 (num_expr -> num_expr MINUS num_expr .)
    AND             reduce using rule 103 (num_expr -> num_expr MINUS num_expr .)
    OR              reduce using rule 103 (num_expr -> num_expr MINUS num_expr .)
    TERNARY_Q       reduce using rule 103 (num_expr -> num_expr MINUS num_expr .)
    COMMA           reduce using rule 103 (num_expr -> num_expr MINUS num_expr .)
    TERNARY_C       reduce using rule 103 (num_expr -> num_expr MINUS num_expr .)
    LBRACE          reduce using rule 103 (num_expr -> num_expr MINUS num_expr .)
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79
    INT_DIVIDE      shift and go to state 80
    POWER           shift and go to state 81

  ! TIMES           [ reduce using rule 103 (num_expr -> num_expr MINUS num_expr .) ]
  ! DIVIDE          [ reduce using rule 103 (num_expr -> num_expr MINUS num_expr .) ]
  ! INT_DIVIDE      [ reduce using rule 103 (num_expr -> num_expr MINUS num_expr .) ]
  ! POWER           [ reduce using rule 103 (num_expr -> num_expr MINUS num_expr .) ]
  ! PLUS            [ shift and go to state 76 ]
  ! MINUS           [ shift and go to state 77 ]
  ! MODULO          [ shift and go to state 82 ]


state 132

    (104) num_expr -> num_expr TIMES num_expr .
    (102) num_expr -> num_expr . PLUS num_expr
    (103) num_expr -> num_expr . MINUS num_expr
    (104) num_expr -> num_expr . TIMES num_expr
    (105) num_expr -> num_expr . DIVIDE num_expr
    (106) num_expr -> num_expr . INT_DIVIDE num_expr
    (107) num_expr -> num_expr . POWER num_expr
    (108) num_expr -> num_expr . MODULO num_expr

    PLUS            reduce using rule 104 (num_expr -> num_expr TIMES num_expr .)
    MINUS           reduce using rule 104 (num_expr -> num_expr TIMES num_expr .)
    TIMES           reduce using rule 104 (num_expr -> num_expr TIMES num_expr .)
    DIVIDE          reduce using rule 104 (num_expr -> num_expr TIMES num_expr .)
    INT_DIVIDE      reduce using rule 104 (num_expr -> num_expr TIMES num_expr .)
    MODULO          reduce using rule 104 (num_expr -> num_expr TIMES num_expr .)
    SEMI            reduce using rule 104 (num_expr -> num_expr TIMES num_expr .)
    EQ              reduce using rule 104 (num_expr -> num_expr TIMES num_expr .)
    NE              reduce using rule 104 (num_expr -> num_expr TIMES num_expr .)
    LT              reduce using rule 104 (num_expr -> num_expr TIMES num_expr .)
    GT              reduce using rule 104 (num_expr -> num_expr TIMES num_expr .)
    LE              reduce using rule 104 (num_expr -> num_expr TIMES num_expr .)
    GE              reduce using rule 104 (num_expr -> num_expr TIMES num_expr .)
    RPAREN          reduce using rule 104 (num_expr -> num_expr TIMES num_expr .)
    AND             reduce using rule 104 (num_expr -> num_expr TIMES num_expr .)
    OR              reduce using rule 104 (num_expr -> num_expr TIMES num_expr .)
    TERNARY_Q       reduce using rule 104 (num_expr -> num_expr TIMES num_expr .)
    COMMA           reduce using rule 104 (num_expr -> num_expr TIMES num_expr .)
    TERNARY_C       reduce using rule 104 (num_expr -> num_expr TIMES num_expr .)
    LBRACE          reduce using rule 104 (num_expr -> num_expr TIMES num_expr .)
    POWER           shift and go to state 81

  ! POWER           [ reduce using rule 104 (num_expr -> num_expr TIMES num_expr .) ]
  ! PLUS            [ shift and go to state 76 ]
  ! MINUS           [ shift and go to state 77 ]
  ! TIMES           [ shift and go to state 78 ]
  ! DIVIDE          [ shift and go to state 79 ]
  ! INT_DIVIDE      [ shift and go to state 80 ]
  ! MODULO          [ shift and go to state 82 ]


state 133

    (105) num_expr -> num_expr DIVIDE num_expr .
    (102) num_expr -> num_expr . PLUS num_expr
    (103) num_expr -> num_expr . MINUS num_expr
    (104) num_expr -> num_expr . TIMES num_expr
    (105) num_expr -> num_expr . DIVIDE num_expr
    (106) num_expr -> num_expr . INT_DIVIDE num_expr
    (107) num_expr -> num_expr . POWER num_expr
    (108) num_expr -> num_expr . MODULO num_expr

    PLUS            reduce using rule 105 (num_expr -> num_expr DIVIDE num_expr .)
    MINUS           reduce using rule 105 (num_expr -> num_expr DIVIDE num_expr .)
    TIMES           reduce using rule 105 (num_expr -> num_expr DIVIDE num_expr .)
    DIVIDE          reduce using rule 105 (num_expr -> num_expr DIVIDE num_expr .)
    INT_DIVIDE      reduce using rule 105 (num_expr -> num_expr DIVIDE num_expr .)
    MODULO          reduce using rule 105 (num_expr -> num_expr DIVIDE num_expr .)
    SEMI            reduce using rule 105 (num_expr -> num_expr DIVIDE num_expr .)
    EQ              reduce using rule 105 (num_expr -> num_expr DIVIDE num_expr .)
    NE              reduce using rule 105 (num_expr -> num_expr DIVIDE num_expr .)
    LT              reduce using rule 105 (num_expr -> num_expr DIVIDE num_expr .)
    GT              reduce using rule 105 (num_expr -> num_expr DIVIDE num_expr .)
    LE              reduce using rule 105 (num_expr -> num_expr DIVIDE num_expr .)
    GE              reduce using rule 105 (num_expr -> num_expr DIVIDE num_expr .)
    RPAREN          reduce using rule 105 (num_expr -> num_expr DIVIDE num_expr .)
    AND             reduce using rule 105 (num_expr -> num_expr DIVIDE num_expr .)
    OR              reduce using rule 105 (num_expr -> num_expr DIVIDE num_expr .)
    TERNARY_Q       reduce using rule 105 (num_expr -> num_expr DIVIDE num_expr .)
    COMMA           reduce using rule 105 (num_expr -> num_expr DIVIDE num_expr .)
    TERNARY_C       reduce using rule 105 (num_expr -> num_expr DIVIDE num_expr .)
    LBRACE          reduce using rule 105 (num_expr -> num_expr DIVIDE num_expr .)
    POWER           shift and go to state 81

  ! POWER           [ reduce using rule 105 (num_expr -> num_expr DIVIDE num_expr .) ]
  ! PLUS            [ shift and go to state 76 ]
  ! MINUS           [ shift and go to state 77 ]
  ! TIMES           [ shift and go to state 78 ]
  ! DIVIDE          [ shift and go to state 79 ]
  ! INT_DIVIDE      [ shift and go to state 80 ]
  ! MODULO          [ shift and go to state 82 ]


state 134

    (106) num_expr -> num_expr INT_DIVIDE num_expr .
    (102) num_expr -> num_expr . PLUS num_expr
    (103) num_expr -> num_expr . MINUS num_expr
    (104) num_expr -> num_expr . TIMES num_expr
    (105) num_expr -> num_expr . DIVIDE num_expr
    (106) num_expr -> num_expr . INT_DIVIDE num_expr
    (107) num_expr -> num_expr . POWER num_expr
    (108) num_expr -> num_expr . MODULO num_expr

    PLUS            reduce using rule 106 (num_expr -> num_expr INT_DIVIDE num_expr .)
    MINUS           reduce using rule 106 (num_expr -> num_expr INT_DIVIDE num_expr .)
    TIMES           reduce using rule 106 (num_expr -> num_expr INT_DIVIDE num_expr .)
    DIVIDE          reduce using rule 106 (num_expr -> num_expr INT_DIVIDE num_expr .)
    INT_DIVIDE      reduce using rule 106 (num_expr -> num_expr INT_DIVIDE num_expr .)
    MODULO          reduce using rule 106 (num_expr -> num_expr INT_DIVIDE num_expr .)
    SEMI            reduce using rule 106 (num_expr -> num_expr INT_DIVIDE num_expr .)
    EQ              reduce using rule 106 (num_expr -> num_expr INT_DIVIDE num_expr .)
    NE              reduce using rule 106 (num_expr -> num_expr INT_DIVIDE num_expr .)
    LT              reduce using rule 106 (num_expr -> num_expr INT_DIVIDE num_expr .)
    GT              reduce using rule 106 (num_expr -> num_expr INT_DIVIDE num_expr .)
    LE              reduce using rule 106 (num_expr -> num_expr INT_DIVIDE num_expr .)
    GE              reduce using rule 106 (num_expr -> num_expr INT_DIVIDE num_expr .)
    RPAREN          reduce using rule 106 (num_expr -> num_expr INT_DIVIDE num_expr .)
    AND             reduce using rule 106 (num_expr -> num_expr INT_DIVIDE num_expr .)
    OR              reduce using rule 106 (num_expr -> num_expr INT_DIVIDE num_expr .)
    TERNARY_Q       reduce using rule 106 (num_expr -> num_expr INT_DIVIDE num_expr .)
    COMMA           reduce using rule 106 (num_expr -> num_expr INT_DIVIDE num_expr .)
    TERNARY_C       reduce using rule 106 (num_expr -> num_expr INT_DIVIDE num_expr .)
    LBRACE          reduce using rule 106 (num_expr -> num_expr INT_DIVIDE num_expr .)
    POWER           shift and go to state 81

  ! POWER           [ reduce using rule 106 (num_expr -> num_expr INT_DIVIDE num_expr .) ]
  ! PLUS            [ shift and go to state 76 ]
  ! MINUS           [ shift and go to state 77 ]
  ! TIMES           [ shift and go to state 78 ]
  ! DIVIDE          [ shift and go to state 79 ]
  ! INT_DIVIDE      [ shift and go to state 80 ]
  ! MODULO          [ shift and go to state 82 ]


state 135

    (107) num_expr -> num_expr POWER num_expr .
    (102) num_expr -> num_expr . PLUS num_expr
    (103) num_expr -> num_expr . MINUS num_expr
    (104) num_expr -> num_expr . TIMES num_expr
    (105) num_expr -> num_expr . DIVIDE num_expr
    (106) num_expr -> num_expr . INT_DIVIDE num_expr
    (107) num_expr -> num_expr . POWER num_expr
    (108) num_expr -> num_expr . MODULO num_expr

    PLUS            reduce using rule 107 (num_expr -> num_expr POWER num_expr .)
    MINUS           reduce using rule 107 (num_expr -> num_expr POWER num_expr .)
    TIMES           reduce using rule 107 (num_expr -> num_expr POWER num_expr .)
    DIVIDE          reduce using rule 107 (num_expr -> num_expr POWER num_expr .)
    INT_DIVIDE      reduce using rule 107 (num_expr -> num_expr POWER num_expr .)
    MODULO          reduce using rule 107 (num_expr -> num_expr POWER num_expr .)
    SEMI            reduce using rule 107 (num_expr -> num_expr POWER num_expr .)
    EQ              reduce using rule 107 (num_expr -> num_expr POWER num_expr .)
    NE              reduce using rule 107 (num_expr -> num_expr POWER num_expr .)
    LT              reduce using rule 107 (num_expr -> num_expr POWER num_expr .)
    GT              reduce using rule 107 (num_expr -> num_expr POWER num_expr .)
    LE              reduce using rule 107 (num_expr -> num_expr POWER num_expr .)
    GE              reduce using rule 107 (num_expr -> num_expr POWER num_expr .)
    RPAREN          reduce using rule 107 (num_expr -> num_expr POWER num_expr .)
    AND             reduce using rule 107 (num_expr -> num_expr POWER num_expr .)
    OR              reduce using rule 107 (num_expr -> num_expr POWER num_expr .)
    TERNARY_Q       reduce using rule 107 (num_expr -> num_expr POWER num_expr .)
    COMMA           reduce using rule 107 (num_expr -> num_expr POWER num_expr .)
    TERNARY_C       reduce using rule 107 (num_expr -> num_expr POWER num_expr .)
    LBRACE          reduce using rule 107 (num_expr -> num_expr POWER num_expr .)
    POWER           shift and go to state 81

  ! POWER           [ reduce using rule 107 (num_expr -> num_expr POWER num_expr .) ]
  ! PLUS            [ shift and go to state 76 ]
  ! MINUS           [ shift and go to state 77 ]
  ! TIMES           [ shift and go to state 78 ]
  ! DIVIDE          [ shift and go to state 79 ]
  ! INT_DIVIDE      [ shift and go to state 80 ]
  ! MODULO          [ shift and go to state 82 ]


state 136

    (108) num_expr -> num_expr MODULO num_expr .
    (102) num_expr -> num_expr . PLUS num_expr
    (103) num_expr -> num_expr . MINUS num_expr
    (104) num_expr -> num_expr . TIMES num_expr
    (105) num_expr -> num_expr . DIVIDE num_expr
    (106) num_expr -> num_expr . INT_DIVIDE num_expr
    (107) num_expr -> num_expr . POWER num_expr
    (108) num_expr -> num_expr . MODULO num_expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for INT_DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    SEMI            reduce using rule 108 (num_expr -> num_expr MODULO num_expr .)
    EQ              reduce using rule 108 (num_expr -> num_expr MODULO num_expr .)
    NE              reduce using rule 108 (num_expr -> num_expr MODULO num_expr .)
    LT              reduce using rule 108 (num_expr -> num_expr MODULO num_expr .)
    GT              reduce using rule 108 (num_expr -> num_expr MODULO num_expr .)
    LE              reduce using rule 108 (num_expr -> num_expr MODULO num_expr .)
    GE              reduce using rule 108 (num_expr -> num_expr MODULO num_expr .)
    RPAREN          reduce using rule 108 (num_expr -> num_expr MODULO num_expr .)
    AND             reduce using rule 108 (num_expr -> num_expr MODULO num_expr .)
    OR              reduce using rule 108 (num_expr -> num_expr MODULO num_expr .)
    TERNARY_Q       reduce using rule 108 (num_expr -> num_expr MODULO num_expr .)
    COMMA           reduce using rule 108 (num_expr -> num_expr MODULO num_expr .)
    TERNARY_C       reduce using rule 108 (num_expr -> num_expr MODULO num_expr .)
    LBRACE          reduce using rule 108 (num_expr -> num_expr MODULO num_expr .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79
    INT_DIVIDE      shift and go to state 80
    POWER           shift and go to state 81
    MODULO          shift and go to state 82

  ! PLUS            [ reduce using rule 108 (num_expr -> num_expr MODULO num_expr .) ]
  ! MINUS           [ reduce using rule 108 (num_expr -> num_expr MODULO num_expr .) ]
  ! TIMES           [ reduce using rule 108 (num_expr -> num_expr MODULO num_expr .) ]
  ! DIVIDE          [ reduce using rule 108 (num_expr -> num_expr MODULO num_expr .) ]
  ! INT_DIVIDE      [ reduce using rule 108 (num_expr -> num_expr MODULO num_expr .) ]
  ! POWER           [ reduce using rule 108 (num_expr -> num_expr MODULO num_expr .) ]
  ! MODULO          [ reduce using rule 108 (num_expr -> num_expr MODULO num_expr .) ]


state 137

    (110) string_expr -> string_expr CONCAT string_expr .
    (110) string_expr -> string_expr . CONCAT string_expr

  ! shift/reduce conflict for CONCAT resolved as shift
    SEMI            reduce using rule 110 (string_expr -> string_expr CONCAT string_expr .)
    EQ              reduce using rule 110 (string_expr -> string_expr CONCAT string_expr .)
    NE              reduce using rule 110 (string_expr -> string_expr CONCAT string_expr .)
    LT              reduce using rule 110 (string_expr -> string_expr CONCAT string_expr .)
    GT              reduce using rule 110 (string_expr -> string_expr CONCAT string_expr .)
    LE              reduce using rule 110 (string_expr -> string_expr CONCAT string_expr .)
    GE              reduce using rule 110 (string_expr -> string_expr CONCAT string_expr .)
    AND             reduce using rule 110 (string_expr -> string_expr CONCAT string_expr .)
    OR              reduce using rule 110 (string_expr -> string_expr CONCAT string_expr .)
    TERNARY_Q       reduce using rule 110 (string_expr -> string_expr CONCAT string_expr .)
    RPAREN          reduce using rule 110 (string_expr -> string_expr CONCAT string_expr .)
    COMMA           reduce using rule 110 (string_expr -> string_expr CONCAT string_expr .)
    TERNARY_C       reduce using rule 110 (string_expr -> string_expr CONCAT string_expr .)
    LBRACE          reduce using rule 110 (string_expr -> string_expr CONCAT string_expr .)
    CONCAT          shift and go to state 83

  ! CONCAT          [ reduce using rule 110 (string_expr -> string_expr CONCAT string_expr .) ]


state 138

    (113) boolean_expr -> boolean_expr AND boolean_expr .
    (113) boolean_expr -> boolean_expr . AND boolean_expr
    (114) boolean_expr -> boolean_expr . OR boolean_expr
    (90) expr -> boolean_expr .
    (128) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for EQ resolved using rule 90 (expr -> boolean_expr .)
  ! reduce/reduce conflict for NE resolved using rule 90 (expr -> boolean_expr .)
  ! reduce/reduce conflict for LT resolved using rule 90 (expr -> boolean_expr .)
  ! reduce/reduce conflict for GT resolved using rule 90 (expr -> boolean_expr .)
  ! reduce/reduce conflict for LE resolved using rule 90 (expr -> boolean_expr .)
  ! reduce/reduce conflict for GE resolved using rule 90 (expr -> boolean_expr .)
  ! shift/reduce conflict for TERNARY_Q resolved as shift
    SEMI            reduce using rule 113 (boolean_expr -> boolean_expr AND boolean_expr .)
    RPAREN          reduce using rule 113 (boolean_expr -> boolean_expr AND boolean_expr .)
    COMMA           reduce using rule 113 (boolean_expr -> boolean_expr AND boolean_expr .)
    TERNARY_C       reduce using rule 113 (boolean_expr -> boolean_expr AND boolean_expr .)
    LBRACE          reduce using rule 113 (boolean_expr -> boolean_expr AND boolean_expr .)
    AND             shift and go to state 84
    OR              shift and go to state 85
    EQ              reduce using rule 90 (expr -> boolean_expr .)
    NE              reduce using rule 90 (expr -> boolean_expr .)
    LT              reduce using rule 90 (expr -> boolean_expr .)
    GT              reduce using rule 90 (expr -> boolean_expr .)
    LE              reduce using rule 90 (expr -> boolean_expr .)
    GE              reduce using rule 90 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 86

  ! AND             [ reduce using rule 113 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! OR              [ reduce using rule 113 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! TERNARY_Q       [ reduce using rule 113 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! EQ              [ reduce using rule 113 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! NE              [ reduce using rule 113 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! LT              [ reduce using rule 113 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! GT              [ reduce using rule 113 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! LE              [ reduce using rule 113 (boolean_expr -> boolean_expr AND boolean_expr .) ]
  ! GE              [ reduce using rule 113 (boolean_expr -> boolean_expr AND boolean_expr .) ]


state 139

    (114) boolean_expr -> boolean_expr OR boolean_expr .
    (113) boolean_expr -> boolean_expr . AND boolean_expr
    (114) boolean_expr -> boolean_expr . OR boolean_expr
    (90) expr -> boolean_expr .
    (128) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for EQ resolved using rule 90 (expr -> boolean_expr .)
  ! reduce/reduce conflict for NE resolved using rule 90 (expr -> boolean_expr .)
  ! reduce/reduce conflict for LT resolved using rule 90 (expr -> boolean_expr .)
  ! reduce/reduce conflict for GT resolved using rule 90 (expr -> boolean_expr .)
  ! reduce/reduce conflict for LE resolved using rule 90 (expr -> boolean_expr .)
  ! reduce/reduce conflict for GE resolved using rule 90 (expr -> boolean_expr .)
  ! shift/reduce conflict for TERNARY_Q resolved as shift
    SEMI            reduce using rule 114 (boolean_expr -> boolean_expr OR boolean_expr .)
    RPAREN          reduce using rule 114 (boolean_expr -> boolean_expr OR boolean_expr .)
    COMMA           reduce using rule 114 (boolean_expr -> boolean_expr OR boolean_expr .)
    TERNARY_C       reduce using rule 114 (boolean_expr -> boolean_expr OR boolean_expr .)
    LBRACE          reduce using rule 114 (boolean_expr -> boolean_expr OR boolean_expr .)
    AND             shift and go to state 84
    OR              shift and go to state 85
    EQ              reduce using rule 90 (expr -> boolean_expr .)
    NE              reduce using rule 90 (expr -> boolean_expr .)
    LT              reduce using rule 90 (expr -> boolean_expr .)
    GT              reduce using rule 90 (expr -> boolean_expr .)
    LE              reduce using rule 90 (expr -> boolean_expr .)
    GE              reduce using rule 90 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 86

  ! AND             [ reduce using rule 114 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! OR              [ reduce using rule 114 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! TERNARY_Q       [ reduce using rule 114 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! EQ              [ reduce using rule 114 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! NE              [ reduce using rule 114 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! LT              [ reduce using rule 114 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! GT              [ reduce using rule 114 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! LE              [ reduce using rule 114 (boolean_expr -> boolean_expr OR boolean_expr .) ]
  ! GE              [ reduce using rule 114 (boolean_expr -> boolean_expr OR boolean_expr .) ]


state 140

    (128) ternary_expr -> boolean_expr TERNARY_Q expr . TERNARY_C expr
    (121) comparison -> expr . EQ expr
    (122) comparison -> expr . NE expr
    (123) comparison -> expr . LT expr
    (124) comparison -> expr . GT expr
    (125) comparison -> expr . LE expr
    (126) comparison -> expr . GE expr

    TERNARY_C       shift and go to state 157
    EQ              shift and go to state 55
    NE              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60


state 141

    (38) func_stmt -> FN var LPAREN . parameters_list RPAREN LBRACE scoped_block RBRACE
    (44) parameters_list -> . non_empty_parameters_list
    (45) parameters_list -> . empty
    (46) non_empty_parameters_list -> . var COMMA non_empty_parameters_list
    (47) non_empty_parameters_list -> . var
    (129) empty -> .
    (75) var -> . ID

    RPAREN          reduce using rule 129 (empty -> .)
    ID              shift and go to state 36

    var                            shift and go to state 158
    parameters_list                shift and go to state 159
    non_empty_parameters_list      shift and go to state 160
    empty                          shift and go to state 161

state 142

    (99) num_factor -> LPAREN num_expr RPAREN .

    PLUS            reduce using rule 99 (num_factor -> LPAREN num_expr RPAREN .)
    MINUS           reduce using rule 99 (num_factor -> LPAREN num_expr RPAREN .)
    TIMES           reduce using rule 99 (num_factor -> LPAREN num_expr RPAREN .)
    DIVIDE          reduce using rule 99 (num_factor -> LPAREN num_expr RPAREN .)
    INT_DIVIDE      reduce using rule 99 (num_factor -> LPAREN num_expr RPAREN .)
    POWER           reduce using rule 99 (num_factor -> LPAREN num_expr RPAREN .)
    MODULO          reduce using rule 99 (num_factor -> LPAREN num_expr RPAREN .)
    SEMI            reduce using rule 99 (num_factor -> LPAREN num_expr RPAREN .)
    EQ              reduce using rule 99 (num_factor -> LPAREN num_expr RPAREN .)
    NE              reduce using rule 99 (num_factor -> LPAREN num_expr RPAREN .)
    LT              reduce using rule 99 (num_factor -> LPAREN num_expr RPAREN .)
    GT              reduce using rule 99 (num_factor -> LPAREN num_expr RPAREN .)
    LE              reduce using rule 99 (num_factor -> LPAREN num_expr RPAREN .)
    GE              reduce using rule 99 (num_factor -> LPAREN num_expr RPAREN .)
    RPAREN          reduce using rule 99 (num_factor -> LPAREN num_expr RPAREN .)
    AND             reduce using rule 99 (num_factor -> LPAREN num_expr RPAREN .)
    OR              reduce using rule 99 (num_factor -> LPAREN num_expr RPAREN .)
    TERNARY_Q       reduce using rule 99 (num_factor -> LPAREN num_expr RPAREN .)
    COMMA           reduce using rule 99 (num_factor -> LPAREN num_expr RPAREN .)
    TERNARY_C       reduce using rule 99 (num_factor -> LPAREN num_expr RPAREN .)
    LBRACE          reduce using rule 99 (num_factor -> LPAREN num_expr RPAREN .)


state 143

    (117) boolean_factor -> LPAREN boolean_expr RPAREN .

    AND             reduce using rule 117 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    OR              reduce using rule 117 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    TERNARY_Q       reduce using rule 117 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    SEMI            reduce using rule 117 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    EQ              reduce using rule 117 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    NE              reduce using rule 117 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    LT              reduce using rule 117 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    GT              reduce using rule 117 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    LE              reduce using rule 117 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    GE              reduce using rule 117 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    RPAREN          reduce using rule 117 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    COMMA           reduce using rule 117 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    TERNARY_C       reduce using rule 117 (boolean_factor -> LPAREN boolean_expr RPAREN .)
    LBRACE          reduce using rule 117 (boolean_factor -> LPAREN boolean_expr RPAREN .)


state 144

    (48) switch_stmt -> SWITCH LPAREN var . RPAREN LBRACE case RBRACE

    RPAREN          shift and go to state 162


state 145

    (53) if_stmt -> IF LPAREN boolean_expr . RPAREN LBRACE block RBRACE elif_stmt
    (113) boolean_expr -> boolean_expr . AND boolean_expr
    (114) boolean_expr -> boolean_expr . OR boolean_expr
    (90) expr -> boolean_expr .
    (128) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    RPAREN          shift and go to state 163
    AND             shift and go to state 84
    OR              shift and go to state 85
    EQ              reduce using rule 90 (expr -> boolean_expr .)
    NE              reduce using rule 90 (expr -> boolean_expr .)
    LT              reduce using rule 90 (expr -> boolean_expr .)
    GT              reduce using rule 90 (expr -> boolean_expr .)
    LE              reduce using rule 90 (expr -> boolean_expr .)
    GE              reduce using rule 90 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 86


state 146

    (73) while_stmt -> WHILE LPAREN boolean_expr . RPAREN LBRACE block RBRACE
    (113) boolean_expr -> boolean_expr . AND boolean_expr
    (114) boolean_expr -> boolean_expr . OR boolean_expr
    (90) expr -> boolean_expr .
    (128) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    RPAREN          shift and go to state 164
    AND             shift and go to state 84
    OR              shift and go to state 85
    EQ              reduce using rule 90 (expr -> boolean_expr .)
    NE              reduce using rule 90 (expr -> boolean_expr .)
    LT              reduce using rule 90 (expr -> boolean_expr .)
    GT              reduce using rule 90 (expr -> boolean_expr .)
    LE              reduce using rule 90 (expr -> boolean_expr .)
    GE              reduce using rule 90 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 86


state 147

    (74) for_stmt -> FOR LPAREN var_assign . SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE

    SEMI            shift and go to state 165


state 148

    (76) var_assign -> var . ASSIGN expr

    ASSIGN          shift and go to state 63


state 149

    (70) print_stmt -> PRINT LPAREN expr . RPAREN
    (121) comparison -> expr . EQ expr
    (122) comparison -> expr . NE expr
    (123) comparison -> expr . LT expr
    (124) comparison -> expr . GT expr
    (125) comparison -> expr . LE expr
    (126) comparison -> expr . GE expr

    RPAREN          shift and go to state 166
    EQ              shift and go to state 55
    NE              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60


state 150

    (71) scan_stmt -> SCANSTR LPAREN var . RPAREN

    RPAREN          shift and go to state 167


state 151

    (72) scan_stmt -> SCANNUM LPAREN var . RPAREN

    RPAREN          shift and go to state 168


state 152

    (99) num_factor -> LPAREN num_expr . RPAREN
    (102) num_expr -> num_expr . PLUS num_expr
    (103) num_expr -> num_expr . MINUS num_expr
    (104) num_expr -> num_expr . TIMES num_expr
    (105) num_expr -> num_expr . DIVIDE num_expr
    (106) num_expr -> num_expr . INT_DIVIDE num_expr
    (107) num_expr -> num_expr . POWER num_expr
    (108) num_expr -> num_expr . MODULO num_expr

    RPAREN          shift and go to state 142
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79
    INT_DIVIDE      shift and go to state 80
    POWER           shift and go to state 81
    MODULO          shift and go to state 82


state 153

    (120) boolean_factor -> var .
    (101) num_factor -> var .
    (39) func_call -> var . LPAREN arguments_list RPAREN
    (93) expr -> var .
    (112) string_expr -> var .

  ! reduce/reduce conflict for RPAREN resolved using rule 101 (num_factor -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 101 (num_factor -> var .)
  ! reduce/reduce conflict for NE resolved using rule 101 (num_factor -> var .)
  ! reduce/reduce conflict for LT resolved using rule 101 (num_factor -> var .)
  ! reduce/reduce conflict for GT resolved using rule 101 (num_factor -> var .)
  ! reduce/reduce conflict for LE resolved using rule 101 (num_factor -> var .)
  ! reduce/reduce conflict for GE resolved using rule 101 (num_factor -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for EQ resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for NE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GT resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for LE resolved using rule 93 (expr -> var .)
  ! reduce/reduce conflict for GE resolved using rule 93 (expr -> var .)
    AND             reduce using rule 120 (boolean_factor -> var .)
    OR              reduce using rule 120 (boolean_factor -> var .)
    TERNARY_Q       reduce using rule 120 (boolean_factor -> var .)
    RPAREN          reduce using rule 101 (num_factor -> var .)
    PLUS            reduce using rule 101 (num_factor -> var .)
    MINUS           reduce using rule 101 (num_factor -> var .)
    TIMES           reduce using rule 101 (num_factor -> var .)
    DIVIDE          reduce using rule 101 (num_factor -> var .)
    INT_DIVIDE      reduce using rule 101 (num_factor -> var .)
    POWER           reduce using rule 101 (num_factor -> var .)
    MODULO          reduce using rule 101 (num_factor -> var .)
    LPAREN          shift and go to state 74
    EQ              reduce using rule 93 (expr -> var .)
    NE              reduce using rule 93 (expr -> var .)
    LT              reduce using rule 93 (expr -> var .)
    GT              reduce using rule 93 (expr -> var .)
    LE              reduce using rule 93 (expr -> var .)
    GE              reduce using rule 93 (expr -> var .)
    CONCAT          reduce using rule 112 (string_expr -> var .)

  ! RPAREN          [ reduce using rule 120 (boolean_factor -> var .) ]
  ! EQ              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! NE              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! LT              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! GT              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! LE              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! GE              [ reduce using rule 120 (boolean_factor -> var .) ]
  ! EQ              [ reduce using rule 101 (num_factor -> var .) ]
  ! NE              [ reduce using rule 101 (num_factor -> var .) ]
  ! LT              [ reduce using rule 101 (num_factor -> var .) ]
  ! GT              [ reduce using rule 101 (num_factor -> var .) ]
  ! LE              [ reduce using rule 101 (num_factor -> var .) ]
  ! GE              [ reduce using rule 101 (num_factor -> var .) ]
  ! EQ              [ reduce using rule 112 (string_expr -> var .) ]
  ! NE              [ reduce using rule 112 (string_expr -> var .) ]
  ! LT              [ reduce using rule 112 (string_expr -> var .) ]
  ! GT              [ reduce using rule 112 (string_expr -> var .) ]
  ! LE              [ reduce using rule 112 (string_expr -> var .) ]
  ! GE              [ reduce using rule 112 (string_expr -> var .) ]


state 154

    (39) func_call -> var LPAREN arguments_list RPAREN .

    SEMI            reduce using rule 39 (func_call -> var LPAREN arguments_list RPAREN .)
    EQ              reduce using rule 39 (func_call -> var LPAREN arguments_list RPAREN .)
    NE              reduce using rule 39 (func_call -> var LPAREN arguments_list RPAREN .)
    LT              reduce using rule 39 (func_call -> var LPAREN arguments_list RPAREN .)
    GT              reduce using rule 39 (func_call -> var LPAREN arguments_list RPAREN .)
    LE              reduce using rule 39 (func_call -> var LPAREN arguments_list RPAREN .)
    GE              reduce using rule 39 (func_call -> var LPAREN arguments_list RPAREN .)
    PLUS            reduce using rule 39 (func_call -> var LPAREN arguments_list RPAREN .)
    MINUS           reduce using rule 39 (func_call -> var LPAREN arguments_list RPAREN .)
    TIMES           reduce using rule 39 (func_call -> var LPAREN arguments_list RPAREN .)
    DIVIDE          reduce using rule 39 (func_call -> var LPAREN arguments_list RPAREN .)
    INT_DIVIDE      reduce using rule 39 (func_call -> var LPAREN arguments_list RPAREN .)
    POWER           reduce using rule 39 (func_call -> var LPAREN arguments_list RPAREN .)
    MODULO          reduce using rule 39 (func_call -> var LPAREN arguments_list RPAREN .)
    RPAREN          reduce using rule 39 (func_call -> var LPAREN arguments_list RPAREN .)
    AND             reduce using rule 39 (func_call -> var LPAREN arguments_list RPAREN .)
    OR              reduce using rule 39 (func_call -> var LPAREN arguments_list RPAREN .)
    TERNARY_Q       reduce using rule 39 (func_call -> var LPAREN arguments_list RPAREN .)
    COMMA           reduce using rule 39 (func_call -> var LPAREN arguments_list RPAREN .)
    TERNARY_C       reduce using rule 39 (func_call -> var LPAREN arguments_list RPAREN .)
    LBRACE          reduce using rule 39 (func_call -> var LPAREN arguments_list RPAREN .)


state 155

    (42) non_empty_arguments_list -> expr COMMA . non_empty_arguments_list
    (42) non_empty_arguments_list -> . expr COMMA non_empty_arguments_list
    (43) non_empty_arguments_list -> . expr
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (75) var -> . ID
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    ID              shift and go to state 36
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

    expr                           shift and go to state 128
    non_empty_arguments_list       shift and go to state 169
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    var                            shift and go to state 109
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 156

    (77) final_assign -> FINAL var ASSIGN expr .
    (121) comparison -> expr . EQ expr
    (122) comparison -> expr . NE expr
    (123) comparison -> expr . LT expr
    (124) comparison -> expr . GT expr
    (125) comparison -> expr . LE expr
    (126) comparison -> expr . GE expr

    SEMI            reduce using rule 77 (final_assign -> FINAL var ASSIGN expr .)
    EQ              shift and go to state 55
    NE              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60


state 157

    (128) ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C . expr
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (75) var -> . ID
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    ID              shift and go to state 36
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

    boolean_expr                   shift and go to state 23
    expr                           shift and go to state 170
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    var                            shift and go to state 109
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 158

    (46) non_empty_parameters_list -> var . COMMA non_empty_parameters_list
    (47) non_empty_parameters_list -> var .

    COMMA           shift and go to state 171
    RPAREN          reduce using rule 47 (non_empty_parameters_list -> var .)


state 159

    (38) func_stmt -> FN var LPAREN parameters_list . RPAREN LBRACE scoped_block RBRACE

    RPAREN          shift and go to state 172


state 160

    (44) parameters_list -> non_empty_parameters_list .

    RPAREN          reduce using rule 44 (parameters_list -> non_empty_parameters_list .)


state 161

    (45) parameters_list -> empty .

    RPAREN          reduce using rule 45 (parameters_list -> empty .)


state 162

    (48) switch_stmt -> SWITCH LPAREN var RPAREN . LBRACE case RBRACE

    LBRACE          shift and go to state 173


state 163

    (53) if_stmt -> IF LPAREN boolean_expr RPAREN . LBRACE block RBRACE elif_stmt

    LBRACE          shift and go to state 174


state 164

    (73) while_stmt -> WHILE LPAREN boolean_expr RPAREN . LBRACE block RBRACE

    LBRACE          shift and go to state 175


state 165

    (74) for_stmt -> FOR LPAREN var_assign SEMI . boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr
    (75) var -> . ID
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var

    NOT             shift and go to state 41
    LPAREN          shift and go to state 106
    BOOLEAN         shift and go to state 46
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45

    boolean_expr                   shift and go to state 176
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47
    var                            shift and go to state 107
    expr                           shift and go to state 92
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40

state 166

    (70) print_stmt -> PRINT LPAREN expr RPAREN .

    SEMI            reduce using rule 70 (print_stmt -> PRINT LPAREN expr RPAREN .)


state 167

    (71) scan_stmt -> SCANSTR LPAREN var RPAREN .

    SEMI            reduce using rule 71 (scan_stmt -> SCANSTR LPAREN var RPAREN .)


state 168

    (72) scan_stmt -> SCANNUM LPAREN var RPAREN .

    SEMI            reduce using rule 72 (scan_stmt -> SCANNUM LPAREN var RPAREN .)


state 169

    (42) non_empty_arguments_list -> expr COMMA non_empty_arguments_list .

    RPAREN          reduce using rule 42 (non_empty_arguments_list -> expr COMMA non_empty_arguments_list .)


state 170

    (128) ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .
    (121) comparison -> expr . EQ expr
    (122) comparison -> expr . NE expr
    (123) comparison -> expr . LT expr
    (124) comparison -> expr . GT expr
    (125) comparison -> expr . LE expr
    (126) comparison -> expr . GE expr

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    SEMI            reduce using rule 128 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .)
    AND             reduce using rule 128 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .)
    OR              reduce using rule 128 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .)
    TERNARY_Q       reduce using rule 128 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .)
    RPAREN          reduce using rule 128 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .)
    COMMA           reduce using rule 128 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .)
    TERNARY_C       reduce using rule 128 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .)
    LBRACE          reduce using rule 128 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .)
    EQ              shift and go to state 55
    NE              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

  ! EQ              [ reduce using rule 128 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .) ]
  ! NE              [ reduce using rule 128 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .) ]
  ! LT              [ reduce using rule 128 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .) ]
  ! GT              [ reduce using rule 128 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .) ]
  ! LE              [ reduce using rule 128 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .) ]
  ! GE              [ reduce using rule 128 (ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr .) ]


state 171

    (46) non_empty_parameters_list -> var COMMA . non_empty_parameters_list
    (46) non_empty_parameters_list -> . var COMMA non_empty_parameters_list
    (47) non_empty_parameters_list -> . var
    (75) var -> . ID

    ID              shift and go to state 36

    var                            shift and go to state 158
    non_empty_parameters_list      shift and go to state 177

state 172

    (38) func_stmt -> FN var LPAREN parameters_list RPAREN . LBRACE scoped_block RBRACE

    LBRACE          shift and go to state 178


state 173

    (48) switch_stmt -> SWITCH LPAREN var RPAREN LBRACE . case RBRACE
    (49) case -> . CASE expr LBRACE block RBRACE case
    (50) case -> . default_case
    (51) case -> . empty
    (52) default_case -> . DEFAULT LBRACE block RBRACE
    (129) empty -> .

    CASE            shift and go to state 180
    DEFAULT         shift and go to state 183
    RBRACE          reduce using rule 129 (empty -> .)

    case                           shift and go to state 179
    default_case                   shift and go to state 181
    empty                          shift and go to state 182

state 174

    (53) if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE . block RBRACE elif_stmt
    (2) block -> . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . concat_assign SEMI
    (9) statement -> . var_auto SEMI
    (10) statement -> . expr SEMI
    (11) statement -> . func_stmt
    (12) statement -> . switch_stmt
    (13) statement -> . if_stmt
    (14) statement -> . while_stmt
    (15) statement -> . for_stmt
    (16) statement -> . print_stmt SEMI
    (17) statement -> . scan_stmt SEMI
    (18) statement -> . empty
    (129) empty -> .
    (76) var_assign -> . var ASSIGN expr
    (77) final_assign -> . FINAL var ASSIGN expr
    (78) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (79) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (80) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (81) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (82) var_compound_assign -> . var POWER_ASSIGN num_expr
    (83) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (84) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (87) concat_assign -> . var CONCAT_ASSIGN string_expr
    (85) var_auto -> . var INCREMENT
    (86) var_auto -> . var DECREMENT
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (38) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (48) switch_stmt -> . SWITCH LPAREN var RPAREN LBRACE case RBRACE
    (53) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (73) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (74) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (70) print_stmt -> . PRINT LPAREN expr RPAREN
    (71) scan_stmt -> . SCANSTR LPAREN var RPAREN
    (72) scan_stmt -> . SCANNUM LPAREN var RPAREN
    (75) var -> . ID
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for SCANSTR resolved as shift
  ! shift/reduce conflict for SCANNUM resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 129 (empty -> .)
    FINAL           shift and go to state 20
    FN              shift and go to state 27
    SWITCH          shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    SCANSTR         shift and go to state 34
    SCANNUM         shift and go to state 35
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

  ! FINAL           [ reduce using rule 129 (empty -> .) ]
  ! FN              [ reduce using rule 129 (empty -> .) ]
  ! SWITCH          [ reduce using rule 129 (empty -> .) ]
  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! PRINT           [ reduce using rule 129 (empty -> .) ]
  ! SCANSTR         [ reduce using rule 129 (empty -> .) ]
  ! SCANNUM         [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! STRING          [ reduce using rule 129 (empty -> .) ]
  ! NOT             [ reduce using rule 129 (empty -> .) ]
  ! NULL            [ reduce using rule 129 (empty -> .) ]
  ! PLUS            [ reduce using rule 129 (empty -> .) ]
  ! MINUS           [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]
  ! FLOAT           [ reduce using rule 129 (empty -> .) ]
  ! LPAREN          [ reduce using rule 129 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 129 (empty -> .) ]

    boolean_expr                   shift and go to state 23
    block                          shift and go to state 184
    statement_list                 shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 5
    var_assign                     shift and go to state 6
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    concat_assign                  shift and go to state 9
    var_auto                       shift and go to state 10
    expr                           shift and go to state 11
    func_stmt                      shift and go to state 12
    switch_stmt                    shift and go to state 13
    if_stmt                        shift and go to state 14
    while_stmt                     shift and go to state 15
    for_stmt                       shift and go to state 16
    print_stmt                     shift and go to state 17
    scan_stmt                      shift and go to state 18
    var                            shift and go to state 19
    num_expr                       shift and go to state 21
    string_expr                    shift and go to state 22
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 175

    (73) while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE . block RBRACE
    (2) block -> . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . concat_assign SEMI
    (9) statement -> . var_auto SEMI
    (10) statement -> . expr SEMI
    (11) statement -> . func_stmt
    (12) statement -> . switch_stmt
    (13) statement -> . if_stmt
    (14) statement -> . while_stmt
    (15) statement -> . for_stmt
    (16) statement -> . print_stmt SEMI
    (17) statement -> . scan_stmt SEMI
    (18) statement -> . empty
    (129) empty -> .
    (76) var_assign -> . var ASSIGN expr
    (77) final_assign -> . FINAL var ASSIGN expr
    (78) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (79) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (80) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (81) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (82) var_compound_assign -> . var POWER_ASSIGN num_expr
    (83) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (84) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (87) concat_assign -> . var CONCAT_ASSIGN string_expr
    (85) var_auto -> . var INCREMENT
    (86) var_auto -> . var DECREMENT
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (38) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (48) switch_stmt -> . SWITCH LPAREN var RPAREN LBRACE case RBRACE
    (53) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (73) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (74) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (70) print_stmt -> . PRINT LPAREN expr RPAREN
    (71) scan_stmt -> . SCANSTR LPAREN var RPAREN
    (72) scan_stmt -> . SCANNUM LPAREN var RPAREN
    (75) var -> . ID
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for SCANSTR resolved as shift
  ! shift/reduce conflict for SCANNUM resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 129 (empty -> .)
    FINAL           shift and go to state 20
    FN              shift and go to state 27
    SWITCH          shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    SCANSTR         shift and go to state 34
    SCANNUM         shift and go to state 35
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

  ! FINAL           [ reduce using rule 129 (empty -> .) ]
  ! FN              [ reduce using rule 129 (empty -> .) ]
  ! SWITCH          [ reduce using rule 129 (empty -> .) ]
  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! PRINT           [ reduce using rule 129 (empty -> .) ]
  ! SCANSTR         [ reduce using rule 129 (empty -> .) ]
  ! SCANNUM         [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! STRING          [ reduce using rule 129 (empty -> .) ]
  ! NOT             [ reduce using rule 129 (empty -> .) ]
  ! NULL            [ reduce using rule 129 (empty -> .) ]
  ! PLUS            [ reduce using rule 129 (empty -> .) ]
  ! MINUS           [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]
  ! FLOAT           [ reduce using rule 129 (empty -> .) ]
  ! LPAREN          [ reduce using rule 129 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 129 (empty -> .) ]

    boolean_expr                   shift and go to state 23
    block                          shift and go to state 185
    statement_list                 shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 5
    var_assign                     shift and go to state 6
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    concat_assign                  shift and go to state 9
    var_auto                       shift and go to state 10
    expr                           shift and go to state 11
    func_stmt                      shift and go to state 12
    switch_stmt                    shift and go to state 13
    if_stmt                        shift and go to state 14
    while_stmt                     shift and go to state 15
    for_stmt                       shift and go to state 16
    print_stmt                     shift and go to state 17
    scan_stmt                      shift and go to state 18
    var                            shift and go to state 19
    num_expr                       shift and go to state 21
    string_expr                    shift and go to state 22
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 176

    (74) for_stmt -> FOR LPAREN var_assign SEMI boolean_expr . SEMI var_auto RPAREN LBRACE block RBRACE
    (113) boolean_expr -> boolean_expr . AND boolean_expr
    (114) boolean_expr -> boolean_expr . OR boolean_expr
    (90) expr -> boolean_expr .
    (128) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    SEMI            shift and go to state 186
    AND             shift and go to state 84
    OR              shift and go to state 85
    EQ              reduce using rule 90 (expr -> boolean_expr .)
    NE              reduce using rule 90 (expr -> boolean_expr .)
    LT              reduce using rule 90 (expr -> boolean_expr .)
    GT              reduce using rule 90 (expr -> boolean_expr .)
    LE              reduce using rule 90 (expr -> boolean_expr .)
    GE              reduce using rule 90 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 86


state 177

    (46) non_empty_parameters_list -> var COMMA non_empty_parameters_list .

    RPAREN          reduce using rule 46 (non_empty_parameters_list -> var COMMA non_empty_parameters_list .)


state 178

    (38) func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE . scoped_block RBRACE
    (19) scoped_block -> . scoped_statement_list
    (20) scoped_statement_list -> . scoped_statement scoped_statement_list
    (21) scoped_statement_list -> . empty
    (22) scoped_statement -> . var_assign SEMI
    (23) scoped_statement -> . final_assign SEMI
    (24) scoped_statement -> . var_compound_assign SEMI
    (25) scoped_statement -> . concat_assign SEMI
    (26) scoped_statement -> . var_auto SEMI
    (27) scoped_statement -> . expr SEMI
    (28) scoped_statement -> . func_stmt
    (29) scoped_statement -> . scoped_switch_stmt
    (30) scoped_statement -> . scoped_if_stmt
    (31) scoped_statement -> . scoped_while_stmt
    (32) scoped_statement -> . scoped_for_stmt
    (33) scoped_statement -> . print_stmt SEMI
    (34) scoped_statement -> . scan_stmt SEMI
    (35) scoped_statement -> . return SEMI
    (36) scoped_statement -> . empty
    (129) empty -> .
    (76) var_assign -> . var ASSIGN expr
    (77) final_assign -> . FINAL var ASSIGN expr
    (78) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (79) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (80) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (81) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (82) var_compound_assign -> . var POWER_ASSIGN num_expr
    (83) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (84) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (87) concat_assign -> . var CONCAT_ASSIGN string_expr
    (85) var_auto -> . var INCREMENT
    (86) var_auto -> . var DECREMENT
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (38) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (58) scoped_switch_stmt -> . SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE
    (63) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (68) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (69) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (70) print_stmt -> . PRINT LPAREN expr RPAREN
    (71) scan_stmt -> . SCANSTR LPAREN var RPAREN
    (72) scan_stmt -> . SCANNUM LPAREN var RPAREN
    (37) return -> . RETURN expr
    (75) var -> . ID
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for SCANSTR resolved as shift
  ! shift/reduce conflict for SCANNUM resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 129 (empty -> .)
    FINAL           shift and go to state 20
    FN              shift and go to state 27
    SWITCH          shift and go to state 205
    IF              shift and go to state 206
    WHILE           shift and go to state 207
    FOR             shift and go to state 208
    PRINT           shift and go to state 33
    SCANSTR         shift and go to state 34
    SCANNUM         shift and go to state 35
    RETURN          shift and go to state 209
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

  ! FINAL           [ reduce using rule 129 (empty -> .) ]
  ! FN              [ reduce using rule 129 (empty -> .) ]
  ! SWITCH          [ reduce using rule 129 (empty -> .) ]
  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! PRINT           [ reduce using rule 129 (empty -> .) ]
  ! SCANSTR         [ reduce using rule 129 (empty -> .) ]
  ! SCANNUM         [ reduce using rule 129 (empty -> .) ]
  ! RETURN          [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! STRING          [ reduce using rule 129 (empty -> .) ]
  ! NOT             [ reduce using rule 129 (empty -> .) ]
  ! NULL            [ reduce using rule 129 (empty -> .) ]
  ! PLUS            [ reduce using rule 129 (empty -> .) ]
  ! MINUS           [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]
  ! FLOAT           [ reduce using rule 129 (empty -> .) ]
  ! LPAREN          [ reduce using rule 129 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 129 (empty -> .) ]

    var                            shift and go to state 19
    scoped_block                   shift and go to state 187
    scoped_statement_list          shift and go to state 188
    scoped_statement               shift and go to state 189
    empty                          shift and go to state 190
    var_assign                     shift and go to state 191
    final_assign                   shift and go to state 192
    var_compound_assign            shift and go to state 193
    concat_assign                  shift and go to state 194
    var_auto                       shift and go to state 195
    expr                           shift and go to state 196
    func_stmt                      shift and go to state 197
    scoped_switch_stmt             shift and go to state 198
    scoped_if_stmt                 shift and go to state 199
    scoped_while_stmt              shift and go to state 200
    scoped_for_stmt                shift and go to state 201
    print_stmt                     shift and go to state 202
    scan_stmt                      shift and go to state 203
    return                         shift and go to state 204
    num_expr                       shift and go to state 21
    string_expr                    shift and go to state 22
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 179

    (48) switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case . RBRACE

    RBRACE          shift and go to state 210


state 180

    (49) case -> CASE . expr LBRACE block RBRACE case
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (75) var -> . ID
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    ID              shift and go to state 36
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

    expr                           shift and go to state 211
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    var                            shift and go to state 109
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 181

    (50) case -> default_case .

    RBRACE          reduce using rule 50 (case -> default_case .)


state 182

    (51) case -> empty .

    RBRACE          reduce using rule 51 (case -> empty .)


state 183

    (52) default_case -> DEFAULT . LBRACE block RBRACE

    LBRACE          shift and go to state 212


state 184

    (53) if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block . RBRACE elif_stmt

    RBRACE          shift and go to state 213


state 185

    (73) while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block . RBRACE

    RBRACE          shift and go to state 214


state 186

    (74) for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI . var_auto RPAREN LBRACE block RBRACE
    (85) var_auto -> . var INCREMENT
    (86) var_auto -> . var DECREMENT
    (75) var -> . ID

    ID              shift and go to state 36

    var_auto                       shift and go to state 215
    var                            shift and go to state 216

state 187

    (38) func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block . RBRACE

    RBRACE          shift and go to state 217


state 188

    (19) scoped_block -> scoped_statement_list .

    RBRACE          reduce using rule 19 (scoped_block -> scoped_statement_list .)


state 189

    (20) scoped_statement_list -> scoped_statement . scoped_statement_list
    (20) scoped_statement_list -> . scoped_statement scoped_statement_list
    (21) scoped_statement_list -> . empty
    (22) scoped_statement -> . var_assign SEMI
    (23) scoped_statement -> . final_assign SEMI
    (24) scoped_statement -> . var_compound_assign SEMI
    (25) scoped_statement -> . concat_assign SEMI
    (26) scoped_statement -> . var_auto SEMI
    (27) scoped_statement -> . expr SEMI
    (28) scoped_statement -> . func_stmt
    (29) scoped_statement -> . scoped_switch_stmt
    (30) scoped_statement -> . scoped_if_stmt
    (31) scoped_statement -> . scoped_while_stmt
    (32) scoped_statement -> . scoped_for_stmt
    (33) scoped_statement -> . print_stmt SEMI
    (34) scoped_statement -> . scan_stmt SEMI
    (35) scoped_statement -> . return SEMI
    (36) scoped_statement -> . empty
    (129) empty -> .
    (76) var_assign -> . var ASSIGN expr
    (77) final_assign -> . FINAL var ASSIGN expr
    (78) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (79) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (80) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (81) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (82) var_compound_assign -> . var POWER_ASSIGN num_expr
    (83) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (84) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (87) concat_assign -> . var CONCAT_ASSIGN string_expr
    (85) var_auto -> . var INCREMENT
    (86) var_auto -> . var DECREMENT
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (38) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (58) scoped_switch_stmt -> . SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE
    (63) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (68) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (69) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (70) print_stmt -> . PRINT LPAREN expr RPAREN
    (71) scan_stmt -> . SCANSTR LPAREN var RPAREN
    (72) scan_stmt -> . SCANNUM LPAREN var RPAREN
    (37) return -> . RETURN expr
    (75) var -> . ID
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for SCANSTR resolved as shift
  ! shift/reduce conflict for SCANNUM resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 129 (empty -> .)
    FINAL           shift and go to state 20
    FN              shift and go to state 27
    SWITCH          shift and go to state 205
    IF              shift and go to state 206
    WHILE           shift and go to state 207
    FOR             shift and go to state 208
    PRINT           shift and go to state 33
    SCANSTR         shift and go to state 34
    SCANNUM         shift and go to state 35
    RETURN          shift and go to state 209
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

  ! FINAL           [ reduce using rule 129 (empty -> .) ]
  ! FN              [ reduce using rule 129 (empty -> .) ]
  ! SWITCH          [ reduce using rule 129 (empty -> .) ]
  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! PRINT           [ reduce using rule 129 (empty -> .) ]
  ! SCANSTR         [ reduce using rule 129 (empty -> .) ]
  ! SCANNUM         [ reduce using rule 129 (empty -> .) ]
  ! RETURN          [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! STRING          [ reduce using rule 129 (empty -> .) ]
  ! NOT             [ reduce using rule 129 (empty -> .) ]
  ! NULL            [ reduce using rule 129 (empty -> .) ]
  ! PLUS            [ reduce using rule 129 (empty -> .) ]
  ! MINUS           [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]
  ! FLOAT           [ reduce using rule 129 (empty -> .) ]
  ! LPAREN          [ reduce using rule 129 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 129 (empty -> .) ]

    scoped_statement               shift and go to state 189
    scoped_statement_list          shift and go to state 218
    empty                          shift and go to state 190
    var_assign                     shift and go to state 191
    final_assign                   shift and go to state 192
    var_compound_assign            shift and go to state 193
    concat_assign                  shift and go to state 194
    var_auto                       shift and go to state 195
    expr                           shift and go to state 196
    func_stmt                      shift and go to state 197
    scoped_switch_stmt             shift and go to state 198
    scoped_if_stmt                 shift and go to state 199
    scoped_while_stmt              shift and go to state 200
    scoped_for_stmt                shift and go to state 201
    print_stmt                     shift and go to state 202
    scan_stmt                      shift and go to state 203
    return                         shift and go to state 204
    var                            shift and go to state 19
    num_expr                       shift and go to state 21
    string_expr                    shift and go to state 22
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 190

    (21) scoped_statement_list -> empty .
    (36) scoped_statement -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 21 (scoped_statement_list -> empty .)
    RBRACE          reduce using rule 21 (scoped_statement_list -> empty .)
    FINAL           reduce using rule 36 (scoped_statement -> empty .)
    FN              reduce using rule 36 (scoped_statement -> empty .)
    SWITCH          reduce using rule 36 (scoped_statement -> empty .)
    IF              reduce using rule 36 (scoped_statement -> empty .)
    WHILE           reduce using rule 36 (scoped_statement -> empty .)
    FOR             reduce using rule 36 (scoped_statement -> empty .)
    PRINT           reduce using rule 36 (scoped_statement -> empty .)
    SCANSTR         reduce using rule 36 (scoped_statement -> empty .)
    SCANNUM         reduce using rule 36 (scoped_statement -> empty .)
    RETURN          reduce using rule 36 (scoped_statement -> empty .)
    ID              reduce using rule 36 (scoped_statement -> empty .)
    STRING          reduce using rule 36 (scoped_statement -> empty .)
    NOT             reduce using rule 36 (scoped_statement -> empty .)
    NULL            reduce using rule 36 (scoped_statement -> empty .)
    PLUS            reduce using rule 36 (scoped_statement -> empty .)
    MINUS           reduce using rule 36 (scoped_statement -> empty .)
    INTEGER         reduce using rule 36 (scoped_statement -> empty .)
    FLOAT           reduce using rule 36 (scoped_statement -> empty .)
    LPAREN          reduce using rule 36 (scoped_statement -> empty .)
    BOOLEAN         reduce using rule 36 (scoped_statement -> empty .)

  ! RBRACE          [ reduce using rule 36 (scoped_statement -> empty .) ]


state 191

    (22) scoped_statement -> var_assign . SEMI

    SEMI            shift and go to state 219


state 192

    (23) scoped_statement -> final_assign . SEMI

    SEMI            shift and go to state 220


state 193

    (24) scoped_statement -> var_compound_assign . SEMI

    SEMI            shift and go to state 221


state 194

    (25) scoped_statement -> concat_assign . SEMI

    SEMI            shift and go to state 222


state 195

    (26) scoped_statement -> var_auto . SEMI

    SEMI            shift and go to state 223


state 196

    (27) scoped_statement -> expr . SEMI
    (121) comparison -> expr . EQ expr
    (122) comparison -> expr . NE expr
    (123) comparison -> expr . LT expr
    (124) comparison -> expr . GT expr
    (125) comparison -> expr . LE expr
    (126) comparison -> expr . GE expr

    SEMI            shift and go to state 224
    EQ              shift and go to state 55
    NE              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60


state 197

    (28) scoped_statement -> func_stmt .

    FINAL           reduce using rule 28 (scoped_statement -> func_stmt .)
    FN              reduce using rule 28 (scoped_statement -> func_stmt .)
    SWITCH          reduce using rule 28 (scoped_statement -> func_stmt .)
    IF              reduce using rule 28 (scoped_statement -> func_stmt .)
    WHILE           reduce using rule 28 (scoped_statement -> func_stmt .)
    FOR             reduce using rule 28 (scoped_statement -> func_stmt .)
    PRINT           reduce using rule 28 (scoped_statement -> func_stmt .)
    SCANSTR         reduce using rule 28 (scoped_statement -> func_stmt .)
    SCANNUM         reduce using rule 28 (scoped_statement -> func_stmt .)
    RETURN          reduce using rule 28 (scoped_statement -> func_stmt .)
    ID              reduce using rule 28 (scoped_statement -> func_stmt .)
    STRING          reduce using rule 28 (scoped_statement -> func_stmt .)
    NOT             reduce using rule 28 (scoped_statement -> func_stmt .)
    NULL            reduce using rule 28 (scoped_statement -> func_stmt .)
    PLUS            reduce using rule 28 (scoped_statement -> func_stmt .)
    MINUS           reduce using rule 28 (scoped_statement -> func_stmt .)
    INTEGER         reduce using rule 28 (scoped_statement -> func_stmt .)
    FLOAT           reduce using rule 28 (scoped_statement -> func_stmt .)
    LPAREN          reduce using rule 28 (scoped_statement -> func_stmt .)
    BOOLEAN         reduce using rule 28 (scoped_statement -> func_stmt .)
    RBRACE          reduce using rule 28 (scoped_statement -> func_stmt .)


state 198

    (29) scoped_statement -> scoped_switch_stmt .

    FINAL           reduce using rule 29 (scoped_statement -> scoped_switch_stmt .)
    FN              reduce using rule 29 (scoped_statement -> scoped_switch_stmt .)
    SWITCH          reduce using rule 29 (scoped_statement -> scoped_switch_stmt .)
    IF              reduce using rule 29 (scoped_statement -> scoped_switch_stmt .)
    WHILE           reduce using rule 29 (scoped_statement -> scoped_switch_stmt .)
    FOR             reduce using rule 29 (scoped_statement -> scoped_switch_stmt .)
    PRINT           reduce using rule 29 (scoped_statement -> scoped_switch_stmt .)
    SCANSTR         reduce using rule 29 (scoped_statement -> scoped_switch_stmt .)
    SCANNUM         reduce using rule 29 (scoped_statement -> scoped_switch_stmt .)
    RETURN          reduce using rule 29 (scoped_statement -> scoped_switch_stmt .)
    ID              reduce using rule 29 (scoped_statement -> scoped_switch_stmt .)
    STRING          reduce using rule 29 (scoped_statement -> scoped_switch_stmt .)
    NOT             reduce using rule 29 (scoped_statement -> scoped_switch_stmt .)
    NULL            reduce using rule 29 (scoped_statement -> scoped_switch_stmt .)
    PLUS            reduce using rule 29 (scoped_statement -> scoped_switch_stmt .)
    MINUS           reduce using rule 29 (scoped_statement -> scoped_switch_stmt .)
    INTEGER         reduce using rule 29 (scoped_statement -> scoped_switch_stmt .)
    FLOAT           reduce using rule 29 (scoped_statement -> scoped_switch_stmt .)
    LPAREN          reduce using rule 29 (scoped_statement -> scoped_switch_stmt .)
    BOOLEAN         reduce using rule 29 (scoped_statement -> scoped_switch_stmt .)
    RBRACE          reduce using rule 29 (scoped_statement -> scoped_switch_stmt .)


state 199

    (30) scoped_statement -> scoped_if_stmt .

    FINAL           reduce using rule 30 (scoped_statement -> scoped_if_stmt .)
    FN              reduce using rule 30 (scoped_statement -> scoped_if_stmt .)
    SWITCH          reduce using rule 30 (scoped_statement -> scoped_if_stmt .)
    IF              reduce using rule 30 (scoped_statement -> scoped_if_stmt .)
    WHILE           reduce using rule 30 (scoped_statement -> scoped_if_stmt .)
    FOR             reduce using rule 30 (scoped_statement -> scoped_if_stmt .)
    PRINT           reduce using rule 30 (scoped_statement -> scoped_if_stmt .)
    SCANSTR         reduce using rule 30 (scoped_statement -> scoped_if_stmt .)
    SCANNUM         reduce using rule 30 (scoped_statement -> scoped_if_stmt .)
    RETURN          reduce using rule 30 (scoped_statement -> scoped_if_stmt .)
    ID              reduce using rule 30 (scoped_statement -> scoped_if_stmt .)
    STRING          reduce using rule 30 (scoped_statement -> scoped_if_stmt .)
    NOT             reduce using rule 30 (scoped_statement -> scoped_if_stmt .)
    NULL            reduce using rule 30 (scoped_statement -> scoped_if_stmt .)
    PLUS            reduce using rule 30 (scoped_statement -> scoped_if_stmt .)
    MINUS           reduce using rule 30 (scoped_statement -> scoped_if_stmt .)
    INTEGER         reduce using rule 30 (scoped_statement -> scoped_if_stmt .)
    FLOAT           reduce using rule 30 (scoped_statement -> scoped_if_stmt .)
    LPAREN          reduce using rule 30 (scoped_statement -> scoped_if_stmt .)
    BOOLEAN         reduce using rule 30 (scoped_statement -> scoped_if_stmt .)
    RBRACE          reduce using rule 30 (scoped_statement -> scoped_if_stmt .)


state 200

    (31) scoped_statement -> scoped_while_stmt .

    FINAL           reduce using rule 31 (scoped_statement -> scoped_while_stmt .)
    FN              reduce using rule 31 (scoped_statement -> scoped_while_stmt .)
    SWITCH          reduce using rule 31 (scoped_statement -> scoped_while_stmt .)
    IF              reduce using rule 31 (scoped_statement -> scoped_while_stmt .)
    WHILE           reduce using rule 31 (scoped_statement -> scoped_while_stmt .)
    FOR             reduce using rule 31 (scoped_statement -> scoped_while_stmt .)
    PRINT           reduce using rule 31 (scoped_statement -> scoped_while_stmt .)
    SCANSTR         reduce using rule 31 (scoped_statement -> scoped_while_stmt .)
    SCANNUM         reduce using rule 31 (scoped_statement -> scoped_while_stmt .)
    RETURN          reduce using rule 31 (scoped_statement -> scoped_while_stmt .)
    ID              reduce using rule 31 (scoped_statement -> scoped_while_stmt .)
    STRING          reduce using rule 31 (scoped_statement -> scoped_while_stmt .)
    NOT             reduce using rule 31 (scoped_statement -> scoped_while_stmt .)
    NULL            reduce using rule 31 (scoped_statement -> scoped_while_stmt .)
    PLUS            reduce using rule 31 (scoped_statement -> scoped_while_stmt .)
    MINUS           reduce using rule 31 (scoped_statement -> scoped_while_stmt .)
    INTEGER         reduce using rule 31 (scoped_statement -> scoped_while_stmt .)
    FLOAT           reduce using rule 31 (scoped_statement -> scoped_while_stmt .)
    LPAREN          reduce using rule 31 (scoped_statement -> scoped_while_stmt .)
    BOOLEAN         reduce using rule 31 (scoped_statement -> scoped_while_stmt .)
    RBRACE          reduce using rule 31 (scoped_statement -> scoped_while_stmt .)


state 201

    (32) scoped_statement -> scoped_for_stmt .

    FINAL           reduce using rule 32 (scoped_statement -> scoped_for_stmt .)
    FN              reduce using rule 32 (scoped_statement -> scoped_for_stmt .)
    SWITCH          reduce using rule 32 (scoped_statement -> scoped_for_stmt .)
    IF              reduce using rule 32 (scoped_statement -> scoped_for_stmt .)
    WHILE           reduce using rule 32 (scoped_statement -> scoped_for_stmt .)
    FOR             reduce using rule 32 (scoped_statement -> scoped_for_stmt .)
    PRINT           reduce using rule 32 (scoped_statement -> scoped_for_stmt .)
    SCANSTR         reduce using rule 32 (scoped_statement -> scoped_for_stmt .)
    SCANNUM         reduce using rule 32 (scoped_statement -> scoped_for_stmt .)
    RETURN          reduce using rule 32 (scoped_statement -> scoped_for_stmt .)
    ID              reduce using rule 32 (scoped_statement -> scoped_for_stmt .)
    STRING          reduce using rule 32 (scoped_statement -> scoped_for_stmt .)
    NOT             reduce using rule 32 (scoped_statement -> scoped_for_stmt .)
    NULL            reduce using rule 32 (scoped_statement -> scoped_for_stmt .)
    PLUS            reduce using rule 32 (scoped_statement -> scoped_for_stmt .)
    MINUS           reduce using rule 32 (scoped_statement -> scoped_for_stmt .)
    INTEGER         reduce using rule 32 (scoped_statement -> scoped_for_stmt .)
    FLOAT           reduce using rule 32 (scoped_statement -> scoped_for_stmt .)
    LPAREN          reduce using rule 32 (scoped_statement -> scoped_for_stmt .)
    BOOLEAN         reduce using rule 32 (scoped_statement -> scoped_for_stmt .)
    RBRACE          reduce using rule 32 (scoped_statement -> scoped_for_stmt .)


state 202

    (33) scoped_statement -> print_stmt . SEMI

    SEMI            shift and go to state 225


state 203

    (34) scoped_statement -> scan_stmt . SEMI

    SEMI            shift and go to state 226


state 204

    (35) scoped_statement -> return . SEMI

    SEMI            shift and go to state 227


state 205

    (58) scoped_switch_stmt -> SWITCH . LPAREN var RPAREN LBRACE scoped_case RBRACE

    LPAREN          shift and go to state 228


state 206

    (63) scoped_if_stmt -> IF . LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt

    LPAREN          shift and go to state 229


state 207

    (68) scoped_while_stmt -> WHILE . LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE

    LPAREN          shift and go to state 230


state 208

    (69) scoped_for_stmt -> FOR . LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE

    LPAREN          shift and go to state 231


state 209

    (37) return -> RETURN . expr
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (75) var -> . ID
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    ID              shift and go to state 36
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

    expr                           shift and go to state 232
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    var                            shift and go to state 109
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 210

    (48) switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE .

    FINAL           reduce using rule 48 (switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE .)
    FN              reduce using rule 48 (switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE .)
    SWITCH          reduce using rule 48 (switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE .)
    IF              reduce using rule 48 (switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE .)
    WHILE           reduce using rule 48 (switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE .)
    FOR             reduce using rule 48 (switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE .)
    PRINT           reduce using rule 48 (switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE .)
    SCANSTR         reduce using rule 48 (switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE .)
    SCANNUM         reduce using rule 48 (switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE .)
    ID              reduce using rule 48 (switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE .)
    STRING          reduce using rule 48 (switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE .)
    NOT             reduce using rule 48 (switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE .)
    NULL            reduce using rule 48 (switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE .)
    PLUS            reduce using rule 48 (switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE .)
    MINUS           reduce using rule 48 (switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE .)
    INTEGER         reduce using rule 48 (switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE .)
    FLOAT           reduce using rule 48 (switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE .)
    LPAREN          reduce using rule 48 (switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE .)
    BOOLEAN         reduce using rule 48 (switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE .)
    $end            reduce using rule 48 (switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE .)
    RBRACE          reduce using rule 48 (switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE .)


state 211

    (49) case -> CASE expr . LBRACE block RBRACE case
    (121) comparison -> expr . EQ expr
    (122) comparison -> expr . NE expr
    (123) comparison -> expr . LT expr
    (124) comparison -> expr . GT expr
    (125) comparison -> expr . LE expr
    (126) comparison -> expr . GE expr

    LBRACE          shift and go to state 233
    EQ              shift and go to state 55
    NE              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60


state 212

    (52) default_case -> DEFAULT LBRACE . block RBRACE
    (2) block -> . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . concat_assign SEMI
    (9) statement -> . var_auto SEMI
    (10) statement -> . expr SEMI
    (11) statement -> . func_stmt
    (12) statement -> . switch_stmt
    (13) statement -> . if_stmt
    (14) statement -> . while_stmt
    (15) statement -> . for_stmt
    (16) statement -> . print_stmt SEMI
    (17) statement -> . scan_stmt SEMI
    (18) statement -> . empty
    (129) empty -> .
    (76) var_assign -> . var ASSIGN expr
    (77) final_assign -> . FINAL var ASSIGN expr
    (78) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (79) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (80) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (81) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (82) var_compound_assign -> . var POWER_ASSIGN num_expr
    (83) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (84) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (87) concat_assign -> . var CONCAT_ASSIGN string_expr
    (85) var_auto -> . var INCREMENT
    (86) var_auto -> . var DECREMENT
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (38) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (48) switch_stmt -> . SWITCH LPAREN var RPAREN LBRACE case RBRACE
    (53) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (73) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (74) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (70) print_stmt -> . PRINT LPAREN expr RPAREN
    (71) scan_stmt -> . SCANSTR LPAREN var RPAREN
    (72) scan_stmt -> . SCANNUM LPAREN var RPAREN
    (75) var -> . ID
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for SCANSTR resolved as shift
  ! shift/reduce conflict for SCANNUM resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 129 (empty -> .)
    FINAL           shift and go to state 20
    FN              shift and go to state 27
    SWITCH          shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    SCANSTR         shift and go to state 34
    SCANNUM         shift and go to state 35
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

  ! FINAL           [ reduce using rule 129 (empty -> .) ]
  ! FN              [ reduce using rule 129 (empty -> .) ]
  ! SWITCH          [ reduce using rule 129 (empty -> .) ]
  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! PRINT           [ reduce using rule 129 (empty -> .) ]
  ! SCANSTR         [ reduce using rule 129 (empty -> .) ]
  ! SCANNUM         [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! STRING          [ reduce using rule 129 (empty -> .) ]
  ! NOT             [ reduce using rule 129 (empty -> .) ]
  ! NULL            [ reduce using rule 129 (empty -> .) ]
  ! PLUS            [ reduce using rule 129 (empty -> .) ]
  ! MINUS           [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]
  ! FLOAT           [ reduce using rule 129 (empty -> .) ]
  ! LPAREN          [ reduce using rule 129 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 129 (empty -> .) ]

    block                          shift and go to state 234
    statement_list                 shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 5
    var_assign                     shift and go to state 6
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    concat_assign                  shift and go to state 9
    var_auto                       shift and go to state 10
    expr                           shift and go to state 11
    func_stmt                      shift and go to state 12
    switch_stmt                    shift and go to state 13
    if_stmt                        shift and go to state 14
    while_stmt                     shift and go to state 15
    for_stmt                       shift and go to state 16
    print_stmt                     shift and go to state 17
    scan_stmt                      shift and go to state 18
    var                            shift and go to state 19
    num_expr                       shift and go to state 21
    string_expr                    shift and go to state 22
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 213

    (53) if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE . elif_stmt
    (54) elif_stmt -> . ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (55) elif_stmt -> . else_stmt
    (56) elif_stmt -> . empty
    (57) else_stmt -> . ELSE LBRACE block RBRACE
    (129) empty -> .

    ELIF            shift and go to state 236
    ELSE            shift and go to state 239
    FINAL           reduce using rule 129 (empty -> .)
    FN              reduce using rule 129 (empty -> .)
    SWITCH          reduce using rule 129 (empty -> .)
    IF              reduce using rule 129 (empty -> .)
    WHILE           reduce using rule 129 (empty -> .)
    FOR             reduce using rule 129 (empty -> .)
    PRINT           reduce using rule 129 (empty -> .)
    SCANSTR         reduce using rule 129 (empty -> .)
    SCANNUM         reduce using rule 129 (empty -> .)
    ID              reduce using rule 129 (empty -> .)
    STRING          reduce using rule 129 (empty -> .)
    NOT             reduce using rule 129 (empty -> .)
    NULL            reduce using rule 129 (empty -> .)
    PLUS            reduce using rule 129 (empty -> .)
    MINUS           reduce using rule 129 (empty -> .)
    INTEGER         reduce using rule 129 (empty -> .)
    FLOAT           reduce using rule 129 (empty -> .)
    LPAREN          reduce using rule 129 (empty -> .)
    BOOLEAN         reduce using rule 129 (empty -> .)
    $end            reduce using rule 129 (empty -> .)
    RBRACE          reduce using rule 129 (empty -> .)

    elif_stmt                      shift and go to state 235
    else_stmt                      shift and go to state 237
    empty                          shift and go to state 238

state 214

    (73) while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .

    FINAL           reduce using rule 73 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    FN              reduce using rule 73 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    SWITCH          reduce using rule 73 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    IF              reduce using rule 73 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    WHILE           reduce using rule 73 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    FOR             reduce using rule 73 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    PRINT           reduce using rule 73 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    SCANSTR         reduce using rule 73 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    SCANNUM         reduce using rule 73 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    ID              reduce using rule 73 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    STRING          reduce using rule 73 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    NOT             reduce using rule 73 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    NULL            reduce using rule 73 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    PLUS            reduce using rule 73 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    MINUS           reduce using rule 73 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    INTEGER         reduce using rule 73 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    FLOAT           reduce using rule 73 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    LPAREN          reduce using rule 73 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    BOOLEAN         reduce using rule 73 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    $end            reduce using rule 73 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)
    RBRACE          reduce using rule 73 (while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE .)


state 215

    (74) for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto . RPAREN LBRACE block RBRACE

    RPAREN          shift and go to state 240


state 216

    (85) var_auto -> var . INCREMENT
    (86) var_auto -> var . DECREMENT

    INCREMENT       shift and go to state 72
    DECREMENT       shift and go to state 73


state 217

    (38) func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .

    FINAL           reduce using rule 38 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    FN              reduce using rule 38 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    SWITCH          reduce using rule 38 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    IF              reduce using rule 38 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    WHILE           reduce using rule 38 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    FOR             reduce using rule 38 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    PRINT           reduce using rule 38 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    SCANSTR         reduce using rule 38 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    SCANNUM         reduce using rule 38 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    ID              reduce using rule 38 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    STRING          reduce using rule 38 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    NOT             reduce using rule 38 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    NULL            reduce using rule 38 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    PLUS            reduce using rule 38 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    MINUS           reduce using rule 38 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    INTEGER         reduce using rule 38 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    FLOAT           reduce using rule 38 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    LPAREN          reduce using rule 38 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    BOOLEAN         reduce using rule 38 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    $end            reduce using rule 38 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    RBRACE          reduce using rule 38 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)
    RETURN          reduce using rule 38 (func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE .)


state 218

    (20) scoped_statement_list -> scoped_statement scoped_statement_list .

    RBRACE          reduce using rule 20 (scoped_statement_list -> scoped_statement scoped_statement_list .)


state 219

    (22) scoped_statement -> var_assign SEMI .

    FINAL           reduce using rule 22 (scoped_statement -> var_assign SEMI .)
    FN              reduce using rule 22 (scoped_statement -> var_assign SEMI .)
    SWITCH          reduce using rule 22 (scoped_statement -> var_assign SEMI .)
    IF              reduce using rule 22 (scoped_statement -> var_assign SEMI .)
    WHILE           reduce using rule 22 (scoped_statement -> var_assign SEMI .)
    FOR             reduce using rule 22 (scoped_statement -> var_assign SEMI .)
    PRINT           reduce using rule 22 (scoped_statement -> var_assign SEMI .)
    SCANSTR         reduce using rule 22 (scoped_statement -> var_assign SEMI .)
    SCANNUM         reduce using rule 22 (scoped_statement -> var_assign SEMI .)
    RETURN          reduce using rule 22 (scoped_statement -> var_assign SEMI .)
    ID              reduce using rule 22 (scoped_statement -> var_assign SEMI .)
    STRING          reduce using rule 22 (scoped_statement -> var_assign SEMI .)
    NOT             reduce using rule 22 (scoped_statement -> var_assign SEMI .)
    NULL            reduce using rule 22 (scoped_statement -> var_assign SEMI .)
    PLUS            reduce using rule 22 (scoped_statement -> var_assign SEMI .)
    MINUS           reduce using rule 22 (scoped_statement -> var_assign SEMI .)
    INTEGER         reduce using rule 22 (scoped_statement -> var_assign SEMI .)
    FLOAT           reduce using rule 22 (scoped_statement -> var_assign SEMI .)
    LPAREN          reduce using rule 22 (scoped_statement -> var_assign SEMI .)
    BOOLEAN         reduce using rule 22 (scoped_statement -> var_assign SEMI .)
    RBRACE          reduce using rule 22 (scoped_statement -> var_assign SEMI .)


state 220

    (23) scoped_statement -> final_assign SEMI .

    FINAL           reduce using rule 23 (scoped_statement -> final_assign SEMI .)
    FN              reduce using rule 23 (scoped_statement -> final_assign SEMI .)
    SWITCH          reduce using rule 23 (scoped_statement -> final_assign SEMI .)
    IF              reduce using rule 23 (scoped_statement -> final_assign SEMI .)
    WHILE           reduce using rule 23 (scoped_statement -> final_assign SEMI .)
    FOR             reduce using rule 23 (scoped_statement -> final_assign SEMI .)
    PRINT           reduce using rule 23 (scoped_statement -> final_assign SEMI .)
    SCANSTR         reduce using rule 23 (scoped_statement -> final_assign SEMI .)
    SCANNUM         reduce using rule 23 (scoped_statement -> final_assign SEMI .)
    RETURN          reduce using rule 23 (scoped_statement -> final_assign SEMI .)
    ID              reduce using rule 23 (scoped_statement -> final_assign SEMI .)
    STRING          reduce using rule 23 (scoped_statement -> final_assign SEMI .)
    NOT             reduce using rule 23 (scoped_statement -> final_assign SEMI .)
    NULL            reduce using rule 23 (scoped_statement -> final_assign SEMI .)
    PLUS            reduce using rule 23 (scoped_statement -> final_assign SEMI .)
    MINUS           reduce using rule 23 (scoped_statement -> final_assign SEMI .)
    INTEGER         reduce using rule 23 (scoped_statement -> final_assign SEMI .)
    FLOAT           reduce using rule 23 (scoped_statement -> final_assign SEMI .)
    LPAREN          reduce using rule 23 (scoped_statement -> final_assign SEMI .)
    BOOLEAN         reduce using rule 23 (scoped_statement -> final_assign SEMI .)
    RBRACE          reduce using rule 23 (scoped_statement -> final_assign SEMI .)


state 221

    (24) scoped_statement -> var_compound_assign SEMI .

    FINAL           reduce using rule 24 (scoped_statement -> var_compound_assign SEMI .)
    FN              reduce using rule 24 (scoped_statement -> var_compound_assign SEMI .)
    SWITCH          reduce using rule 24 (scoped_statement -> var_compound_assign SEMI .)
    IF              reduce using rule 24 (scoped_statement -> var_compound_assign SEMI .)
    WHILE           reduce using rule 24 (scoped_statement -> var_compound_assign SEMI .)
    FOR             reduce using rule 24 (scoped_statement -> var_compound_assign SEMI .)
    PRINT           reduce using rule 24 (scoped_statement -> var_compound_assign SEMI .)
    SCANSTR         reduce using rule 24 (scoped_statement -> var_compound_assign SEMI .)
    SCANNUM         reduce using rule 24 (scoped_statement -> var_compound_assign SEMI .)
    RETURN          reduce using rule 24 (scoped_statement -> var_compound_assign SEMI .)
    ID              reduce using rule 24 (scoped_statement -> var_compound_assign SEMI .)
    STRING          reduce using rule 24 (scoped_statement -> var_compound_assign SEMI .)
    NOT             reduce using rule 24 (scoped_statement -> var_compound_assign SEMI .)
    NULL            reduce using rule 24 (scoped_statement -> var_compound_assign SEMI .)
    PLUS            reduce using rule 24 (scoped_statement -> var_compound_assign SEMI .)
    MINUS           reduce using rule 24 (scoped_statement -> var_compound_assign SEMI .)
    INTEGER         reduce using rule 24 (scoped_statement -> var_compound_assign SEMI .)
    FLOAT           reduce using rule 24 (scoped_statement -> var_compound_assign SEMI .)
    LPAREN          reduce using rule 24 (scoped_statement -> var_compound_assign SEMI .)
    BOOLEAN         reduce using rule 24 (scoped_statement -> var_compound_assign SEMI .)
    RBRACE          reduce using rule 24 (scoped_statement -> var_compound_assign SEMI .)


state 222

    (25) scoped_statement -> concat_assign SEMI .

    FINAL           reduce using rule 25 (scoped_statement -> concat_assign SEMI .)
    FN              reduce using rule 25 (scoped_statement -> concat_assign SEMI .)
    SWITCH          reduce using rule 25 (scoped_statement -> concat_assign SEMI .)
    IF              reduce using rule 25 (scoped_statement -> concat_assign SEMI .)
    WHILE           reduce using rule 25 (scoped_statement -> concat_assign SEMI .)
    FOR             reduce using rule 25 (scoped_statement -> concat_assign SEMI .)
    PRINT           reduce using rule 25 (scoped_statement -> concat_assign SEMI .)
    SCANSTR         reduce using rule 25 (scoped_statement -> concat_assign SEMI .)
    SCANNUM         reduce using rule 25 (scoped_statement -> concat_assign SEMI .)
    RETURN          reduce using rule 25 (scoped_statement -> concat_assign SEMI .)
    ID              reduce using rule 25 (scoped_statement -> concat_assign SEMI .)
    STRING          reduce using rule 25 (scoped_statement -> concat_assign SEMI .)
    NOT             reduce using rule 25 (scoped_statement -> concat_assign SEMI .)
    NULL            reduce using rule 25 (scoped_statement -> concat_assign SEMI .)
    PLUS            reduce using rule 25 (scoped_statement -> concat_assign SEMI .)
    MINUS           reduce using rule 25 (scoped_statement -> concat_assign SEMI .)
    INTEGER         reduce using rule 25 (scoped_statement -> concat_assign SEMI .)
    FLOAT           reduce using rule 25 (scoped_statement -> concat_assign SEMI .)
    LPAREN          reduce using rule 25 (scoped_statement -> concat_assign SEMI .)
    BOOLEAN         reduce using rule 25 (scoped_statement -> concat_assign SEMI .)
    RBRACE          reduce using rule 25 (scoped_statement -> concat_assign SEMI .)


state 223

    (26) scoped_statement -> var_auto SEMI .

    FINAL           reduce using rule 26 (scoped_statement -> var_auto SEMI .)
    FN              reduce using rule 26 (scoped_statement -> var_auto SEMI .)
    SWITCH          reduce using rule 26 (scoped_statement -> var_auto SEMI .)
    IF              reduce using rule 26 (scoped_statement -> var_auto SEMI .)
    WHILE           reduce using rule 26 (scoped_statement -> var_auto SEMI .)
    FOR             reduce using rule 26 (scoped_statement -> var_auto SEMI .)
    PRINT           reduce using rule 26 (scoped_statement -> var_auto SEMI .)
    SCANSTR         reduce using rule 26 (scoped_statement -> var_auto SEMI .)
    SCANNUM         reduce using rule 26 (scoped_statement -> var_auto SEMI .)
    RETURN          reduce using rule 26 (scoped_statement -> var_auto SEMI .)
    ID              reduce using rule 26 (scoped_statement -> var_auto SEMI .)
    STRING          reduce using rule 26 (scoped_statement -> var_auto SEMI .)
    NOT             reduce using rule 26 (scoped_statement -> var_auto SEMI .)
    NULL            reduce using rule 26 (scoped_statement -> var_auto SEMI .)
    PLUS            reduce using rule 26 (scoped_statement -> var_auto SEMI .)
    MINUS           reduce using rule 26 (scoped_statement -> var_auto SEMI .)
    INTEGER         reduce using rule 26 (scoped_statement -> var_auto SEMI .)
    FLOAT           reduce using rule 26 (scoped_statement -> var_auto SEMI .)
    LPAREN          reduce using rule 26 (scoped_statement -> var_auto SEMI .)
    BOOLEAN         reduce using rule 26 (scoped_statement -> var_auto SEMI .)
    RBRACE          reduce using rule 26 (scoped_statement -> var_auto SEMI .)


state 224

    (27) scoped_statement -> expr SEMI .

    FINAL           reduce using rule 27 (scoped_statement -> expr SEMI .)
    FN              reduce using rule 27 (scoped_statement -> expr SEMI .)
    SWITCH          reduce using rule 27 (scoped_statement -> expr SEMI .)
    IF              reduce using rule 27 (scoped_statement -> expr SEMI .)
    WHILE           reduce using rule 27 (scoped_statement -> expr SEMI .)
    FOR             reduce using rule 27 (scoped_statement -> expr SEMI .)
    PRINT           reduce using rule 27 (scoped_statement -> expr SEMI .)
    SCANSTR         reduce using rule 27 (scoped_statement -> expr SEMI .)
    SCANNUM         reduce using rule 27 (scoped_statement -> expr SEMI .)
    RETURN          reduce using rule 27 (scoped_statement -> expr SEMI .)
    ID              reduce using rule 27 (scoped_statement -> expr SEMI .)
    STRING          reduce using rule 27 (scoped_statement -> expr SEMI .)
    NOT             reduce using rule 27 (scoped_statement -> expr SEMI .)
    NULL            reduce using rule 27 (scoped_statement -> expr SEMI .)
    PLUS            reduce using rule 27 (scoped_statement -> expr SEMI .)
    MINUS           reduce using rule 27 (scoped_statement -> expr SEMI .)
    INTEGER         reduce using rule 27 (scoped_statement -> expr SEMI .)
    FLOAT           reduce using rule 27 (scoped_statement -> expr SEMI .)
    LPAREN          reduce using rule 27 (scoped_statement -> expr SEMI .)
    BOOLEAN         reduce using rule 27 (scoped_statement -> expr SEMI .)
    RBRACE          reduce using rule 27 (scoped_statement -> expr SEMI .)


state 225

    (33) scoped_statement -> print_stmt SEMI .

    FINAL           reduce using rule 33 (scoped_statement -> print_stmt SEMI .)
    FN              reduce using rule 33 (scoped_statement -> print_stmt SEMI .)
    SWITCH          reduce using rule 33 (scoped_statement -> print_stmt SEMI .)
    IF              reduce using rule 33 (scoped_statement -> print_stmt SEMI .)
    WHILE           reduce using rule 33 (scoped_statement -> print_stmt SEMI .)
    FOR             reduce using rule 33 (scoped_statement -> print_stmt SEMI .)
    PRINT           reduce using rule 33 (scoped_statement -> print_stmt SEMI .)
    SCANSTR         reduce using rule 33 (scoped_statement -> print_stmt SEMI .)
    SCANNUM         reduce using rule 33 (scoped_statement -> print_stmt SEMI .)
    RETURN          reduce using rule 33 (scoped_statement -> print_stmt SEMI .)
    ID              reduce using rule 33 (scoped_statement -> print_stmt SEMI .)
    STRING          reduce using rule 33 (scoped_statement -> print_stmt SEMI .)
    NOT             reduce using rule 33 (scoped_statement -> print_stmt SEMI .)
    NULL            reduce using rule 33 (scoped_statement -> print_stmt SEMI .)
    PLUS            reduce using rule 33 (scoped_statement -> print_stmt SEMI .)
    MINUS           reduce using rule 33 (scoped_statement -> print_stmt SEMI .)
    INTEGER         reduce using rule 33 (scoped_statement -> print_stmt SEMI .)
    FLOAT           reduce using rule 33 (scoped_statement -> print_stmt SEMI .)
    LPAREN          reduce using rule 33 (scoped_statement -> print_stmt SEMI .)
    BOOLEAN         reduce using rule 33 (scoped_statement -> print_stmt SEMI .)
    RBRACE          reduce using rule 33 (scoped_statement -> print_stmt SEMI .)


state 226

    (34) scoped_statement -> scan_stmt SEMI .

    FINAL           reduce using rule 34 (scoped_statement -> scan_stmt SEMI .)
    FN              reduce using rule 34 (scoped_statement -> scan_stmt SEMI .)
    SWITCH          reduce using rule 34 (scoped_statement -> scan_stmt SEMI .)
    IF              reduce using rule 34 (scoped_statement -> scan_stmt SEMI .)
    WHILE           reduce using rule 34 (scoped_statement -> scan_stmt SEMI .)
    FOR             reduce using rule 34 (scoped_statement -> scan_stmt SEMI .)
    PRINT           reduce using rule 34 (scoped_statement -> scan_stmt SEMI .)
    SCANSTR         reduce using rule 34 (scoped_statement -> scan_stmt SEMI .)
    SCANNUM         reduce using rule 34 (scoped_statement -> scan_stmt SEMI .)
    RETURN          reduce using rule 34 (scoped_statement -> scan_stmt SEMI .)
    ID              reduce using rule 34 (scoped_statement -> scan_stmt SEMI .)
    STRING          reduce using rule 34 (scoped_statement -> scan_stmt SEMI .)
    NOT             reduce using rule 34 (scoped_statement -> scan_stmt SEMI .)
    NULL            reduce using rule 34 (scoped_statement -> scan_stmt SEMI .)
    PLUS            reduce using rule 34 (scoped_statement -> scan_stmt SEMI .)
    MINUS           reduce using rule 34 (scoped_statement -> scan_stmt SEMI .)
    INTEGER         reduce using rule 34 (scoped_statement -> scan_stmt SEMI .)
    FLOAT           reduce using rule 34 (scoped_statement -> scan_stmt SEMI .)
    LPAREN          reduce using rule 34 (scoped_statement -> scan_stmt SEMI .)
    BOOLEAN         reduce using rule 34 (scoped_statement -> scan_stmt SEMI .)
    RBRACE          reduce using rule 34 (scoped_statement -> scan_stmt SEMI .)


state 227

    (35) scoped_statement -> return SEMI .

    FINAL           reduce using rule 35 (scoped_statement -> return SEMI .)
    FN              reduce using rule 35 (scoped_statement -> return SEMI .)
    SWITCH          reduce using rule 35 (scoped_statement -> return SEMI .)
    IF              reduce using rule 35 (scoped_statement -> return SEMI .)
    WHILE           reduce using rule 35 (scoped_statement -> return SEMI .)
    FOR             reduce using rule 35 (scoped_statement -> return SEMI .)
    PRINT           reduce using rule 35 (scoped_statement -> return SEMI .)
    SCANSTR         reduce using rule 35 (scoped_statement -> return SEMI .)
    SCANNUM         reduce using rule 35 (scoped_statement -> return SEMI .)
    RETURN          reduce using rule 35 (scoped_statement -> return SEMI .)
    ID              reduce using rule 35 (scoped_statement -> return SEMI .)
    STRING          reduce using rule 35 (scoped_statement -> return SEMI .)
    NOT             reduce using rule 35 (scoped_statement -> return SEMI .)
    NULL            reduce using rule 35 (scoped_statement -> return SEMI .)
    PLUS            reduce using rule 35 (scoped_statement -> return SEMI .)
    MINUS           reduce using rule 35 (scoped_statement -> return SEMI .)
    INTEGER         reduce using rule 35 (scoped_statement -> return SEMI .)
    FLOAT           reduce using rule 35 (scoped_statement -> return SEMI .)
    LPAREN          reduce using rule 35 (scoped_statement -> return SEMI .)
    BOOLEAN         reduce using rule 35 (scoped_statement -> return SEMI .)
    RBRACE          reduce using rule 35 (scoped_statement -> return SEMI .)


state 228

    (58) scoped_switch_stmt -> SWITCH LPAREN . var RPAREN LBRACE scoped_case RBRACE
    (75) var -> . ID

    ID              shift and go to state 36

    var                            shift and go to state 241

state 229

    (63) scoped_if_stmt -> IF LPAREN . boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr
    (75) var -> . ID
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var

    NOT             shift and go to state 41
    LPAREN          shift and go to state 106
    BOOLEAN         shift and go to state 46
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45

    boolean_expr                   shift and go to state 242
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47
    var                            shift and go to state 107
    expr                           shift and go to state 92
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40

state 230

    (68) scoped_while_stmt -> WHILE LPAREN . boolean_expr RPAREN LBRACE scoped_block RBRACE
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr
    (75) var -> . ID
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var

    NOT             shift and go to state 41
    LPAREN          shift and go to state 106
    BOOLEAN         shift and go to state 46
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45

    boolean_expr                   shift and go to state 243
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47
    var                            shift and go to state 107
    expr                           shift and go to state 92
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40

state 231

    (69) scoped_for_stmt -> FOR LPAREN . var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (76) var_assign -> . var ASSIGN expr
    (75) var -> . ID

    ID              shift and go to state 36

    var_assign                     shift and go to state 244
    var                            shift and go to state 148

state 232

    (37) return -> RETURN expr .
    (121) comparison -> expr . EQ expr
    (122) comparison -> expr . NE expr
    (123) comparison -> expr . LT expr
    (124) comparison -> expr . GT expr
    (125) comparison -> expr . LE expr
    (126) comparison -> expr . GE expr

    SEMI            reduce using rule 37 (return -> RETURN expr .)
    EQ              shift and go to state 55
    NE              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60


state 233

    (49) case -> CASE expr LBRACE . block RBRACE case
    (2) block -> . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . concat_assign SEMI
    (9) statement -> . var_auto SEMI
    (10) statement -> . expr SEMI
    (11) statement -> . func_stmt
    (12) statement -> . switch_stmt
    (13) statement -> . if_stmt
    (14) statement -> . while_stmt
    (15) statement -> . for_stmt
    (16) statement -> . print_stmt SEMI
    (17) statement -> . scan_stmt SEMI
    (18) statement -> . empty
    (129) empty -> .
    (76) var_assign -> . var ASSIGN expr
    (77) final_assign -> . FINAL var ASSIGN expr
    (78) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (79) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (80) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (81) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (82) var_compound_assign -> . var POWER_ASSIGN num_expr
    (83) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (84) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (87) concat_assign -> . var CONCAT_ASSIGN string_expr
    (85) var_auto -> . var INCREMENT
    (86) var_auto -> . var DECREMENT
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (38) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (48) switch_stmt -> . SWITCH LPAREN var RPAREN LBRACE case RBRACE
    (53) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (73) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (74) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (70) print_stmt -> . PRINT LPAREN expr RPAREN
    (71) scan_stmt -> . SCANSTR LPAREN var RPAREN
    (72) scan_stmt -> . SCANNUM LPAREN var RPAREN
    (75) var -> . ID
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for SCANSTR resolved as shift
  ! shift/reduce conflict for SCANNUM resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 129 (empty -> .)
    FINAL           shift and go to state 20
    FN              shift and go to state 27
    SWITCH          shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    SCANSTR         shift and go to state 34
    SCANNUM         shift and go to state 35
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

  ! FINAL           [ reduce using rule 129 (empty -> .) ]
  ! FN              [ reduce using rule 129 (empty -> .) ]
  ! SWITCH          [ reduce using rule 129 (empty -> .) ]
  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! PRINT           [ reduce using rule 129 (empty -> .) ]
  ! SCANSTR         [ reduce using rule 129 (empty -> .) ]
  ! SCANNUM         [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! STRING          [ reduce using rule 129 (empty -> .) ]
  ! NOT             [ reduce using rule 129 (empty -> .) ]
  ! NULL            [ reduce using rule 129 (empty -> .) ]
  ! PLUS            [ reduce using rule 129 (empty -> .) ]
  ! MINUS           [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]
  ! FLOAT           [ reduce using rule 129 (empty -> .) ]
  ! LPAREN          [ reduce using rule 129 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 129 (empty -> .) ]

    expr                           shift and go to state 11
    block                          shift and go to state 245
    statement_list                 shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 5
    var_assign                     shift and go to state 6
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    concat_assign                  shift and go to state 9
    var_auto                       shift and go to state 10
    func_stmt                      shift and go to state 12
    switch_stmt                    shift and go to state 13
    if_stmt                        shift and go to state 14
    while_stmt                     shift and go to state 15
    for_stmt                       shift and go to state 16
    print_stmt                     shift and go to state 17
    scan_stmt                      shift and go to state 18
    var                            shift and go to state 19
    num_expr                       shift and go to state 21
    string_expr                    shift and go to state 22
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 234

    (52) default_case -> DEFAULT LBRACE block . RBRACE

    RBRACE          shift and go to state 246


state 235

    (53) if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .

    FINAL           reduce using rule 53 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    FN              reduce using rule 53 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    SWITCH          reduce using rule 53 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    IF              reduce using rule 53 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    WHILE           reduce using rule 53 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    FOR             reduce using rule 53 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    PRINT           reduce using rule 53 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    SCANSTR         reduce using rule 53 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    SCANNUM         reduce using rule 53 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    ID              reduce using rule 53 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    STRING          reduce using rule 53 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    NOT             reduce using rule 53 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    NULL            reduce using rule 53 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    PLUS            reduce using rule 53 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    MINUS           reduce using rule 53 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    INTEGER         reduce using rule 53 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    FLOAT           reduce using rule 53 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    LPAREN          reduce using rule 53 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    BOOLEAN         reduce using rule 53 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    $end            reduce using rule 53 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    RBRACE          reduce using rule 53 (if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)


state 236

    (54) elif_stmt -> ELIF . LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt

    LPAREN          shift and go to state 247


state 237

    (55) elif_stmt -> else_stmt .

    FINAL           reduce using rule 55 (elif_stmt -> else_stmt .)
    FN              reduce using rule 55 (elif_stmt -> else_stmt .)
    SWITCH          reduce using rule 55 (elif_stmt -> else_stmt .)
    IF              reduce using rule 55 (elif_stmt -> else_stmt .)
    WHILE           reduce using rule 55 (elif_stmt -> else_stmt .)
    FOR             reduce using rule 55 (elif_stmt -> else_stmt .)
    PRINT           reduce using rule 55 (elif_stmt -> else_stmt .)
    SCANSTR         reduce using rule 55 (elif_stmt -> else_stmt .)
    SCANNUM         reduce using rule 55 (elif_stmt -> else_stmt .)
    ID              reduce using rule 55 (elif_stmt -> else_stmt .)
    STRING          reduce using rule 55 (elif_stmt -> else_stmt .)
    NOT             reduce using rule 55 (elif_stmt -> else_stmt .)
    NULL            reduce using rule 55 (elif_stmt -> else_stmt .)
    PLUS            reduce using rule 55 (elif_stmt -> else_stmt .)
    MINUS           reduce using rule 55 (elif_stmt -> else_stmt .)
    INTEGER         reduce using rule 55 (elif_stmt -> else_stmt .)
    FLOAT           reduce using rule 55 (elif_stmt -> else_stmt .)
    LPAREN          reduce using rule 55 (elif_stmt -> else_stmt .)
    BOOLEAN         reduce using rule 55 (elif_stmt -> else_stmt .)
    $end            reduce using rule 55 (elif_stmt -> else_stmt .)
    RBRACE          reduce using rule 55 (elif_stmt -> else_stmt .)


state 238

    (56) elif_stmt -> empty .

    FINAL           reduce using rule 56 (elif_stmt -> empty .)
    FN              reduce using rule 56 (elif_stmt -> empty .)
    SWITCH          reduce using rule 56 (elif_stmt -> empty .)
    IF              reduce using rule 56 (elif_stmt -> empty .)
    WHILE           reduce using rule 56 (elif_stmt -> empty .)
    FOR             reduce using rule 56 (elif_stmt -> empty .)
    PRINT           reduce using rule 56 (elif_stmt -> empty .)
    SCANSTR         reduce using rule 56 (elif_stmt -> empty .)
    SCANNUM         reduce using rule 56 (elif_stmt -> empty .)
    ID              reduce using rule 56 (elif_stmt -> empty .)
    STRING          reduce using rule 56 (elif_stmt -> empty .)
    NOT             reduce using rule 56 (elif_stmt -> empty .)
    NULL            reduce using rule 56 (elif_stmt -> empty .)
    PLUS            reduce using rule 56 (elif_stmt -> empty .)
    MINUS           reduce using rule 56 (elif_stmt -> empty .)
    INTEGER         reduce using rule 56 (elif_stmt -> empty .)
    FLOAT           reduce using rule 56 (elif_stmt -> empty .)
    LPAREN          reduce using rule 56 (elif_stmt -> empty .)
    BOOLEAN         reduce using rule 56 (elif_stmt -> empty .)
    $end            reduce using rule 56 (elif_stmt -> empty .)
    RBRACE          reduce using rule 56 (elif_stmt -> empty .)


state 239

    (57) else_stmt -> ELSE . LBRACE block RBRACE

    LBRACE          shift and go to state 248


state 240

    (74) for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN . LBRACE block RBRACE

    LBRACE          shift and go to state 249


state 241

    (58) scoped_switch_stmt -> SWITCH LPAREN var . RPAREN LBRACE scoped_case RBRACE

    RPAREN          shift and go to state 250


state 242

    (63) scoped_if_stmt -> IF LPAREN boolean_expr . RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (113) boolean_expr -> boolean_expr . AND boolean_expr
    (114) boolean_expr -> boolean_expr . OR boolean_expr
    (90) expr -> boolean_expr .
    (128) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    RPAREN          shift and go to state 251
    AND             shift and go to state 84
    OR              shift and go to state 85
    EQ              reduce using rule 90 (expr -> boolean_expr .)
    NE              reduce using rule 90 (expr -> boolean_expr .)
    LT              reduce using rule 90 (expr -> boolean_expr .)
    GT              reduce using rule 90 (expr -> boolean_expr .)
    LE              reduce using rule 90 (expr -> boolean_expr .)
    GE              reduce using rule 90 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 86


state 243

    (68) scoped_while_stmt -> WHILE LPAREN boolean_expr . RPAREN LBRACE scoped_block RBRACE
    (113) boolean_expr -> boolean_expr . AND boolean_expr
    (114) boolean_expr -> boolean_expr . OR boolean_expr
    (90) expr -> boolean_expr .
    (128) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    RPAREN          shift and go to state 252
    AND             shift and go to state 84
    OR              shift and go to state 85
    EQ              reduce using rule 90 (expr -> boolean_expr .)
    NE              reduce using rule 90 (expr -> boolean_expr .)
    LT              reduce using rule 90 (expr -> boolean_expr .)
    GT              reduce using rule 90 (expr -> boolean_expr .)
    LE              reduce using rule 90 (expr -> boolean_expr .)
    GE              reduce using rule 90 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 86


state 244

    (69) scoped_for_stmt -> FOR LPAREN var_assign . SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE

    SEMI            shift and go to state 253


state 245

    (49) case -> CASE expr LBRACE block . RBRACE case

    RBRACE          shift and go to state 254


state 246

    (52) default_case -> DEFAULT LBRACE block RBRACE .

    RBRACE          reduce using rule 52 (default_case -> DEFAULT LBRACE block RBRACE .)


state 247

    (54) elif_stmt -> ELIF LPAREN . boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr
    (75) var -> . ID
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var

    NOT             shift and go to state 41
    LPAREN          shift and go to state 106
    BOOLEAN         shift and go to state 46
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45

    boolean_expr                   shift and go to state 255
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47
    var                            shift and go to state 107
    expr                           shift and go to state 92
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40

state 248

    (57) else_stmt -> ELSE LBRACE . block RBRACE
    (2) block -> . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . concat_assign SEMI
    (9) statement -> . var_auto SEMI
    (10) statement -> . expr SEMI
    (11) statement -> . func_stmt
    (12) statement -> . switch_stmt
    (13) statement -> . if_stmt
    (14) statement -> . while_stmt
    (15) statement -> . for_stmt
    (16) statement -> . print_stmt SEMI
    (17) statement -> . scan_stmt SEMI
    (18) statement -> . empty
    (129) empty -> .
    (76) var_assign -> . var ASSIGN expr
    (77) final_assign -> . FINAL var ASSIGN expr
    (78) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (79) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (80) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (81) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (82) var_compound_assign -> . var POWER_ASSIGN num_expr
    (83) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (84) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (87) concat_assign -> . var CONCAT_ASSIGN string_expr
    (85) var_auto -> . var INCREMENT
    (86) var_auto -> . var DECREMENT
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (38) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (48) switch_stmt -> . SWITCH LPAREN var RPAREN LBRACE case RBRACE
    (53) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (73) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (74) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (70) print_stmt -> . PRINT LPAREN expr RPAREN
    (71) scan_stmt -> . SCANSTR LPAREN var RPAREN
    (72) scan_stmt -> . SCANNUM LPAREN var RPAREN
    (75) var -> . ID
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for SCANSTR resolved as shift
  ! shift/reduce conflict for SCANNUM resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 129 (empty -> .)
    FINAL           shift and go to state 20
    FN              shift and go to state 27
    SWITCH          shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    SCANSTR         shift and go to state 34
    SCANNUM         shift and go to state 35
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

  ! FINAL           [ reduce using rule 129 (empty -> .) ]
  ! FN              [ reduce using rule 129 (empty -> .) ]
  ! SWITCH          [ reduce using rule 129 (empty -> .) ]
  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! PRINT           [ reduce using rule 129 (empty -> .) ]
  ! SCANSTR         [ reduce using rule 129 (empty -> .) ]
  ! SCANNUM         [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! STRING          [ reduce using rule 129 (empty -> .) ]
  ! NOT             [ reduce using rule 129 (empty -> .) ]
  ! NULL            [ reduce using rule 129 (empty -> .) ]
  ! PLUS            [ reduce using rule 129 (empty -> .) ]
  ! MINUS           [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]
  ! FLOAT           [ reduce using rule 129 (empty -> .) ]
  ! LPAREN          [ reduce using rule 129 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 129 (empty -> .) ]

    block                          shift and go to state 256
    statement_list                 shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 5
    var_assign                     shift and go to state 6
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    concat_assign                  shift and go to state 9
    var_auto                       shift and go to state 10
    expr                           shift and go to state 11
    func_stmt                      shift and go to state 12
    switch_stmt                    shift and go to state 13
    if_stmt                        shift and go to state 14
    while_stmt                     shift and go to state 15
    for_stmt                       shift and go to state 16
    print_stmt                     shift and go to state 17
    scan_stmt                      shift and go to state 18
    var                            shift and go to state 19
    num_expr                       shift and go to state 21
    string_expr                    shift and go to state 22
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 249

    (74) for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE . block RBRACE
    (2) block -> . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . concat_assign SEMI
    (9) statement -> . var_auto SEMI
    (10) statement -> . expr SEMI
    (11) statement -> . func_stmt
    (12) statement -> . switch_stmt
    (13) statement -> . if_stmt
    (14) statement -> . while_stmt
    (15) statement -> . for_stmt
    (16) statement -> . print_stmt SEMI
    (17) statement -> . scan_stmt SEMI
    (18) statement -> . empty
    (129) empty -> .
    (76) var_assign -> . var ASSIGN expr
    (77) final_assign -> . FINAL var ASSIGN expr
    (78) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (79) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (80) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (81) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (82) var_compound_assign -> . var POWER_ASSIGN num_expr
    (83) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (84) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (87) concat_assign -> . var CONCAT_ASSIGN string_expr
    (85) var_auto -> . var INCREMENT
    (86) var_auto -> . var DECREMENT
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (38) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (48) switch_stmt -> . SWITCH LPAREN var RPAREN LBRACE case RBRACE
    (53) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (73) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (74) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (70) print_stmt -> . PRINT LPAREN expr RPAREN
    (71) scan_stmt -> . SCANSTR LPAREN var RPAREN
    (72) scan_stmt -> . SCANNUM LPAREN var RPAREN
    (75) var -> . ID
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for SCANSTR resolved as shift
  ! shift/reduce conflict for SCANNUM resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 129 (empty -> .)
    FINAL           shift and go to state 20
    FN              shift and go to state 27
    SWITCH          shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    SCANSTR         shift and go to state 34
    SCANNUM         shift and go to state 35
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

  ! FINAL           [ reduce using rule 129 (empty -> .) ]
  ! FN              [ reduce using rule 129 (empty -> .) ]
  ! SWITCH          [ reduce using rule 129 (empty -> .) ]
  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! PRINT           [ reduce using rule 129 (empty -> .) ]
  ! SCANSTR         [ reduce using rule 129 (empty -> .) ]
  ! SCANNUM         [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! STRING          [ reduce using rule 129 (empty -> .) ]
  ! NOT             [ reduce using rule 129 (empty -> .) ]
  ! NULL            [ reduce using rule 129 (empty -> .) ]
  ! PLUS            [ reduce using rule 129 (empty -> .) ]
  ! MINUS           [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]
  ! FLOAT           [ reduce using rule 129 (empty -> .) ]
  ! LPAREN          [ reduce using rule 129 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 129 (empty -> .) ]

    var_assign                     shift and go to state 6
    boolean_expr                   shift and go to state 23
    var_auto                       shift and go to state 10
    block                          shift and go to state 257
    statement_list                 shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 5
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    concat_assign                  shift and go to state 9
    expr                           shift and go to state 11
    func_stmt                      shift and go to state 12
    switch_stmt                    shift and go to state 13
    if_stmt                        shift and go to state 14
    while_stmt                     shift and go to state 15
    for_stmt                       shift and go to state 16
    print_stmt                     shift and go to state 17
    scan_stmt                      shift and go to state 18
    var                            shift and go to state 19
    num_expr                       shift and go to state 21
    string_expr                    shift and go to state 22
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 250

    (58) scoped_switch_stmt -> SWITCH LPAREN var RPAREN . LBRACE scoped_case RBRACE

    LBRACE          shift and go to state 258


state 251

    (63) scoped_if_stmt -> IF LPAREN boolean_expr RPAREN . LBRACE scoped_block RBRACE scoped_elif_stmt

    LBRACE          shift and go to state 259


state 252

    (68) scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN . LBRACE scoped_block RBRACE

    LBRACE          shift and go to state 260


state 253

    (69) scoped_for_stmt -> FOR LPAREN var_assign SEMI . boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr
    (75) var -> . ID
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var

    NOT             shift and go to state 41
    LPAREN          shift and go to state 106
    BOOLEAN         shift and go to state 46
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45

    boolean_expr                   shift and go to state 261
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47
    var                            shift and go to state 107
    expr                           shift and go to state 92
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40

state 254

    (49) case -> CASE expr LBRACE block RBRACE . case
    (49) case -> . CASE expr LBRACE block RBRACE case
    (50) case -> . default_case
    (51) case -> . empty
    (52) default_case -> . DEFAULT LBRACE block RBRACE
    (129) empty -> .

    CASE            shift and go to state 180
    DEFAULT         shift and go to state 183
    RBRACE          reduce using rule 129 (empty -> .)

    case                           shift and go to state 262
    default_case                   shift and go to state 181
    empty                          shift and go to state 182

state 255

    (54) elif_stmt -> ELIF LPAREN boolean_expr . RPAREN LBRACE block RBRACE elif_stmt
    (113) boolean_expr -> boolean_expr . AND boolean_expr
    (114) boolean_expr -> boolean_expr . OR boolean_expr
    (90) expr -> boolean_expr .
    (128) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    RPAREN          shift and go to state 263
    AND             shift and go to state 84
    OR              shift and go to state 85
    EQ              reduce using rule 90 (expr -> boolean_expr .)
    NE              reduce using rule 90 (expr -> boolean_expr .)
    LT              reduce using rule 90 (expr -> boolean_expr .)
    GT              reduce using rule 90 (expr -> boolean_expr .)
    LE              reduce using rule 90 (expr -> boolean_expr .)
    GE              reduce using rule 90 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 86


state 256

    (57) else_stmt -> ELSE LBRACE block . RBRACE

    RBRACE          shift and go to state 264


state 257

    (74) for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block . RBRACE

    RBRACE          shift and go to state 265


state 258

    (58) scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE . scoped_case RBRACE
    (59) scoped_case -> . CASE expr LBRACE scoped_block RBRACE scoped_case
    (60) scoped_case -> . scoped_default_case
    (61) scoped_case -> . empty
    (62) scoped_default_case -> . DEFAULT LBRACE scoped_block RBRACE
    (129) empty -> .

    CASE            shift and go to state 267
    DEFAULT         shift and go to state 270
    RBRACE          reduce using rule 129 (empty -> .)

    scoped_case                    shift and go to state 266
    scoped_default_case            shift and go to state 268
    empty                          shift and go to state 269

state 259

    (63) scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE . scoped_block RBRACE scoped_elif_stmt
    (19) scoped_block -> . scoped_statement_list
    (20) scoped_statement_list -> . scoped_statement scoped_statement_list
    (21) scoped_statement_list -> . empty
    (22) scoped_statement -> . var_assign SEMI
    (23) scoped_statement -> . final_assign SEMI
    (24) scoped_statement -> . var_compound_assign SEMI
    (25) scoped_statement -> . concat_assign SEMI
    (26) scoped_statement -> . var_auto SEMI
    (27) scoped_statement -> . expr SEMI
    (28) scoped_statement -> . func_stmt
    (29) scoped_statement -> . scoped_switch_stmt
    (30) scoped_statement -> . scoped_if_stmt
    (31) scoped_statement -> . scoped_while_stmt
    (32) scoped_statement -> . scoped_for_stmt
    (33) scoped_statement -> . print_stmt SEMI
    (34) scoped_statement -> . scan_stmt SEMI
    (35) scoped_statement -> . return SEMI
    (36) scoped_statement -> . empty
    (129) empty -> .
    (76) var_assign -> . var ASSIGN expr
    (77) final_assign -> . FINAL var ASSIGN expr
    (78) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (79) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (80) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (81) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (82) var_compound_assign -> . var POWER_ASSIGN num_expr
    (83) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (84) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (87) concat_assign -> . var CONCAT_ASSIGN string_expr
    (85) var_auto -> . var INCREMENT
    (86) var_auto -> . var DECREMENT
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (38) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (58) scoped_switch_stmt -> . SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE
    (63) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (68) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (69) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (70) print_stmt -> . PRINT LPAREN expr RPAREN
    (71) scan_stmt -> . SCANSTR LPAREN var RPAREN
    (72) scan_stmt -> . SCANNUM LPAREN var RPAREN
    (37) return -> . RETURN expr
    (75) var -> . ID
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for SCANSTR resolved as shift
  ! shift/reduce conflict for SCANNUM resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 129 (empty -> .)
    FINAL           shift and go to state 20
    FN              shift and go to state 27
    SWITCH          shift and go to state 205
    IF              shift and go to state 206
    WHILE           shift and go to state 207
    FOR             shift and go to state 208
    PRINT           shift and go to state 33
    SCANSTR         shift and go to state 34
    SCANNUM         shift and go to state 35
    RETURN          shift and go to state 209
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

  ! FINAL           [ reduce using rule 129 (empty -> .) ]
  ! FN              [ reduce using rule 129 (empty -> .) ]
  ! SWITCH          [ reduce using rule 129 (empty -> .) ]
  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! PRINT           [ reduce using rule 129 (empty -> .) ]
  ! SCANSTR         [ reduce using rule 129 (empty -> .) ]
  ! SCANNUM         [ reduce using rule 129 (empty -> .) ]
  ! RETURN          [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! STRING          [ reduce using rule 129 (empty -> .) ]
  ! NOT             [ reduce using rule 129 (empty -> .) ]
  ! NULL            [ reduce using rule 129 (empty -> .) ]
  ! PLUS            [ reduce using rule 129 (empty -> .) ]
  ! MINUS           [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]
  ! FLOAT           [ reduce using rule 129 (empty -> .) ]
  ! LPAREN          [ reduce using rule 129 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 129 (empty -> .) ]

    boolean_expr                   shift and go to state 23
    scoped_block                   shift and go to state 271
    scoped_statement_list          shift and go to state 188
    scoped_statement               shift and go to state 189
    empty                          shift and go to state 190
    var_assign                     shift and go to state 191
    final_assign                   shift and go to state 192
    var_compound_assign            shift and go to state 193
    concat_assign                  shift and go to state 194
    var_auto                       shift and go to state 195
    expr                           shift and go to state 196
    func_stmt                      shift and go to state 197
    scoped_switch_stmt             shift and go to state 198
    scoped_if_stmt                 shift and go to state 199
    scoped_while_stmt              shift and go to state 200
    scoped_for_stmt                shift and go to state 201
    print_stmt                     shift and go to state 202
    scan_stmt                      shift and go to state 203
    return                         shift and go to state 204
    var                            shift and go to state 19
    num_expr                       shift and go to state 21
    string_expr                    shift and go to state 22
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 260

    (68) scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE . scoped_block RBRACE
    (19) scoped_block -> . scoped_statement_list
    (20) scoped_statement_list -> . scoped_statement scoped_statement_list
    (21) scoped_statement_list -> . empty
    (22) scoped_statement -> . var_assign SEMI
    (23) scoped_statement -> . final_assign SEMI
    (24) scoped_statement -> . var_compound_assign SEMI
    (25) scoped_statement -> . concat_assign SEMI
    (26) scoped_statement -> . var_auto SEMI
    (27) scoped_statement -> . expr SEMI
    (28) scoped_statement -> . func_stmt
    (29) scoped_statement -> . scoped_switch_stmt
    (30) scoped_statement -> . scoped_if_stmt
    (31) scoped_statement -> . scoped_while_stmt
    (32) scoped_statement -> . scoped_for_stmt
    (33) scoped_statement -> . print_stmt SEMI
    (34) scoped_statement -> . scan_stmt SEMI
    (35) scoped_statement -> . return SEMI
    (36) scoped_statement -> . empty
    (129) empty -> .
    (76) var_assign -> . var ASSIGN expr
    (77) final_assign -> . FINAL var ASSIGN expr
    (78) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (79) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (80) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (81) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (82) var_compound_assign -> . var POWER_ASSIGN num_expr
    (83) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (84) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (87) concat_assign -> . var CONCAT_ASSIGN string_expr
    (85) var_auto -> . var INCREMENT
    (86) var_auto -> . var DECREMENT
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (38) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (58) scoped_switch_stmt -> . SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE
    (63) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (68) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (69) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (70) print_stmt -> . PRINT LPAREN expr RPAREN
    (71) scan_stmt -> . SCANSTR LPAREN var RPAREN
    (72) scan_stmt -> . SCANNUM LPAREN var RPAREN
    (37) return -> . RETURN expr
    (75) var -> . ID
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for SCANSTR resolved as shift
  ! shift/reduce conflict for SCANNUM resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 129 (empty -> .)
    FINAL           shift and go to state 20
    FN              shift and go to state 27
    SWITCH          shift and go to state 205
    IF              shift and go to state 206
    WHILE           shift and go to state 207
    FOR             shift and go to state 208
    PRINT           shift and go to state 33
    SCANSTR         shift and go to state 34
    SCANNUM         shift and go to state 35
    RETURN          shift and go to state 209
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

  ! FINAL           [ reduce using rule 129 (empty -> .) ]
  ! FN              [ reduce using rule 129 (empty -> .) ]
  ! SWITCH          [ reduce using rule 129 (empty -> .) ]
  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! PRINT           [ reduce using rule 129 (empty -> .) ]
  ! SCANSTR         [ reduce using rule 129 (empty -> .) ]
  ! SCANNUM         [ reduce using rule 129 (empty -> .) ]
  ! RETURN          [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! STRING          [ reduce using rule 129 (empty -> .) ]
  ! NOT             [ reduce using rule 129 (empty -> .) ]
  ! NULL            [ reduce using rule 129 (empty -> .) ]
  ! PLUS            [ reduce using rule 129 (empty -> .) ]
  ! MINUS           [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]
  ! FLOAT           [ reduce using rule 129 (empty -> .) ]
  ! LPAREN          [ reduce using rule 129 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 129 (empty -> .) ]

    boolean_expr                   shift and go to state 23
    scoped_block                   shift and go to state 272
    scoped_statement_list          shift and go to state 188
    scoped_statement               shift and go to state 189
    empty                          shift and go to state 190
    var_assign                     shift and go to state 191
    final_assign                   shift and go to state 192
    var_compound_assign            shift and go to state 193
    concat_assign                  shift and go to state 194
    var_auto                       shift and go to state 195
    expr                           shift and go to state 196
    func_stmt                      shift and go to state 197
    scoped_switch_stmt             shift and go to state 198
    scoped_if_stmt                 shift and go to state 199
    scoped_while_stmt              shift and go to state 200
    scoped_for_stmt                shift and go to state 201
    print_stmt                     shift and go to state 202
    scan_stmt                      shift and go to state 203
    return                         shift and go to state 204
    var                            shift and go to state 19
    num_expr                       shift and go to state 21
    string_expr                    shift and go to state 22
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 261

    (69) scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr . SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (113) boolean_expr -> boolean_expr . AND boolean_expr
    (114) boolean_expr -> boolean_expr . OR boolean_expr
    (90) expr -> boolean_expr .
    (128) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    SEMI            shift and go to state 273
    AND             shift and go to state 84
    OR              shift and go to state 85
    EQ              reduce using rule 90 (expr -> boolean_expr .)
    NE              reduce using rule 90 (expr -> boolean_expr .)
    LT              reduce using rule 90 (expr -> boolean_expr .)
    GT              reduce using rule 90 (expr -> boolean_expr .)
    LE              reduce using rule 90 (expr -> boolean_expr .)
    GE              reduce using rule 90 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 86


state 262

    (49) case -> CASE expr LBRACE block RBRACE case .

    RBRACE          reduce using rule 49 (case -> CASE expr LBRACE block RBRACE case .)


state 263

    (54) elif_stmt -> ELIF LPAREN boolean_expr RPAREN . LBRACE block RBRACE elif_stmt

    LBRACE          shift and go to state 274


state 264

    (57) else_stmt -> ELSE LBRACE block RBRACE .

    FINAL           reduce using rule 57 (else_stmt -> ELSE LBRACE block RBRACE .)
    FN              reduce using rule 57 (else_stmt -> ELSE LBRACE block RBRACE .)
    SWITCH          reduce using rule 57 (else_stmt -> ELSE LBRACE block RBRACE .)
    IF              reduce using rule 57 (else_stmt -> ELSE LBRACE block RBRACE .)
    WHILE           reduce using rule 57 (else_stmt -> ELSE LBRACE block RBRACE .)
    FOR             reduce using rule 57 (else_stmt -> ELSE LBRACE block RBRACE .)
    PRINT           reduce using rule 57 (else_stmt -> ELSE LBRACE block RBRACE .)
    SCANSTR         reduce using rule 57 (else_stmt -> ELSE LBRACE block RBRACE .)
    SCANNUM         reduce using rule 57 (else_stmt -> ELSE LBRACE block RBRACE .)
    ID              reduce using rule 57 (else_stmt -> ELSE LBRACE block RBRACE .)
    STRING          reduce using rule 57 (else_stmt -> ELSE LBRACE block RBRACE .)
    NOT             reduce using rule 57 (else_stmt -> ELSE LBRACE block RBRACE .)
    NULL            reduce using rule 57 (else_stmt -> ELSE LBRACE block RBRACE .)
    PLUS            reduce using rule 57 (else_stmt -> ELSE LBRACE block RBRACE .)
    MINUS           reduce using rule 57 (else_stmt -> ELSE LBRACE block RBRACE .)
    INTEGER         reduce using rule 57 (else_stmt -> ELSE LBRACE block RBRACE .)
    FLOAT           reduce using rule 57 (else_stmt -> ELSE LBRACE block RBRACE .)
    LPAREN          reduce using rule 57 (else_stmt -> ELSE LBRACE block RBRACE .)
    BOOLEAN         reduce using rule 57 (else_stmt -> ELSE LBRACE block RBRACE .)
    $end            reduce using rule 57 (else_stmt -> ELSE LBRACE block RBRACE .)
    RBRACE          reduce using rule 57 (else_stmt -> ELSE LBRACE block RBRACE .)


state 265

    (74) for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .

    FINAL           reduce using rule 74 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    FN              reduce using rule 74 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    SWITCH          reduce using rule 74 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    IF              reduce using rule 74 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    WHILE           reduce using rule 74 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    FOR             reduce using rule 74 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    PRINT           reduce using rule 74 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    SCANSTR         reduce using rule 74 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    SCANNUM         reduce using rule 74 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    ID              reduce using rule 74 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    STRING          reduce using rule 74 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    NOT             reduce using rule 74 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    NULL            reduce using rule 74 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    PLUS            reduce using rule 74 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    MINUS           reduce using rule 74 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    INTEGER         reduce using rule 74 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    FLOAT           reduce using rule 74 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    LPAREN          reduce using rule 74 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    BOOLEAN         reduce using rule 74 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    $end            reduce using rule 74 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)
    RBRACE          reduce using rule 74 (for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE .)


state 266

    (58) scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case . RBRACE

    RBRACE          shift and go to state 275


state 267

    (59) scoped_case -> CASE . expr LBRACE scoped_block RBRACE scoped_case
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (75) var -> . ID
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    ID              shift and go to state 36
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

    expr                           shift and go to state 276
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    var                            shift and go to state 109
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 268

    (60) scoped_case -> scoped_default_case .

    RBRACE          reduce using rule 60 (scoped_case -> scoped_default_case .)


state 269

    (61) scoped_case -> empty .

    RBRACE          reduce using rule 61 (scoped_case -> empty .)


state 270

    (62) scoped_default_case -> DEFAULT . LBRACE scoped_block RBRACE

    LBRACE          shift and go to state 277


state 271

    (63) scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block . RBRACE scoped_elif_stmt

    RBRACE          shift and go to state 278


state 272

    (68) scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block . RBRACE

    RBRACE          shift and go to state 279


state 273

    (69) scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI . var_auto RPAREN LBRACE scoped_block RBRACE
    (85) var_auto -> . var INCREMENT
    (86) var_auto -> . var DECREMENT
    (75) var -> . ID

    ID              shift and go to state 36

    var_auto                       shift and go to state 280
    var                            shift and go to state 216

state 274

    (54) elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE . block RBRACE elif_stmt
    (2) block -> . statement_list
    (3) statement_list -> . statement statement_list
    (4) statement_list -> . empty
    (5) statement -> . var_assign SEMI
    (6) statement -> . final_assign SEMI
    (7) statement -> . var_compound_assign SEMI
    (8) statement -> . concat_assign SEMI
    (9) statement -> . var_auto SEMI
    (10) statement -> . expr SEMI
    (11) statement -> . func_stmt
    (12) statement -> . switch_stmt
    (13) statement -> . if_stmt
    (14) statement -> . while_stmt
    (15) statement -> . for_stmt
    (16) statement -> . print_stmt SEMI
    (17) statement -> . scan_stmt SEMI
    (18) statement -> . empty
    (129) empty -> .
    (76) var_assign -> . var ASSIGN expr
    (77) final_assign -> . FINAL var ASSIGN expr
    (78) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (79) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (80) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (81) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (82) var_compound_assign -> . var POWER_ASSIGN num_expr
    (83) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (84) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (87) concat_assign -> . var CONCAT_ASSIGN string_expr
    (85) var_auto -> . var INCREMENT
    (86) var_auto -> . var DECREMENT
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (38) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (48) switch_stmt -> . SWITCH LPAREN var RPAREN LBRACE case RBRACE
    (53) if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (73) while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE
    (74) for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE
    (70) print_stmt -> . PRINT LPAREN expr RPAREN
    (71) scan_stmt -> . SCANSTR LPAREN var RPAREN
    (72) scan_stmt -> . SCANNUM LPAREN var RPAREN
    (75) var -> . ID
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for SCANSTR resolved as shift
  ! shift/reduce conflict for SCANNUM resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 129 (empty -> .)
    FINAL           shift and go to state 20
    FN              shift and go to state 27
    SWITCH          shift and go to state 29
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    SCANSTR         shift and go to state 34
    SCANNUM         shift and go to state 35
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

  ! FINAL           [ reduce using rule 129 (empty -> .) ]
  ! FN              [ reduce using rule 129 (empty -> .) ]
  ! SWITCH          [ reduce using rule 129 (empty -> .) ]
  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! PRINT           [ reduce using rule 129 (empty -> .) ]
  ! SCANSTR         [ reduce using rule 129 (empty -> .) ]
  ! SCANNUM         [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! STRING          [ reduce using rule 129 (empty -> .) ]
  ! NOT             [ reduce using rule 129 (empty -> .) ]
  ! NULL            [ reduce using rule 129 (empty -> .) ]
  ! PLUS            [ reduce using rule 129 (empty -> .) ]
  ! MINUS           [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]
  ! FLOAT           [ reduce using rule 129 (empty -> .) ]
  ! LPAREN          [ reduce using rule 129 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 129 (empty -> .) ]

    boolean_expr                   shift and go to state 23
    block                          shift and go to state 281
    statement_list                 shift and go to state 3
    statement                      shift and go to state 4
    empty                          shift and go to state 5
    var_assign                     shift and go to state 6
    final_assign                   shift and go to state 7
    var_compound_assign            shift and go to state 8
    concat_assign                  shift and go to state 9
    var_auto                       shift and go to state 10
    expr                           shift and go to state 11
    func_stmt                      shift and go to state 12
    switch_stmt                    shift and go to state 13
    if_stmt                        shift and go to state 14
    while_stmt                     shift and go to state 15
    for_stmt                       shift and go to state 16
    print_stmt                     shift and go to state 17
    scan_stmt                      shift and go to state 18
    var                            shift and go to state 19
    num_expr                       shift and go to state 21
    string_expr                    shift and go to state 22
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 275

    (58) scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE .

    FINAL           reduce using rule 58 (scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE .)
    FN              reduce using rule 58 (scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE .)
    SWITCH          reduce using rule 58 (scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE .)
    IF              reduce using rule 58 (scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE .)
    WHILE           reduce using rule 58 (scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE .)
    FOR             reduce using rule 58 (scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE .)
    PRINT           reduce using rule 58 (scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE .)
    SCANSTR         reduce using rule 58 (scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE .)
    SCANNUM         reduce using rule 58 (scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE .)
    RETURN          reduce using rule 58 (scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE .)
    ID              reduce using rule 58 (scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE .)
    STRING          reduce using rule 58 (scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE .)
    NOT             reduce using rule 58 (scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE .)
    NULL            reduce using rule 58 (scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE .)
    PLUS            reduce using rule 58 (scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE .)
    MINUS           reduce using rule 58 (scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE .)
    INTEGER         reduce using rule 58 (scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE .)
    FLOAT           reduce using rule 58 (scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE .)
    LPAREN          reduce using rule 58 (scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE .)
    BOOLEAN         reduce using rule 58 (scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE .)
    RBRACE          reduce using rule 58 (scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE .)


state 276

    (59) scoped_case -> CASE expr . LBRACE scoped_block RBRACE scoped_case
    (121) comparison -> expr . EQ expr
    (122) comparison -> expr . NE expr
    (123) comparison -> expr . LT expr
    (124) comparison -> expr . GT expr
    (125) comparison -> expr . LE expr
    (126) comparison -> expr . GE expr

    LBRACE          shift and go to state 282
    EQ              shift and go to state 55
    NE              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60


state 277

    (62) scoped_default_case -> DEFAULT LBRACE . scoped_block RBRACE
    (19) scoped_block -> . scoped_statement_list
    (20) scoped_statement_list -> . scoped_statement scoped_statement_list
    (21) scoped_statement_list -> . empty
    (22) scoped_statement -> . var_assign SEMI
    (23) scoped_statement -> . final_assign SEMI
    (24) scoped_statement -> . var_compound_assign SEMI
    (25) scoped_statement -> . concat_assign SEMI
    (26) scoped_statement -> . var_auto SEMI
    (27) scoped_statement -> . expr SEMI
    (28) scoped_statement -> . func_stmt
    (29) scoped_statement -> . scoped_switch_stmt
    (30) scoped_statement -> . scoped_if_stmt
    (31) scoped_statement -> . scoped_while_stmt
    (32) scoped_statement -> . scoped_for_stmt
    (33) scoped_statement -> . print_stmt SEMI
    (34) scoped_statement -> . scan_stmt SEMI
    (35) scoped_statement -> . return SEMI
    (36) scoped_statement -> . empty
    (129) empty -> .
    (76) var_assign -> . var ASSIGN expr
    (77) final_assign -> . FINAL var ASSIGN expr
    (78) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (79) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (80) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (81) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (82) var_compound_assign -> . var POWER_ASSIGN num_expr
    (83) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (84) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (87) concat_assign -> . var CONCAT_ASSIGN string_expr
    (85) var_auto -> . var INCREMENT
    (86) var_auto -> . var DECREMENT
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (38) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (58) scoped_switch_stmt -> . SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE
    (63) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (68) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (69) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (70) print_stmt -> . PRINT LPAREN expr RPAREN
    (71) scan_stmt -> . SCANSTR LPAREN var RPAREN
    (72) scan_stmt -> . SCANNUM LPAREN var RPAREN
    (37) return -> . RETURN expr
    (75) var -> . ID
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for SCANSTR resolved as shift
  ! shift/reduce conflict for SCANNUM resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 129 (empty -> .)
    FINAL           shift and go to state 20
    FN              shift and go to state 27
    SWITCH          shift and go to state 205
    IF              shift and go to state 206
    WHILE           shift and go to state 207
    FOR             shift and go to state 208
    PRINT           shift and go to state 33
    SCANSTR         shift and go to state 34
    SCANNUM         shift and go to state 35
    RETURN          shift and go to state 209
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

  ! FINAL           [ reduce using rule 129 (empty -> .) ]
  ! FN              [ reduce using rule 129 (empty -> .) ]
  ! SWITCH          [ reduce using rule 129 (empty -> .) ]
  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! PRINT           [ reduce using rule 129 (empty -> .) ]
  ! SCANSTR         [ reduce using rule 129 (empty -> .) ]
  ! SCANNUM         [ reduce using rule 129 (empty -> .) ]
  ! RETURN          [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! STRING          [ reduce using rule 129 (empty -> .) ]
  ! NOT             [ reduce using rule 129 (empty -> .) ]
  ! NULL            [ reduce using rule 129 (empty -> .) ]
  ! PLUS            [ reduce using rule 129 (empty -> .) ]
  ! MINUS           [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]
  ! FLOAT           [ reduce using rule 129 (empty -> .) ]
  ! LPAREN          [ reduce using rule 129 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 129 (empty -> .) ]

    scoped_block                   shift and go to state 283
    scoped_statement_list          shift and go to state 188
    scoped_statement               shift and go to state 189
    empty                          shift and go to state 190
    var_assign                     shift and go to state 191
    final_assign                   shift and go to state 192
    var_compound_assign            shift and go to state 193
    concat_assign                  shift and go to state 194
    var_auto                       shift and go to state 195
    expr                           shift and go to state 196
    func_stmt                      shift and go to state 197
    scoped_switch_stmt             shift and go to state 198
    scoped_if_stmt                 shift and go to state 199
    scoped_while_stmt              shift and go to state 200
    scoped_for_stmt                shift and go to state 201
    print_stmt                     shift and go to state 202
    scan_stmt                      shift and go to state 203
    return                         shift and go to state 204
    var                            shift and go to state 19
    num_expr                       shift and go to state 21
    string_expr                    shift and go to state 22
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 278

    (63) scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE . scoped_elif_stmt
    (64) scoped_elif_stmt -> . ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (65) scoped_elif_stmt -> . scoped_else_stmt
    (66) scoped_elif_stmt -> . empty
    (67) scoped_else_stmt -> . ELSE LBRACE scoped_block RBRACE
    (129) empty -> .

    ELIF            shift and go to state 285
    ELSE            shift and go to state 288
    FINAL           reduce using rule 129 (empty -> .)
    FN              reduce using rule 129 (empty -> .)
    SWITCH          reduce using rule 129 (empty -> .)
    IF              reduce using rule 129 (empty -> .)
    WHILE           reduce using rule 129 (empty -> .)
    FOR             reduce using rule 129 (empty -> .)
    PRINT           reduce using rule 129 (empty -> .)
    SCANSTR         reduce using rule 129 (empty -> .)
    SCANNUM         reduce using rule 129 (empty -> .)
    RETURN          reduce using rule 129 (empty -> .)
    ID              reduce using rule 129 (empty -> .)
    STRING          reduce using rule 129 (empty -> .)
    NOT             reduce using rule 129 (empty -> .)
    NULL            reduce using rule 129 (empty -> .)
    PLUS            reduce using rule 129 (empty -> .)
    MINUS           reduce using rule 129 (empty -> .)
    INTEGER         reduce using rule 129 (empty -> .)
    FLOAT           reduce using rule 129 (empty -> .)
    LPAREN          reduce using rule 129 (empty -> .)
    BOOLEAN         reduce using rule 129 (empty -> .)
    RBRACE          reduce using rule 129 (empty -> .)

    scoped_elif_stmt               shift and go to state 284
    scoped_else_stmt               shift and go to state 286
    empty                          shift and go to state 287

state 279

    (68) scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .

    FINAL           reduce using rule 68 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    FN              reduce using rule 68 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    SWITCH          reduce using rule 68 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    IF              reduce using rule 68 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    WHILE           reduce using rule 68 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    FOR             reduce using rule 68 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    PRINT           reduce using rule 68 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    SCANSTR         reduce using rule 68 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    SCANNUM         reduce using rule 68 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    RETURN          reduce using rule 68 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    ID              reduce using rule 68 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    STRING          reduce using rule 68 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    NOT             reduce using rule 68 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    NULL            reduce using rule 68 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    PLUS            reduce using rule 68 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    MINUS           reduce using rule 68 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    INTEGER         reduce using rule 68 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    FLOAT           reduce using rule 68 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    LPAREN          reduce using rule 68 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    BOOLEAN         reduce using rule 68 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)
    RBRACE          reduce using rule 68 (scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE .)


state 280

    (69) scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto . RPAREN LBRACE scoped_block RBRACE

    RPAREN          shift and go to state 289


state 281

    (54) elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block . RBRACE elif_stmt

    RBRACE          shift and go to state 290


state 282

    (59) scoped_case -> CASE expr LBRACE . scoped_block RBRACE scoped_case
    (19) scoped_block -> . scoped_statement_list
    (20) scoped_statement_list -> . scoped_statement scoped_statement_list
    (21) scoped_statement_list -> . empty
    (22) scoped_statement -> . var_assign SEMI
    (23) scoped_statement -> . final_assign SEMI
    (24) scoped_statement -> . var_compound_assign SEMI
    (25) scoped_statement -> . concat_assign SEMI
    (26) scoped_statement -> . var_auto SEMI
    (27) scoped_statement -> . expr SEMI
    (28) scoped_statement -> . func_stmt
    (29) scoped_statement -> . scoped_switch_stmt
    (30) scoped_statement -> . scoped_if_stmt
    (31) scoped_statement -> . scoped_while_stmt
    (32) scoped_statement -> . scoped_for_stmt
    (33) scoped_statement -> . print_stmt SEMI
    (34) scoped_statement -> . scan_stmt SEMI
    (35) scoped_statement -> . return SEMI
    (36) scoped_statement -> . empty
    (129) empty -> .
    (76) var_assign -> . var ASSIGN expr
    (77) final_assign -> . FINAL var ASSIGN expr
    (78) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (79) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (80) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (81) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (82) var_compound_assign -> . var POWER_ASSIGN num_expr
    (83) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (84) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (87) concat_assign -> . var CONCAT_ASSIGN string_expr
    (85) var_auto -> . var INCREMENT
    (86) var_auto -> . var DECREMENT
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (38) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (58) scoped_switch_stmt -> . SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE
    (63) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (68) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (69) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (70) print_stmt -> . PRINT LPAREN expr RPAREN
    (71) scan_stmt -> . SCANSTR LPAREN var RPAREN
    (72) scan_stmt -> . SCANNUM LPAREN var RPAREN
    (37) return -> . RETURN expr
    (75) var -> . ID
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for SCANSTR resolved as shift
  ! shift/reduce conflict for SCANNUM resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 129 (empty -> .)
    FINAL           shift and go to state 20
    FN              shift and go to state 27
    SWITCH          shift and go to state 205
    IF              shift and go to state 206
    WHILE           shift and go to state 207
    FOR             shift and go to state 208
    PRINT           shift and go to state 33
    SCANSTR         shift and go to state 34
    SCANNUM         shift and go to state 35
    RETURN          shift and go to state 209
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

  ! FINAL           [ reduce using rule 129 (empty -> .) ]
  ! FN              [ reduce using rule 129 (empty -> .) ]
  ! SWITCH          [ reduce using rule 129 (empty -> .) ]
  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! PRINT           [ reduce using rule 129 (empty -> .) ]
  ! SCANSTR         [ reduce using rule 129 (empty -> .) ]
  ! SCANNUM         [ reduce using rule 129 (empty -> .) ]
  ! RETURN          [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! STRING          [ reduce using rule 129 (empty -> .) ]
  ! NOT             [ reduce using rule 129 (empty -> .) ]
  ! NULL            [ reduce using rule 129 (empty -> .) ]
  ! PLUS            [ reduce using rule 129 (empty -> .) ]
  ! MINUS           [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]
  ! FLOAT           [ reduce using rule 129 (empty -> .) ]
  ! LPAREN          [ reduce using rule 129 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 129 (empty -> .) ]

    expr                           shift and go to state 196
    scoped_block                   shift and go to state 291
    scoped_statement_list          shift and go to state 188
    scoped_statement               shift and go to state 189
    empty                          shift and go to state 190
    var_assign                     shift and go to state 191
    final_assign                   shift and go to state 192
    var_compound_assign            shift and go to state 193
    concat_assign                  shift and go to state 194
    var_auto                       shift and go to state 195
    func_stmt                      shift and go to state 197
    scoped_switch_stmt             shift and go to state 198
    scoped_if_stmt                 shift and go to state 199
    scoped_while_stmt              shift and go to state 200
    scoped_for_stmt                shift and go to state 201
    print_stmt                     shift and go to state 202
    scan_stmt                      shift and go to state 203
    return                         shift and go to state 204
    var                            shift and go to state 19
    num_expr                       shift and go to state 21
    string_expr                    shift and go to state 22
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 283

    (62) scoped_default_case -> DEFAULT LBRACE scoped_block . RBRACE

    RBRACE          shift and go to state 292


state 284

    (63) scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .

    FINAL           reduce using rule 63 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    FN              reduce using rule 63 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    SWITCH          reduce using rule 63 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    IF              reduce using rule 63 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    WHILE           reduce using rule 63 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    FOR             reduce using rule 63 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    PRINT           reduce using rule 63 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    SCANSTR         reduce using rule 63 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    SCANNUM         reduce using rule 63 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    RETURN          reduce using rule 63 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    ID              reduce using rule 63 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    STRING          reduce using rule 63 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    NOT             reduce using rule 63 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    NULL            reduce using rule 63 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    PLUS            reduce using rule 63 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    MINUS           reduce using rule 63 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    INTEGER         reduce using rule 63 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    FLOAT           reduce using rule 63 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    LPAREN          reduce using rule 63 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    BOOLEAN         reduce using rule 63 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    RBRACE          reduce using rule 63 (scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)


state 285

    (64) scoped_elif_stmt -> ELIF . LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt

    LPAREN          shift and go to state 293


state 286

    (65) scoped_elif_stmt -> scoped_else_stmt .

    FINAL           reduce using rule 65 (scoped_elif_stmt -> scoped_else_stmt .)
    FN              reduce using rule 65 (scoped_elif_stmt -> scoped_else_stmt .)
    SWITCH          reduce using rule 65 (scoped_elif_stmt -> scoped_else_stmt .)
    IF              reduce using rule 65 (scoped_elif_stmt -> scoped_else_stmt .)
    WHILE           reduce using rule 65 (scoped_elif_stmt -> scoped_else_stmt .)
    FOR             reduce using rule 65 (scoped_elif_stmt -> scoped_else_stmt .)
    PRINT           reduce using rule 65 (scoped_elif_stmt -> scoped_else_stmt .)
    SCANSTR         reduce using rule 65 (scoped_elif_stmt -> scoped_else_stmt .)
    SCANNUM         reduce using rule 65 (scoped_elif_stmt -> scoped_else_stmt .)
    RETURN          reduce using rule 65 (scoped_elif_stmt -> scoped_else_stmt .)
    ID              reduce using rule 65 (scoped_elif_stmt -> scoped_else_stmt .)
    STRING          reduce using rule 65 (scoped_elif_stmt -> scoped_else_stmt .)
    NOT             reduce using rule 65 (scoped_elif_stmt -> scoped_else_stmt .)
    NULL            reduce using rule 65 (scoped_elif_stmt -> scoped_else_stmt .)
    PLUS            reduce using rule 65 (scoped_elif_stmt -> scoped_else_stmt .)
    MINUS           reduce using rule 65 (scoped_elif_stmt -> scoped_else_stmt .)
    INTEGER         reduce using rule 65 (scoped_elif_stmt -> scoped_else_stmt .)
    FLOAT           reduce using rule 65 (scoped_elif_stmt -> scoped_else_stmt .)
    LPAREN          reduce using rule 65 (scoped_elif_stmt -> scoped_else_stmt .)
    BOOLEAN         reduce using rule 65 (scoped_elif_stmt -> scoped_else_stmt .)
    RBRACE          reduce using rule 65 (scoped_elif_stmt -> scoped_else_stmt .)


state 287

    (66) scoped_elif_stmt -> empty .

    FINAL           reduce using rule 66 (scoped_elif_stmt -> empty .)
    FN              reduce using rule 66 (scoped_elif_stmt -> empty .)
    SWITCH          reduce using rule 66 (scoped_elif_stmt -> empty .)
    IF              reduce using rule 66 (scoped_elif_stmt -> empty .)
    WHILE           reduce using rule 66 (scoped_elif_stmt -> empty .)
    FOR             reduce using rule 66 (scoped_elif_stmt -> empty .)
    PRINT           reduce using rule 66 (scoped_elif_stmt -> empty .)
    SCANSTR         reduce using rule 66 (scoped_elif_stmt -> empty .)
    SCANNUM         reduce using rule 66 (scoped_elif_stmt -> empty .)
    RETURN          reduce using rule 66 (scoped_elif_stmt -> empty .)
    ID              reduce using rule 66 (scoped_elif_stmt -> empty .)
    STRING          reduce using rule 66 (scoped_elif_stmt -> empty .)
    NOT             reduce using rule 66 (scoped_elif_stmt -> empty .)
    NULL            reduce using rule 66 (scoped_elif_stmt -> empty .)
    PLUS            reduce using rule 66 (scoped_elif_stmt -> empty .)
    MINUS           reduce using rule 66 (scoped_elif_stmt -> empty .)
    INTEGER         reduce using rule 66 (scoped_elif_stmt -> empty .)
    FLOAT           reduce using rule 66 (scoped_elif_stmt -> empty .)
    LPAREN          reduce using rule 66 (scoped_elif_stmt -> empty .)
    BOOLEAN         reduce using rule 66 (scoped_elif_stmt -> empty .)
    RBRACE          reduce using rule 66 (scoped_elif_stmt -> empty .)


state 288

    (67) scoped_else_stmt -> ELSE . LBRACE scoped_block RBRACE

    LBRACE          shift and go to state 294


state 289

    (69) scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN . LBRACE scoped_block RBRACE

    LBRACE          shift and go to state 295


state 290

    (54) elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE . elif_stmt
    (54) elif_stmt -> . ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt
    (55) elif_stmt -> . else_stmt
    (56) elif_stmt -> . empty
    (57) else_stmt -> . ELSE LBRACE block RBRACE
    (129) empty -> .

    ELIF            shift and go to state 236
    ELSE            shift and go to state 239
    FINAL           reduce using rule 129 (empty -> .)
    FN              reduce using rule 129 (empty -> .)
    SWITCH          reduce using rule 129 (empty -> .)
    IF              reduce using rule 129 (empty -> .)
    WHILE           reduce using rule 129 (empty -> .)
    FOR             reduce using rule 129 (empty -> .)
    PRINT           reduce using rule 129 (empty -> .)
    SCANSTR         reduce using rule 129 (empty -> .)
    SCANNUM         reduce using rule 129 (empty -> .)
    ID              reduce using rule 129 (empty -> .)
    STRING          reduce using rule 129 (empty -> .)
    NOT             reduce using rule 129 (empty -> .)
    NULL            reduce using rule 129 (empty -> .)
    PLUS            reduce using rule 129 (empty -> .)
    MINUS           reduce using rule 129 (empty -> .)
    INTEGER         reduce using rule 129 (empty -> .)
    FLOAT           reduce using rule 129 (empty -> .)
    LPAREN          reduce using rule 129 (empty -> .)
    BOOLEAN         reduce using rule 129 (empty -> .)
    $end            reduce using rule 129 (empty -> .)
    RBRACE          reduce using rule 129 (empty -> .)

    elif_stmt                      shift and go to state 296
    else_stmt                      shift and go to state 237
    empty                          shift and go to state 238

state 291

    (59) scoped_case -> CASE expr LBRACE scoped_block . RBRACE scoped_case

    RBRACE          shift and go to state 297


state 292

    (62) scoped_default_case -> DEFAULT LBRACE scoped_block RBRACE .

    RBRACE          reduce using rule 62 (scoped_default_case -> DEFAULT LBRACE scoped_block RBRACE .)


state 293

    (64) scoped_elif_stmt -> ELIF LPAREN . boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr
    (75) var -> . ID
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var

    NOT             shift and go to state 41
    LPAREN          shift and go to state 106
    BOOLEAN         shift and go to state 46
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45

    boolean_expr                   shift and go to state 298
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47
    var                            shift and go to state 107
    expr                           shift and go to state 92
    string_expr                    shift and go to state 22
    num_expr                       shift and go to state 21
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40

state 294

    (67) scoped_else_stmt -> ELSE LBRACE . scoped_block RBRACE
    (19) scoped_block -> . scoped_statement_list
    (20) scoped_statement_list -> . scoped_statement scoped_statement_list
    (21) scoped_statement_list -> . empty
    (22) scoped_statement -> . var_assign SEMI
    (23) scoped_statement -> . final_assign SEMI
    (24) scoped_statement -> . var_compound_assign SEMI
    (25) scoped_statement -> . concat_assign SEMI
    (26) scoped_statement -> . var_auto SEMI
    (27) scoped_statement -> . expr SEMI
    (28) scoped_statement -> . func_stmt
    (29) scoped_statement -> . scoped_switch_stmt
    (30) scoped_statement -> . scoped_if_stmt
    (31) scoped_statement -> . scoped_while_stmt
    (32) scoped_statement -> . scoped_for_stmt
    (33) scoped_statement -> . print_stmt SEMI
    (34) scoped_statement -> . scan_stmt SEMI
    (35) scoped_statement -> . return SEMI
    (36) scoped_statement -> . empty
    (129) empty -> .
    (76) var_assign -> . var ASSIGN expr
    (77) final_assign -> . FINAL var ASSIGN expr
    (78) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (79) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (80) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (81) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (82) var_compound_assign -> . var POWER_ASSIGN num_expr
    (83) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (84) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (87) concat_assign -> . var CONCAT_ASSIGN string_expr
    (85) var_auto -> . var INCREMENT
    (86) var_auto -> . var DECREMENT
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (38) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (58) scoped_switch_stmt -> . SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE
    (63) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (68) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (69) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (70) print_stmt -> . PRINT LPAREN expr RPAREN
    (71) scan_stmt -> . SCANSTR LPAREN var RPAREN
    (72) scan_stmt -> . SCANNUM LPAREN var RPAREN
    (37) return -> . RETURN expr
    (75) var -> . ID
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for SCANSTR resolved as shift
  ! shift/reduce conflict for SCANNUM resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 129 (empty -> .)
    FINAL           shift and go to state 20
    FN              shift and go to state 27
    SWITCH          shift and go to state 205
    IF              shift and go to state 206
    WHILE           shift and go to state 207
    FOR             shift and go to state 208
    PRINT           shift and go to state 33
    SCANSTR         shift and go to state 34
    SCANNUM         shift and go to state 35
    RETURN          shift and go to state 209
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

  ! FINAL           [ reduce using rule 129 (empty -> .) ]
  ! FN              [ reduce using rule 129 (empty -> .) ]
  ! SWITCH          [ reduce using rule 129 (empty -> .) ]
  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! PRINT           [ reduce using rule 129 (empty -> .) ]
  ! SCANSTR         [ reduce using rule 129 (empty -> .) ]
  ! SCANNUM         [ reduce using rule 129 (empty -> .) ]
  ! RETURN          [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! STRING          [ reduce using rule 129 (empty -> .) ]
  ! NOT             [ reduce using rule 129 (empty -> .) ]
  ! NULL            [ reduce using rule 129 (empty -> .) ]
  ! PLUS            [ reduce using rule 129 (empty -> .) ]
  ! MINUS           [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]
  ! FLOAT           [ reduce using rule 129 (empty -> .) ]
  ! LPAREN          [ reduce using rule 129 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 129 (empty -> .) ]

    scoped_block                   shift and go to state 299
    scoped_statement_list          shift and go to state 188
    scoped_statement               shift and go to state 189
    empty                          shift and go to state 190
    var_assign                     shift and go to state 191
    final_assign                   shift and go to state 192
    var_compound_assign            shift and go to state 193
    concat_assign                  shift and go to state 194
    var_auto                       shift and go to state 195
    expr                           shift and go to state 196
    func_stmt                      shift and go to state 197
    scoped_switch_stmt             shift and go to state 198
    scoped_if_stmt                 shift and go to state 199
    scoped_while_stmt              shift and go to state 200
    scoped_for_stmt                shift and go to state 201
    print_stmt                     shift and go to state 202
    scan_stmt                      shift and go to state 203
    return                         shift and go to state 204
    var                            shift and go to state 19
    num_expr                       shift and go to state 21
    string_expr                    shift and go to state 22
    boolean_expr                   shift and go to state 23
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 295

    (69) scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE . scoped_block RBRACE
    (19) scoped_block -> . scoped_statement_list
    (20) scoped_statement_list -> . scoped_statement scoped_statement_list
    (21) scoped_statement_list -> . empty
    (22) scoped_statement -> . var_assign SEMI
    (23) scoped_statement -> . final_assign SEMI
    (24) scoped_statement -> . var_compound_assign SEMI
    (25) scoped_statement -> . concat_assign SEMI
    (26) scoped_statement -> . var_auto SEMI
    (27) scoped_statement -> . expr SEMI
    (28) scoped_statement -> . func_stmt
    (29) scoped_statement -> . scoped_switch_stmt
    (30) scoped_statement -> . scoped_if_stmt
    (31) scoped_statement -> . scoped_while_stmt
    (32) scoped_statement -> . scoped_for_stmt
    (33) scoped_statement -> . print_stmt SEMI
    (34) scoped_statement -> . scan_stmt SEMI
    (35) scoped_statement -> . return SEMI
    (36) scoped_statement -> . empty
    (129) empty -> .
    (76) var_assign -> . var ASSIGN expr
    (77) final_assign -> . FINAL var ASSIGN expr
    (78) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (79) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (80) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (81) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (82) var_compound_assign -> . var POWER_ASSIGN num_expr
    (83) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (84) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (87) concat_assign -> . var CONCAT_ASSIGN string_expr
    (85) var_auto -> . var INCREMENT
    (86) var_auto -> . var DECREMENT
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (38) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (58) scoped_switch_stmt -> . SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE
    (63) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (68) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (69) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (70) print_stmt -> . PRINT LPAREN expr RPAREN
    (71) scan_stmt -> . SCANSTR LPAREN var RPAREN
    (72) scan_stmt -> . SCANNUM LPAREN var RPAREN
    (37) return -> . RETURN expr
    (75) var -> . ID
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for SCANSTR resolved as shift
  ! shift/reduce conflict for SCANNUM resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 129 (empty -> .)
    FINAL           shift and go to state 20
    FN              shift and go to state 27
    SWITCH          shift and go to state 205
    IF              shift and go to state 206
    WHILE           shift and go to state 207
    FOR             shift and go to state 208
    PRINT           shift and go to state 33
    SCANSTR         shift and go to state 34
    SCANNUM         shift and go to state 35
    RETURN          shift and go to state 209
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

  ! FINAL           [ reduce using rule 129 (empty -> .) ]
  ! FN              [ reduce using rule 129 (empty -> .) ]
  ! SWITCH          [ reduce using rule 129 (empty -> .) ]
  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! PRINT           [ reduce using rule 129 (empty -> .) ]
  ! SCANSTR         [ reduce using rule 129 (empty -> .) ]
  ! SCANNUM         [ reduce using rule 129 (empty -> .) ]
  ! RETURN          [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! STRING          [ reduce using rule 129 (empty -> .) ]
  ! NOT             [ reduce using rule 129 (empty -> .) ]
  ! NULL            [ reduce using rule 129 (empty -> .) ]
  ! PLUS            [ reduce using rule 129 (empty -> .) ]
  ! MINUS           [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]
  ! FLOAT           [ reduce using rule 129 (empty -> .) ]
  ! LPAREN          [ reduce using rule 129 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 129 (empty -> .) ]

    var_assign                     shift and go to state 191
    boolean_expr                   shift and go to state 23
    var_auto                       shift and go to state 195
    scoped_block                   shift and go to state 300
    scoped_statement_list          shift and go to state 188
    scoped_statement               shift and go to state 189
    empty                          shift and go to state 190
    final_assign                   shift and go to state 192
    var_compound_assign            shift and go to state 193
    concat_assign                  shift and go to state 194
    expr                           shift and go to state 196
    func_stmt                      shift and go to state 197
    scoped_switch_stmt             shift and go to state 198
    scoped_if_stmt                 shift and go to state 199
    scoped_while_stmt              shift and go to state 200
    scoped_for_stmt                shift and go to state 201
    print_stmt                     shift and go to state 202
    scan_stmt                      shift and go to state 203
    return                         shift and go to state 204
    var                            shift and go to state 19
    num_expr                       shift and go to state 21
    string_expr                    shift and go to state 22
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 296

    (54) elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .

    FINAL           reduce using rule 54 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    FN              reduce using rule 54 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    SWITCH          reduce using rule 54 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    IF              reduce using rule 54 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    WHILE           reduce using rule 54 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    FOR             reduce using rule 54 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    PRINT           reduce using rule 54 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    SCANSTR         reduce using rule 54 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    SCANNUM         reduce using rule 54 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    ID              reduce using rule 54 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    STRING          reduce using rule 54 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    NOT             reduce using rule 54 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    NULL            reduce using rule 54 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    PLUS            reduce using rule 54 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    MINUS           reduce using rule 54 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    INTEGER         reduce using rule 54 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    FLOAT           reduce using rule 54 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    LPAREN          reduce using rule 54 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    BOOLEAN         reduce using rule 54 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    $end            reduce using rule 54 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)
    RBRACE          reduce using rule 54 (elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt .)


state 297

    (59) scoped_case -> CASE expr LBRACE scoped_block RBRACE . scoped_case
    (59) scoped_case -> . CASE expr LBRACE scoped_block RBRACE scoped_case
    (60) scoped_case -> . scoped_default_case
    (61) scoped_case -> . empty
    (62) scoped_default_case -> . DEFAULT LBRACE scoped_block RBRACE
    (129) empty -> .

    CASE            shift and go to state 267
    DEFAULT         shift and go to state 270
    RBRACE          reduce using rule 129 (empty -> .)

    scoped_case                    shift and go to state 301
    scoped_default_case            shift and go to state 268
    empty                          shift and go to state 269

state 298

    (64) scoped_elif_stmt -> ELIF LPAREN boolean_expr . RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (113) boolean_expr -> boolean_expr . AND boolean_expr
    (114) boolean_expr -> boolean_expr . OR boolean_expr
    (90) expr -> boolean_expr .
    (128) ternary_expr -> boolean_expr . TERNARY_Q expr TERNARY_C expr

    RPAREN          shift and go to state 302
    AND             shift and go to state 84
    OR              shift and go to state 85
    EQ              reduce using rule 90 (expr -> boolean_expr .)
    NE              reduce using rule 90 (expr -> boolean_expr .)
    LT              reduce using rule 90 (expr -> boolean_expr .)
    GT              reduce using rule 90 (expr -> boolean_expr .)
    LE              reduce using rule 90 (expr -> boolean_expr .)
    GE              reduce using rule 90 (expr -> boolean_expr .)
    TERNARY_Q       shift and go to state 86


state 299

    (67) scoped_else_stmt -> ELSE LBRACE scoped_block . RBRACE

    RBRACE          shift and go to state 303


state 300

    (69) scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block . RBRACE

    RBRACE          shift and go to state 304


state 301

    (59) scoped_case -> CASE expr LBRACE scoped_block RBRACE scoped_case .

    RBRACE          reduce using rule 59 (scoped_case -> CASE expr LBRACE scoped_block RBRACE scoped_case .)


state 302

    (64) scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN . LBRACE scoped_block RBRACE scoped_elif_stmt

    LBRACE          shift and go to state 305


state 303

    (67) scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .

    FINAL           reduce using rule 67 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    FN              reduce using rule 67 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    SWITCH          reduce using rule 67 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    IF              reduce using rule 67 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    WHILE           reduce using rule 67 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    FOR             reduce using rule 67 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    PRINT           reduce using rule 67 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    SCANSTR         reduce using rule 67 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    SCANNUM         reduce using rule 67 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    RETURN          reduce using rule 67 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    ID              reduce using rule 67 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    STRING          reduce using rule 67 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    NOT             reduce using rule 67 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    NULL            reduce using rule 67 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    PLUS            reduce using rule 67 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    MINUS           reduce using rule 67 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    INTEGER         reduce using rule 67 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    FLOAT           reduce using rule 67 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    LPAREN          reduce using rule 67 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    BOOLEAN         reduce using rule 67 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)
    RBRACE          reduce using rule 67 (scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE .)


state 304

    (69) scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .

    FINAL           reduce using rule 69 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    FN              reduce using rule 69 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    SWITCH          reduce using rule 69 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    IF              reduce using rule 69 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    WHILE           reduce using rule 69 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    FOR             reduce using rule 69 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    PRINT           reduce using rule 69 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    SCANSTR         reduce using rule 69 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    SCANNUM         reduce using rule 69 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    RETURN          reduce using rule 69 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    ID              reduce using rule 69 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    STRING          reduce using rule 69 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    NOT             reduce using rule 69 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    NULL            reduce using rule 69 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    PLUS            reduce using rule 69 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    MINUS           reduce using rule 69 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    INTEGER         reduce using rule 69 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    FLOAT           reduce using rule 69 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    LPAREN          reduce using rule 69 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    BOOLEAN         reduce using rule 69 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)
    RBRACE          reduce using rule 69 (scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE .)


state 305

    (64) scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE . scoped_block RBRACE scoped_elif_stmt
    (19) scoped_block -> . scoped_statement_list
    (20) scoped_statement_list -> . scoped_statement scoped_statement_list
    (21) scoped_statement_list -> . empty
    (22) scoped_statement -> . var_assign SEMI
    (23) scoped_statement -> . final_assign SEMI
    (24) scoped_statement -> . var_compound_assign SEMI
    (25) scoped_statement -> . concat_assign SEMI
    (26) scoped_statement -> . var_auto SEMI
    (27) scoped_statement -> . expr SEMI
    (28) scoped_statement -> . func_stmt
    (29) scoped_statement -> . scoped_switch_stmt
    (30) scoped_statement -> . scoped_if_stmt
    (31) scoped_statement -> . scoped_while_stmt
    (32) scoped_statement -> . scoped_for_stmt
    (33) scoped_statement -> . print_stmt SEMI
    (34) scoped_statement -> . scan_stmt SEMI
    (35) scoped_statement -> . return SEMI
    (36) scoped_statement -> . empty
    (129) empty -> .
    (76) var_assign -> . var ASSIGN expr
    (77) final_assign -> . FINAL var ASSIGN expr
    (78) var_compound_assign -> . var PLUS_ASSIGN num_expr
    (79) var_compound_assign -> . var MINUS_ASSIGN num_expr
    (80) var_compound_assign -> . var TIMES_ASSIGN num_expr
    (81) var_compound_assign -> . var DIVIDE_ASSIGN num_expr
    (82) var_compound_assign -> . var POWER_ASSIGN num_expr
    (83) var_compound_assign -> . var MODULO_ASSIGN num_expr
    (84) var_compound_assign -> . var INT_DIVIDE_ASSIGN num_expr
    (87) concat_assign -> . var CONCAT_ASSIGN string_expr
    (85) var_auto -> . var INCREMENT
    (86) var_auto -> . var DECREMENT
    (88) expr -> . string_expr
    (89) expr -> . num_expr
    (90) expr -> . boolean_expr
    (91) expr -> . null_expr
    (92) expr -> . ternary_expr
    (93) expr -> . var
    (94) expr -> . func_call
    (38) func_stmt -> . FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE
    (58) scoped_switch_stmt -> . SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE
    (63) scoped_if_stmt -> . IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (68) scoped_while_stmt -> . WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE
    (69) scoped_for_stmt -> . FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE
    (70) print_stmt -> . PRINT LPAREN expr RPAREN
    (71) scan_stmt -> . SCANSTR LPAREN var RPAREN
    (72) scan_stmt -> . SCANNUM LPAREN var RPAREN
    (37) return -> . RETURN expr
    (75) var -> . ID
    (110) string_expr -> . string_expr CONCAT string_expr
    (111) string_expr -> . STRING
    (112) string_expr -> . var
    (102) num_expr -> . num_expr PLUS num_expr
    (103) num_expr -> . num_expr MINUS num_expr
    (104) num_expr -> . num_expr TIMES num_expr
    (105) num_expr -> . num_expr DIVIDE num_expr
    (106) num_expr -> . num_expr INT_DIVIDE num_expr
    (107) num_expr -> . num_expr POWER num_expr
    (108) num_expr -> . num_expr MODULO num_expr
    (109) num_expr -> . num_factor
    (113) boolean_expr -> . boolean_expr AND boolean_expr
    (114) boolean_expr -> . boolean_expr OR boolean_expr
    (115) boolean_expr -> . NOT boolean_expr
    (116) boolean_expr -> . boolean_factor
    (127) null_expr -> . NULL
    (128) ternary_expr -> . boolean_expr TERNARY_Q expr TERNARY_C expr
    (39) func_call -> . var LPAREN arguments_list RPAREN
    (95) num_factor -> . PLUS num_factor
    (96) num_factor -> . MINUS num_factor
    (97) num_factor -> . INTEGER
    (98) num_factor -> . FLOAT
    (99) num_factor -> . LPAREN num_expr RPAREN
    (100) num_factor -> . func_call
    (101) num_factor -> . var
    (117) boolean_factor -> . LPAREN boolean_expr RPAREN
    (118) boolean_factor -> . BOOLEAN
    (119) boolean_factor -> . comparison
    (120) boolean_factor -> . var
    (121) comparison -> . expr EQ expr
    (122) comparison -> . expr NE expr
    (123) comparison -> . expr LT expr
    (124) comparison -> . expr GT expr
    (125) comparison -> . expr LE expr
    (126) comparison -> . expr GE expr

  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for SCANSTR resolved as shift
  ! shift/reduce conflict for SCANNUM resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    RBRACE          reduce using rule 129 (empty -> .)
    FINAL           shift and go to state 20
    FN              shift and go to state 27
    SWITCH          shift and go to state 205
    IF              shift and go to state 206
    WHILE           shift and go to state 207
    FOR             shift and go to state 208
    PRINT           shift and go to state 33
    SCANSTR         shift and go to state 34
    SCANNUM         shift and go to state 35
    RETURN          shift and go to state 209
    ID              shift and go to state 36
    STRING          shift and go to state 37
    NOT             shift and go to state 41
    NULL            shift and go to state 43
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 28
    BOOLEAN         shift and go to state 46

  ! FINAL           [ reduce using rule 129 (empty -> .) ]
  ! FN              [ reduce using rule 129 (empty -> .) ]
  ! SWITCH          [ reduce using rule 129 (empty -> .) ]
  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! PRINT           [ reduce using rule 129 (empty -> .) ]
  ! SCANSTR         [ reduce using rule 129 (empty -> .) ]
  ! SCANNUM         [ reduce using rule 129 (empty -> .) ]
  ! RETURN          [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! STRING          [ reduce using rule 129 (empty -> .) ]
  ! NOT             [ reduce using rule 129 (empty -> .) ]
  ! NULL            [ reduce using rule 129 (empty -> .) ]
  ! PLUS            [ reduce using rule 129 (empty -> .) ]
  ! MINUS           [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]
  ! FLOAT           [ reduce using rule 129 (empty -> .) ]
  ! LPAREN          [ reduce using rule 129 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 129 (empty -> .) ]

    boolean_expr                   shift and go to state 23
    scoped_block                   shift and go to state 306
    scoped_statement_list          shift and go to state 188
    scoped_statement               shift and go to state 189
    empty                          shift and go to state 190
    var_assign                     shift and go to state 191
    final_assign                   shift and go to state 192
    var_compound_assign            shift and go to state 193
    concat_assign                  shift and go to state 194
    var_auto                       shift and go to state 195
    expr                           shift and go to state 196
    func_stmt                      shift and go to state 197
    scoped_switch_stmt             shift and go to state 198
    scoped_if_stmt                 shift and go to state 199
    scoped_while_stmt              shift and go to state 200
    scoped_for_stmt                shift and go to state 201
    print_stmt                     shift and go to state 202
    scan_stmt                      shift and go to state 203
    return                         shift and go to state 204
    var                            shift and go to state 19
    num_expr                       shift and go to state 21
    string_expr                    shift and go to state 22
    null_expr                      shift and go to state 24
    ternary_expr                   shift and go to state 25
    func_call                      shift and go to state 26
    num_factor                     shift and go to state 40
    boolean_factor                 shift and go to state 42
    comparison                     shift and go to state 47

state 306

    (64) scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block . RBRACE scoped_elif_stmt

    RBRACE          shift and go to state 307


state 307

    (64) scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE . scoped_elif_stmt
    (64) scoped_elif_stmt -> . ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt
    (65) scoped_elif_stmt -> . scoped_else_stmt
    (66) scoped_elif_stmt -> . empty
    (67) scoped_else_stmt -> . ELSE LBRACE scoped_block RBRACE
    (129) empty -> .

    ELIF            shift and go to state 285
    ELSE            shift and go to state 288
    FINAL           reduce using rule 129 (empty -> .)
    FN              reduce using rule 129 (empty -> .)
    SWITCH          reduce using rule 129 (empty -> .)
    IF              reduce using rule 129 (empty -> .)
    WHILE           reduce using rule 129 (empty -> .)
    FOR             reduce using rule 129 (empty -> .)
    PRINT           reduce using rule 129 (empty -> .)
    SCANSTR         reduce using rule 129 (empty -> .)
    SCANNUM         reduce using rule 129 (empty -> .)
    RETURN          reduce using rule 129 (empty -> .)
    ID              reduce using rule 129 (empty -> .)
    STRING          reduce using rule 129 (empty -> .)
    NOT             reduce using rule 129 (empty -> .)
    NULL            reduce using rule 129 (empty -> .)
    PLUS            reduce using rule 129 (empty -> .)
    MINUS           reduce using rule 129 (empty -> .)
    INTEGER         reduce using rule 129 (empty -> .)
    FLOAT           reduce using rule 129 (empty -> .)
    LPAREN          reduce using rule 129 (empty -> .)
    BOOLEAN         reduce using rule 129 (empty -> .)
    RBRACE          reduce using rule 129 (empty -> .)

    scoped_elif_stmt               shift and go to state 308
    scoped_else_stmt               shift and go to state 286
    empty                          shift and go to state 287

state 308

    (64) scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .

    FINAL           reduce using rule 64 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    FN              reduce using rule 64 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    SWITCH          reduce using rule 64 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    IF              reduce using rule 64 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    WHILE           reduce using rule 64 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    FOR             reduce using rule 64 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    PRINT           reduce using rule 64 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    SCANSTR         reduce using rule 64 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    SCANNUM         reduce using rule 64 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    RETURN          reduce using rule 64 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    ID              reduce using rule 64 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    STRING          reduce using rule 64 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    NOT             reduce using rule 64 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    NULL            reduce using rule 64 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    PLUS            reduce using rule 64 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    MINUS           reduce using rule 64 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    INTEGER         reduce using rule 64 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    FLOAT           reduce using rule 64 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    LPAREN          reduce using rule 64 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    BOOLEAN         reduce using rule 64 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)
    RBRACE          reduce using rule 64 (scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FINAL in state 0 resolved as shift
WARNING: shift/reduce conflict for FN in state 0 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for SCANSTR in state 0 resolved as shift
WARNING: shift/reduce conflict for SCANNUM in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for NOT in state 0 resolved as shift
WARNING: shift/reduce conflict for NULL in state 0 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 0 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 0 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 0 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 4 resolved as shift
WARNING: shift/reduce conflict for FN in state 4 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 4 resolved as shift
WARNING: shift/reduce conflict for IF in state 4 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 4 resolved as shift
WARNING: shift/reduce conflict for FOR in state 4 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 4 resolved as shift
WARNING: shift/reduce conflict for SCANSTR in state 4 resolved as shift
WARNING: shift/reduce conflict for SCANNUM in state 4 resolved as shift
WARNING: shift/reduce conflict for ID in state 4 resolved as shift
WARNING: shift/reduce conflict for STRING in state 4 resolved as shift
WARNING: shift/reduce conflict for NOT in state 4 resolved as shift
WARNING: shift/reduce conflict for NULL in state 4 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 4 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 4 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 4 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 4 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 4 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 4 resolved as shift
WARNING: shift/reduce conflict for AND in state 23 resolved as shift
WARNING: shift/reduce conflict for OR in state 23 resolved as shift
WARNING: shift/reduce conflict for TERNARY_Q in state 23 resolved as shift
WARNING: shift/reduce conflict for AND in state 105 resolved as shift
WARNING: shift/reduce conflict for OR in state 105 resolved as shift
WARNING: shift/reduce conflict for TERNARY_Q in state 105 resolved as shift
WARNING: shift/reduce conflict for EQ in state 108 resolved as shift
WARNING: shift/reduce conflict for NE in state 108 resolved as shift
WARNING: shift/reduce conflict for LT in state 108 resolved as shift
WARNING: shift/reduce conflict for GT in state 108 resolved as shift
WARNING: shift/reduce conflict for LE in state 108 resolved as shift
WARNING: shift/reduce conflict for GE in state 108 resolved as shift
WARNING: shift/reduce conflict for EQ in state 110 resolved as shift
WARNING: shift/reduce conflict for NE in state 110 resolved as shift
WARNING: shift/reduce conflict for LT in state 110 resolved as shift
WARNING: shift/reduce conflict for GT in state 110 resolved as shift
WARNING: shift/reduce conflict for LE in state 110 resolved as shift
WARNING: shift/reduce conflict for GE in state 110 resolved as shift
WARNING: shift/reduce conflict for EQ in state 111 resolved as shift
WARNING: shift/reduce conflict for NE in state 111 resolved as shift
WARNING: shift/reduce conflict for LT in state 111 resolved as shift
WARNING: shift/reduce conflict for GT in state 111 resolved as shift
WARNING: shift/reduce conflict for LE in state 111 resolved as shift
WARNING: shift/reduce conflict for GE in state 111 resolved as shift
WARNING: shift/reduce conflict for EQ in state 112 resolved as shift
WARNING: shift/reduce conflict for NE in state 112 resolved as shift
WARNING: shift/reduce conflict for LT in state 112 resolved as shift
WARNING: shift/reduce conflict for GT in state 112 resolved as shift
WARNING: shift/reduce conflict for LE in state 112 resolved as shift
WARNING: shift/reduce conflict for GE in state 112 resolved as shift
WARNING: shift/reduce conflict for EQ in state 113 resolved as shift
WARNING: shift/reduce conflict for NE in state 113 resolved as shift
WARNING: shift/reduce conflict for LT in state 113 resolved as shift
WARNING: shift/reduce conflict for GT in state 113 resolved as shift
WARNING: shift/reduce conflict for LE in state 113 resolved as shift
WARNING: shift/reduce conflict for GE in state 113 resolved as shift
WARNING: shift/reduce conflict for EQ in state 114 resolved as shift
WARNING: shift/reduce conflict for NE in state 114 resolved as shift
WARNING: shift/reduce conflict for LT in state 114 resolved as shift
WARNING: shift/reduce conflict for GT in state 114 resolved as shift
WARNING: shift/reduce conflict for LE in state 114 resolved as shift
WARNING: shift/reduce conflict for GE in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 136 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 136 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 136 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 136 resolved as shift
WARNING: shift/reduce conflict for INT_DIVIDE in state 136 resolved as shift
WARNING: shift/reduce conflict for POWER in state 136 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 136 resolved as shift
WARNING: shift/reduce conflict for CONCAT in state 137 resolved as shift
WARNING: shift/reduce conflict for AND in state 138 resolved as shift
WARNING: shift/reduce conflict for OR in state 138 resolved as shift
WARNING: shift/reduce conflict for TERNARY_Q in state 138 resolved as shift
WARNING: shift/reduce conflict for AND in state 139 resolved as shift
WARNING: shift/reduce conflict for OR in state 139 resolved as shift
WARNING: shift/reduce conflict for TERNARY_Q in state 139 resolved as shift
WARNING: shift/reduce conflict for EQ in state 170 resolved as shift
WARNING: shift/reduce conflict for NE in state 170 resolved as shift
WARNING: shift/reduce conflict for LT in state 170 resolved as shift
WARNING: shift/reduce conflict for GT in state 170 resolved as shift
WARNING: shift/reduce conflict for LE in state 170 resolved as shift
WARNING: shift/reduce conflict for GE in state 170 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 174 resolved as shift
WARNING: shift/reduce conflict for FN in state 174 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 174 resolved as shift
WARNING: shift/reduce conflict for IF in state 174 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 174 resolved as shift
WARNING: shift/reduce conflict for FOR in state 174 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 174 resolved as shift
WARNING: shift/reduce conflict for SCANSTR in state 174 resolved as shift
WARNING: shift/reduce conflict for SCANNUM in state 174 resolved as shift
WARNING: shift/reduce conflict for ID in state 174 resolved as shift
WARNING: shift/reduce conflict for STRING in state 174 resolved as shift
WARNING: shift/reduce conflict for NOT in state 174 resolved as shift
WARNING: shift/reduce conflict for NULL in state 174 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 174 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 174 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 174 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 174 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 174 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 174 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 175 resolved as shift
WARNING: shift/reduce conflict for FN in state 175 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 175 resolved as shift
WARNING: shift/reduce conflict for IF in state 175 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 175 resolved as shift
WARNING: shift/reduce conflict for FOR in state 175 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 175 resolved as shift
WARNING: shift/reduce conflict for SCANSTR in state 175 resolved as shift
WARNING: shift/reduce conflict for SCANNUM in state 175 resolved as shift
WARNING: shift/reduce conflict for ID in state 175 resolved as shift
WARNING: shift/reduce conflict for STRING in state 175 resolved as shift
WARNING: shift/reduce conflict for NOT in state 175 resolved as shift
WARNING: shift/reduce conflict for NULL in state 175 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 175 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 175 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 175 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 175 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 175 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 175 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 178 resolved as shift
WARNING: shift/reduce conflict for FN in state 178 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 178 resolved as shift
WARNING: shift/reduce conflict for IF in state 178 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 178 resolved as shift
WARNING: shift/reduce conflict for FOR in state 178 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 178 resolved as shift
WARNING: shift/reduce conflict for SCANSTR in state 178 resolved as shift
WARNING: shift/reduce conflict for SCANNUM in state 178 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 178 resolved as shift
WARNING: shift/reduce conflict for ID in state 178 resolved as shift
WARNING: shift/reduce conflict for STRING in state 178 resolved as shift
WARNING: shift/reduce conflict for NOT in state 178 resolved as shift
WARNING: shift/reduce conflict for NULL in state 178 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 178 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 178 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 178 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 178 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 178 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 178 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 189 resolved as shift
WARNING: shift/reduce conflict for FN in state 189 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 189 resolved as shift
WARNING: shift/reduce conflict for IF in state 189 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 189 resolved as shift
WARNING: shift/reduce conflict for FOR in state 189 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 189 resolved as shift
WARNING: shift/reduce conflict for SCANSTR in state 189 resolved as shift
WARNING: shift/reduce conflict for SCANNUM in state 189 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 189 resolved as shift
WARNING: shift/reduce conflict for ID in state 189 resolved as shift
WARNING: shift/reduce conflict for STRING in state 189 resolved as shift
WARNING: shift/reduce conflict for NOT in state 189 resolved as shift
WARNING: shift/reduce conflict for NULL in state 189 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 189 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 189 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 189 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 189 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 189 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 189 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 212 resolved as shift
WARNING: shift/reduce conflict for FN in state 212 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 212 resolved as shift
WARNING: shift/reduce conflict for IF in state 212 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 212 resolved as shift
WARNING: shift/reduce conflict for FOR in state 212 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 212 resolved as shift
WARNING: shift/reduce conflict for SCANSTR in state 212 resolved as shift
WARNING: shift/reduce conflict for SCANNUM in state 212 resolved as shift
WARNING: shift/reduce conflict for ID in state 212 resolved as shift
WARNING: shift/reduce conflict for STRING in state 212 resolved as shift
WARNING: shift/reduce conflict for NOT in state 212 resolved as shift
WARNING: shift/reduce conflict for NULL in state 212 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 212 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 212 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 212 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 212 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 212 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 212 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 233 resolved as shift
WARNING: shift/reduce conflict for FN in state 233 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 233 resolved as shift
WARNING: shift/reduce conflict for IF in state 233 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 233 resolved as shift
WARNING: shift/reduce conflict for FOR in state 233 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 233 resolved as shift
WARNING: shift/reduce conflict for SCANSTR in state 233 resolved as shift
WARNING: shift/reduce conflict for SCANNUM in state 233 resolved as shift
WARNING: shift/reduce conflict for ID in state 233 resolved as shift
WARNING: shift/reduce conflict for STRING in state 233 resolved as shift
WARNING: shift/reduce conflict for NOT in state 233 resolved as shift
WARNING: shift/reduce conflict for NULL in state 233 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 233 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 233 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 233 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 233 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 233 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 233 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 248 resolved as shift
WARNING: shift/reduce conflict for FN in state 248 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 248 resolved as shift
WARNING: shift/reduce conflict for IF in state 248 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 248 resolved as shift
WARNING: shift/reduce conflict for FOR in state 248 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 248 resolved as shift
WARNING: shift/reduce conflict for SCANSTR in state 248 resolved as shift
WARNING: shift/reduce conflict for SCANNUM in state 248 resolved as shift
WARNING: shift/reduce conflict for ID in state 248 resolved as shift
WARNING: shift/reduce conflict for STRING in state 248 resolved as shift
WARNING: shift/reduce conflict for NOT in state 248 resolved as shift
WARNING: shift/reduce conflict for NULL in state 248 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 248 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 248 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 248 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 248 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 248 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 248 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 249 resolved as shift
WARNING: shift/reduce conflict for FN in state 249 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 249 resolved as shift
WARNING: shift/reduce conflict for IF in state 249 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 249 resolved as shift
WARNING: shift/reduce conflict for FOR in state 249 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 249 resolved as shift
WARNING: shift/reduce conflict for SCANSTR in state 249 resolved as shift
WARNING: shift/reduce conflict for SCANNUM in state 249 resolved as shift
WARNING: shift/reduce conflict for ID in state 249 resolved as shift
WARNING: shift/reduce conflict for STRING in state 249 resolved as shift
WARNING: shift/reduce conflict for NOT in state 249 resolved as shift
WARNING: shift/reduce conflict for NULL in state 249 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 249 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 249 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 249 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 249 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 249 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 249 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 259 resolved as shift
WARNING: shift/reduce conflict for FN in state 259 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 259 resolved as shift
WARNING: shift/reduce conflict for IF in state 259 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 259 resolved as shift
WARNING: shift/reduce conflict for FOR in state 259 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 259 resolved as shift
WARNING: shift/reduce conflict for SCANSTR in state 259 resolved as shift
WARNING: shift/reduce conflict for SCANNUM in state 259 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 259 resolved as shift
WARNING: shift/reduce conflict for ID in state 259 resolved as shift
WARNING: shift/reduce conflict for STRING in state 259 resolved as shift
WARNING: shift/reduce conflict for NOT in state 259 resolved as shift
WARNING: shift/reduce conflict for NULL in state 259 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 259 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 259 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 259 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 259 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 259 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 259 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 260 resolved as shift
WARNING: shift/reduce conflict for FN in state 260 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 260 resolved as shift
WARNING: shift/reduce conflict for IF in state 260 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 260 resolved as shift
WARNING: shift/reduce conflict for FOR in state 260 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 260 resolved as shift
WARNING: shift/reduce conflict for SCANSTR in state 260 resolved as shift
WARNING: shift/reduce conflict for SCANNUM in state 260 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 260 resolved as shift
WARNING: shift/reduce conflict for ID in state 260 resolved as shift
WARNING: shift/reduce conflict for STRING in state 260 resolved as shift
WARNING: shift/reduce conflict for NOT in state 260 resolved as shift
WARNING: shift/reduce conflict for NULL in state 260 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 260 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 260 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 260 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 260 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 260 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 260 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 274 resolved as shift
WARNING: shift/reduce conflict for FN in state 274 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 274 resolved as shift
WARNING: shift/reduce conflict for IF in state 274 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 274 resolved as shift
WARNING: shift/reduce conflict for FOR in state 274 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 274 resolved as shift
WARNING: shift/reduce conflict for SCANSTR in state 274 resolved as shift
WARNING: shift/reduce conflict for SCANNUM in state 274 resolved as shift
WARNING: shift/reduce conflict for ID in state 274 resolved as shift
WARNING: shift/reduce conflict for STRING in state 274 resolved as shift
WARNING: shift/reduce conflict for NOT in state 274 resolved as shift
WARNING: shift/reduce conflict for NULL in state 274 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 274 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 274 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 274 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 274 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 274 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 274 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 277 resolved as shift
WARNING: shift/reduce conflict for FN in state 277 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 277 resolved as shift
WARNING: shift/reduce conflict for IF in state 277 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 277 resolved as shift
WARNING: shift/reduce conflict for FOR in state 277 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 277 resolved as shift
WARNING: shift/reduce conflict for SCANSTR in state 277 resolved as shift
WARNING: shift/reduce conflict for SCANNUM in state 277 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 277 resolved as shift
WARNING: shift/reduce conflict for ID in state 277 resolved as shift
WARNING: shift/reduce conflict for STRING in state 277 resolved as shift
WARNING: shift/reduce conflict for NOT in state 277 resolved as shift
WARNING: shift/reduce conflict for NULL in state 277 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 277 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 277 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 277 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 277 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 277 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 277 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 282 resolved as shift
WARNING: shift/reduce conflict for FN in state 282 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 282 resolved as shift
WARNING: shift/reduce conflict for IF in state 282 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 282 resolved as shift
WARNING: shift/reduce conflict for FOR in state 282 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 282 resolved as shift
WARNING: shift/reduce conflict for SCANSTR in state 282 resolved as shift
WARNING: shift/reduce conflict for SCANNUM in state 282 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 282 resolved as shift
WARNING: shift/reduce conflict for ID in state 282 resolved as shift
WARNING: shift/reduce conflict for STRING in state 282 resolved as shift
WARNING: shift/reduce conflict for NOT in state 282 resolved as shift
WARNING: shift/reduce conflict for NULL in state 282 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 282 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 282 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 282 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 282 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 282 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 282 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 294 resolved as shift
WARNING: shift/reduce conflict for FN in state 294 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 294 resolved as shift
WARNING: shift/reduce conflict for IF in state 294 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 294 resolved as shift
WARNING: shift/reduce conflict for FOR in state 294 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 294 resolved as shift
WARNING: shift/reduce conflict for SCANSTR in state 294 resolved as shift
WARNING: shift/reduce conflict for SCANNUM in state 294 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 294 resolved as shift
WARNING: shift/reduce conflict for ID in state 294 resolved as shift
WARNING: shift/reduce conflict for STRING in state 294 resolved as shift
WARNING: shift/reduce conflict for NOT in state 294 resolved as shift
WARNING: shift/reduce conflict for NULL in state 294 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 294 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 294 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 294 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 294 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 294 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 294 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 295 resolved as shift
WARNING: shift/reduce conflict for FN in state 295 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 295 resolved as shift
WARNING: shift/reduce conflict for IF in state 295 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 295 resolved as shift
WARNING: shift/reduce conflict for FOR in state 295 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 295 resolved as shift
WARNING: shift/reduce conflict for SCANSTR in state 295 resolved as shift
WARNING: shift/reduce conflict for SCANNUM in state 295 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 295 resolved as shift
WARNING: shift/reduce conflict for ID in state 295 resolved as shift
WARNING: shift/reduce conflict for STRING in state 295 resolved as shift
WARNING: shift/reduce conflict for NOT in state 295 resolved as shift
WARNING: shift/reduce conflict for NULL in state 295 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 295 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 295 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 295 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 295 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 295 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 295 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 305 resolved as shift
WARNING: shift/reduce conflict for FN in state 305 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 305 resolved as shift
WARNING: shift/reduce conflict for IF in state 305 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 305 resolved as shift
WARNING: shift/reduce conflict for FOR in state 305 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 305 resolved as shift
WARNING: shift/reduce conflict for SCANSTR in state 305 resolved as shift
WARNING: shift/reduce conflict for SCANNUM in state 305 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 305 resolved as shift
WARNING: shift/reduce conflict for ID in state 305 resolved as shift
WARNING: shift/reduce conflict for STRING in state 305 resolved as shift
WARNING: shift/reduce conflict for NOT in state 305 resolved as shift
WARNING: shift/reduce conflict for NULL in state 305 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 305 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 305 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 305 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 305 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 305 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 305 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (statement_list -> empty)
WARNING: rejected rule (statement -> empty) in state 5
WARNING: reduce/reduce conflict in state 19 resolved using rule (expr -> var)
WARNING: rejected rule (string_expr -> var) in state 19
WARNING: reduce/reduce conflict in state 19 resolved using rule (expr -> var)
WARNING: rejected rule (num_factor -> var) in state 19
WARNING: reduce/reduce conflict in state 19 resolved using rule (expr -> var)
WARNING: rejected rule (boolean_factor -> var) in state 19
WARNING: reduce/reduce conflict in state 26 resolved using rule (expr -> func_call)
WARNING: rejected rule (num_factor -> func_call) in state 26
WARNING: reduce/reduce conflict in state 90 resolved using rule (expr -> func_call)
WARNING: rejected rule (num_factor -> func_call) in state 90
WARNING: reduce/reduce conflict in state 91 resolved using rule (num_factor -> var)
WARNING: rejected rule (boolean_factor -> var) in state 91
WARNING: reduce/reduce conflict in state 91 resolved using rule (expr -> var)
WARNING: rejected rule (num_factor -> var) in state 91
WARNING: reduce/reduce conflict in state 91 resolved using rule (expr -> var)
WARNING: rejected rule (string_expr -> var) in state 91
WARNING: reduce/reduce conflict in state 105 resolved using rule (expr -> boolean_expr)
WARNING: rejected rule (boolean_expr -> NOT boolean_expr) in state 105
WARNING: reduce/reduce conflict in state 107 resolved using rule (expr -> var)
WARNING: rejected rule (boolean_factor -> var) in state 107
WARNING: reduce/reduce conflict in state 107 resolved using rule (expr -> var)
WARNING: rejected rule (string_expr -> var) in state 107
WARNING: reduce/reduce conflict in state 107 resolved using rule (expr -> var)
WARNING: rejected rule (num_factor -> var) in state 107
WARNING: reduce/reduce conflict in state 109 resolved using rule (expr -> var)
WARNING: rejected rule (string_expr -> var) in state 109
WARNING: reduce/reduce conflict in state 109 resolved using rule (expr -> var)
WARNING: rejected rule (num_factor -> var) in state 109
WARNING: reduce/reduce conflict in state 109 resolved using rule (expr -> var)
WARNING: rejected rule (boolean_factor -> var) in state 109
WARNING: reduce/reduce conflict in state 138 resolved using rule (expr -> boolean_expr)
WARNING: rejected rule (boolean_expr -> boolean_expr AND boolean_expr) in state 138
WARNING: reduce/reduce conflict in state 139 resolved using rule (expr -> boolean_expr)
WARNING: rejected rule (boolean_expr -> boolean_expr OR boolean_expr) in state 139
WARNING: reduce/reduce conflict in state 153 resolved using rule (num_factor -> var)
WARNING: rejected rule (boolean_factor -> var) in state 153
WARNING: reduce/reduce conflict in state 153 resolved using rule (expr -> var)
WARNING: rejected rule (num_factor -> var) in state 153
WARNING: reduce/reduce conflict in state 153 resolved using rule (expr -> var)
WARNING: rejected rule (string_expr -> var) in state 153
WARNING: reduce/reduce conflict in state 190 resolved using rule (scoped_statement_list -> empty)
WARNING: rejected rule (scoped_statement -> empty) in state 190
