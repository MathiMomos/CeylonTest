
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEINT_DIVIDErightPOWERAND ASSIGN BOOLEAN CASE CLASS COMMA COMMENT_SINGLE CONCAT CONCAT_ASSIGN DECREMENT DEFAULT DIVIDE DIVIDE_ASSIGN DOT ELIF ELSE EQ FALSE FINAL FLOAT FN FOR FSTRING GE GT ID IF IN INCREMENT INTEGER INT_DIVIDE INT_DIVIDE_ASSIGN LBRACE LBRACKET LE LPAREN LT MINUS MINUS_ASSIGN MODULO MODULO_ASSIGN NE NOT NULL OR PLUS PLUS_ASSIGN POWER POWER_ASSIGN PRINT RBRACE RBRACKET RETURN RPAREN SCANNUM SCANSTR SEMI STRING SWITCH TERNARY_C TERNARY_Q TIMES TIMES_ASSIGN TRUE WHILEprogram : blockblock : statement_liststatement_list : statement statement_list\n| emptystatement : var_assign SEMI\n| final_assign SEMI\n| var_compound_assign SEMI\n| concat_assign SEMI\n| var_auto SEMI\n| expr SEMI\n| func_stmt\n| switch_stmt\n| if_stmt\n| while_stmt\n| for_stmt\n| print_stmt SEMI\n| scan_stmt SEMI\n| emptyscoped_block : scoped_statement_listscoped_statement_list : scoped_statement scoped_statement_list\n| emptyscoped_statement : var_assign SEMI\n| final_assign SEMI\n| var_compound_assign SEMI\n| concat_assign SEMI\n| var_auto SEMI\n| expr SEMI\n| func_stmt\n| scoped_switch_stmt\n| scoped_if_stmt\n| scoped_while_stmt\n| scoped_for_stmt\n| print_stmt SEMI\n| scan_stmt SEMI\n| return SEMI\n| emptyreturn : RETURN exprfunc_stmt : FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACEfunc_call : var LPAREN arguments_list RPARENarguments_list : non_empty_arguments_list\n| emptynon_empty_arguments_list : expr COMMA non_empty_arguments_list\n| exprparameters_list : non_empty_parameters_list\n| emptynon_empty_parameters_list : var COMMA non_empty_parameters_list\n| varswitch_stmt : SWITCH LPAREN var RPAREN LBRACE case RBRACEcase : CASE expr LBRACE block RBRACE case\n| default_case\n| emptydefault_case : DEFAULT LBRACE block RBRACEif_stmt : IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmtelif_stmt : ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt\n| else_stmt\n| emptyelse_stmt : ELSE LBRACE block RBRACEscoped_switch_stmt : SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACEscoped_case : CASE expr LBRACE scoped_block RBRACE scoped_case\n| scoped_default_case\n| emptyscoped_default_case : DEFAULT LBRACE scoped_block RBRACEscoped_if_stmt : IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmtscoped_elif_stmt : ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt\n| scoped_else_stmt\n| emptyscoped_else_stmt : ELSE LBRACE scoped_block RBRACEscoped_while_stmt : WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACEscoped_for_stmt : FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACEprint_stmt : PRINT LPAREN expr RPARENscan_stmt : SCANSTR LPAREN var RPAREN\n| SCANNUM LPAREN var RPARENwhile_stmt : WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACEfor_stmt : FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACEvar : IDvar_assign : var ASSIGN exprfinal_assign : FINAL var ASSIGN exprvar_compound_assign : var PLUS_ASSIGN num_expr\n| var MINUS_ASSIGN num_expr\n| var TIMES_ASSIGN num_expr\n| var DIVIDE_ASSIGN num_expr\n| var POWER_ASSIGN num_expr\n| var MODULO_ASSIGN num_expr\n| var INT_DIVIDE_ASSIGN num_exprvar_auto : var INCREMENT\n| var DECREMENTconcat_assign : var CONCAT_ASSIGN string_exprexpr : string_expr\n| num_expr\n| boolean_expr\n| null_expr\n| ternary_expr\n| var\n| func_callnum_factor : PLUS num_factor\n| MINUS num_factor\n| INTEGER\n| FLOAT\n| LPAREN num_expr RPAREN\n| func_call\n| varnum_expr : num_expr PLUS num_expr\n| num_expr MINUS num_expr\n| num_expr TIMES num_expr\n| num_expr DIVIDE num_expr\n| num_expr INT_DIVIDE num_expr\n| num_expr POWER num_expr\n| num_expr MODULO num_expr\n| num_factorstring_expr : string_expr CONCAT string_expr\n| STRING\n| varboolean_expr : boolean_expr AND boolean_expr\n| boolean_expr OR boolean_expr\n| NOT boolean_expr\n| boolean_factorboolean_factor : LPAREN boolean_expr RPAREN\n| BOOLEAN\n| comparison\n| varcomparison : expr EQ expr\n| expr NE expr\n| expr LT expr\n| expr GT expr\n| expr LE expr\n| expr GE exprnull_expr : NULLternary_expr : boolean_expr TERNARY_Q expr TERNARY_C exprempty : '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,12,13,14,15,16,48,49,50,51,52,53,54,61,62,210,213,214,217,235,237,238,264,265,290,296,],[-129,0,-1,-2,-129,-4,-11,-12,-13,-14,-15,-3,-5,-6,-7,-8,-9,-10,-16,-17,-48,-129,-73,-38,-53,-55,-56,-57,-74,-129,-54,]),'FINAL':([0,4,5,12,13,14,15,16,49,50,51,52,53,54,61,62,174,175,178,189,190,197,198,199,200,201,210,212,213,214,217,219,220,221,222,223,224,225,226,227,233,235,237,238,248,249,259,260,264,265,274,275,277,278,279,282,284,286,287,290,294,295,296,303,304,305,307,308,],[20,20,-18,-11,-12,-13,-14,-15,-5,-6,-7,-8,-9,-10,-16,-17,20,20,20,20,-36,-28,-29,-30,-31,-32,-48,20,-129,-73,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,20,-53,-55,-56,20,20,20,20,-57,-74,20,-58,20,-129,-68,20,-63,-65,-66,-129,20,20,-54,-67,-69,20,-129,-64,]),'FN':([0,4,5,12,13,14,15,16,49,50,51,52,53,54,61,62,174,175,178,189,190,197,198,199,200,201,210,212,213,214,217,219,220,221,222,223,224,225,226,227,233,235,237,238,248,249,259,260,264,265,274,275,277,278,279,282,284,286,287,290,294,295,296,303,304,305,307,308,],[27,27,-18,-11,-12,-13,-14,-15,-5,-6,-7,-8,-9,-10,-16,-17,27,27,27,27,-36,-28,-29,-30,-31,-32,-48,27,-129,-73,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,27,-53,-55,-56,27,27,27,27,-57,-74,27,-58,27,-129,-68,27,-63,-65,-66,-129,27,27,-54,-67,-69,27,-129,-64,]),'SWITCH':([0,4,5,12,13,14,15,16,49,50,51,52,53,54,61,62,174,175,178,189,190,197,198,199,200,201,210,212,213,214,217,219,220,221,222,223,224,225,226,227,233,235,237,238,248,249,259,260,264,265,274,275,277,278,279,282,284,286,287,290,294,295,296,303,304,305,307,308,],[29,29,-18,-11,-12,-13,-14,-15,-5,-6,-7,-8,-9,-10,-16,-17,29,29,205,205,-36,-28,-29,-30,-31,-32,-48,29,-129,-73,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,29,-53,-55,-56,29,29,205,205,-57,-74,29,-58,205,-129,-68,205,-63,-65,-66,-129,205,205,-54,-67,-69,205,-129,-64,]),'IF':([0,4,5,12,13,14,15,16,49,50,51,52,53,54,61,62,174,175,178,189,190,197,198,199,200,201,210,212,213,214,217,219,220,221,222,223,224,225,226,227,233,235,237,238,248,249,259,260,264,265,274,275,277,278,279,282,284,286,287,290,294,295,296,303,304,305,307,308,],[30,30,-18,-11,-12,-13,-14,-15,-5,-6,-7,-8,-9,-10,-16,-17,30,30,206,206,-36,-28,-29,-30,-31,-32,-48,30,-129,-73,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,30,-53,-55,-56,30,30,206,206,-57,-74,30,-58,206,-129,-68,206,-63,-65,-66,-129,206,206,-54,-67,-69,206,-129,-64,]),'WHILE':([0,4,5,12,13,14,15,16,49,50,51,52,53,54,61,62,174,175,178,189,190,197,198,199,200,201,210,212,213,214,217,219,220,221,222,223,224,225,226,227,233,235,237,238,248,249,259,260,264,265,274,275,277,278,279,282,284,286,287,290,294,295,296,303,304,305,307,308,],[31,31,-18,-11,-12,-13,-14,-15,-5,-6,-7,-8,-9,-10,-16,-17,31,31,207,207,-36,-28,-29,-30,-31,-32,-48,31,-129,-73,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,31,-53,-55,-56,31,31,207,207,-57,-74,31,-58,207,-129,-68,207,-63,-65,-66,-129,207,207,-54,-67,-69,207,-129,-64,]),'FOR':([0,4,5,12,13,14,15,16,49,50,51,52,53,54,61,62,174,175,178,189,190,197,198,199,200,201,210,212,213,214,217,219,220,221,222,223,224,225,226,227,233,235,237,238,248,249,259,260,264,265,274,275,277,278,279,282,284,286,287,290,294,295,296,303,304,305,307,308,],[32,32,-18,-11,-12,-13,-14,-15,-5,-6,-7,-8,-9,-10,-16,-17,32,32,208,208,-36,-28,-29,-30,-31,-32,-48,32,-129,-73,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,32,-53,-55,-56,32,32,208,208,-57,-74,32,-58,208,-129,-68,208,-63,-65,-66,-129,208,208,-54,-67,-69,208,-129,-64,]),'PRINT':([0,4,5,12,13,14,15,16,49,50,51,52,53,54,61,62,174,175,178,189,190,197,198,199,200,201,210,212,213,214,217,219,220,221,222,223,224,225,226,227,233,235,237,238,248,249,259,260,264,265,274,275,277,278,279,282,284,286,287,290,294,295,296,303,304,305,307,308,],[33,33,-18,-11,-12,-13,-14,-15,-5,-6,-7,-8,-9,-10,-16,-17,33,33,33,33,-36,-28,-29,-30,-31,-32,-48,33,-129,-73,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,33,-53,-55,-56,33,33,33,33,-57,-74,33,-58,33,-129,-68,33,-63,-65,-66,-129,33,33,-54,-67,-69,33,-129,-64,]),'SCANSTR':([0,4,5,12,13,14,15,16,49,50,51,52,53,54,61,62,174,175,178,189,190,197,198,199,200,201,210,212,213,214,217,219,220,221,222,223,224,225,226,227,233,235,237,238,248,249,259,260,264,265,274,275,277,278,279,282,284,286,287,290,294,295,296,303,304,305,307,308,],[34,34,-18,-11,-12,-13,-14,-15,-5,-6,-7,-8,-9,-10,-16,-17,34,34,34,34,-36,-28,-29,-30,-31,-32,-48,34,-129,-73,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,34,-53,-55,-56,34,34,34,34,-57,-74,34,-58,34,-129,-68,34,-63,-65,-66,-129,34,34,-54,-67,-69,34,-129,-64,]),'SCANNUM':([0,4,5,12,13,14,15,16,49,50,51,52,53,54,61,62,174,175,178,189,190,197,198,199,200,201,210,212,213,214,217,219,220,221,222,223,224,225,226,227,233,235,237,238,248,249,259,260,264,265,274,275,277,278,279,282,284,286,287,290,294,295,296,303,304,305,307,308,],[35,35,-18,-11,-12,-13,-14,-15,-5,-6,-7,-8,-9,-10,-16,-17,35,35,35,35,-36,-28,-29,-30,-31,-32,-48,35,-129,-73,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,35,-53,-55,-56,35,35,35,35,-57,-74,35,-58,35,-129,-68,35,-63,-65,-66,-129,35,35,-54,-67,-69,35,-129,-64,]),'ID':([0,4,5,12,13,14,15,16,20,27,28,38,39,41,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,74,76,77,78,79,80,81,82,83,84,85,86,93,94,95,96,97,98,99,101,106,129,141,155,157,165,171,174,175,178,180,186,189,190,197,198,199,200,201,209,210,212,213,214,217,219,220,221,222,223,224,225,226,227,228,229,230,231,233,235,237,238,247,248,249,253,259,260,264,265,267,273,274,275,277,278,279,282,284,286,287,290,293,294,295,296,303,304,305,307,308,],[36,36,-18,-11,-12,-13,-14,-15,36,36,36,36,36,36,-5,-6,-7,-8,-9,-10,36,36,36,36,36,36,-16,-17,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-36,-28,-29,-30,-31,-32,36,-48,36,-129,-73,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,36,36,36,36,36,-53,-55,-56,36,36,36,36,36,36,-57,-74,36,36,36,-58,36,-129,-68,36,-63,-65,-66,-129,36,36,36,-54,-67,-69,36,-129,-64,]),'STRING':([0,4,5,12,13,14,15,16,28,41,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,71,74,83,84,85,86,94,95,97,106,129,155,157,165,174,175,178,180,189,190,197,198,199,200,201,209,210,212,213,214,217,219,220,221,222,223,224,225,226,227,229,230,233,235,237,238,247,248,249,253,259,260,264,265,267,274,275,277,278,279,282,284,286,287,290,293,294,295,296,303,304,305,307,308,],[37,37,-18,-11,-12,-13,-14,-15,37,37,-5,-6,-7,-8,-9,-10,37,37,37,37,37,37,-16,-17,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-36,-28,-29,-30,-31,-32,37,-48,37,-129,-73,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,37,37,37,-53,-55,-56,37,37,37,37,37,37,-57,-74,37,37,-58,37,-129,-68,37,-63,-65,-66,-129,37,37,37,-54,-67,-69,37,-129,-64,]),'NOT':([0,4,5,12,13,14,15,16,28,41,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,74,84,85,86,94,95,97,106,129,155,157,165,174,175,178,180,189,190,197,198,199,200,201,209,210,212,213,214,217,219,220,221,222,223,224,225,226,227,229,230,233,235,237,238,247,248,249,253,259,260,264,265,267,274,275,277,278,279,282,284,286,287,290,293,294,295,296,303,304,305,307,308,],[41,41,-18,-11,-12,-13,-14,-15,41,41,-5,-6,-7,-8,-9,-10,41,41,41,41,41,41,-16,-17,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-36,-28,-29,-30,-31,-32,41,-48,41,-129,-73,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,41,41,41,-53,-55,-56,41,41,41,41,41,41,-57,-74,41,41,-58,41,-129,-68,41,-63,-65,-66,-129,41,41,41,-54,-67,-69,41,-129,-64,]),'NULL':([0,4,5,12,13,14,15,16,28,41,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,74,84,85,86,94,95,97,106,129,155,157,165,174,175,178,180,189,190,197,198,199,200,201,209,210,212,213,214,217,219,220,221,222,223,224,225,226,227,229,230,233,235,237,238,247,248,249,253,259,260,264,265,267,274,275,277,278,279,282,284,286,287,290,293,294,295,296,303,304,305,307,308,],[43,43,-18,-11,-12,-13,-14,-15,43,43,-5,-6,-7,-8,-9,-10,43,43,43,43,43,43,-16,-17,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-36,-28,-29,-30,-31,-32,43,-48,43,-129,-73,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,43,43,43,-53,-55,-56,43,43,43,43,43,43,-57,-74,43,43,-58,43,-129,-68,43,-63,-65,-66,-129,43,43,43,-54,-67,-69,43,-129,-64,]),'PLUS':([0,4,5,12,13,14,15,16,19,21,26,28,36,38,39,40,41,44,45,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,74,76,77,78,79,80,81,82,84,85,86,88,90,91,94,95,97,100,101,102,103,104,106,107,109,116,117,118,119,120,121,122,129,130,131,132,133,134,135,136,142,152,153,154,155,157,165,174,175,178,180,189,190,197,198,199,200,201,209,210,212,213,214,217,219,220,221,222,223,224,225,226,227,229,230,233,235,237,238,247,248,249,253,259,260,264,265,267,274,275,277,278,279,282,284,286,287,290,293,294,295,296,303,304,305,307,308,],[38,38,-18,-11,-12,-13,-14,-15,-101,76,-100,38,-75,38,38,-109,38,-97,-98,-5,-6,-7,-8,-9,-10,38,38,38,38,38,38,-16,-17,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,76,-100,-101,38,38,38,-95,38,-100,-101,-96,38,-101,-101,76,76,76,76,76,76,76,38,-102,-103,-104,-105,-106,-107,76,-99,76,-101,-39,38,38,38,38,38,38,38,38,-36,-28,-29,-30,-31,-32,38,-48,38,-129,-73,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,38,38,38,-53,-55,-56,38,38,38,38,38,38,-57,-74,38,38,-58,38,-129,-68,38,-63,-65,-66,-129,38,38,38,-54,-67,-69,38,-129,-64,]),'MINUS':([0,4,5,12,13,14,15,16,19,21,26,28,36,38,39,40,41,44,45,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,74,76,77,78,79,80,81,82,84,85,86,88,90,91,94,95,97,100,101,102,103,104,106,107,109,116,117,118,119,120,121,122,129,130,131,132,133,134,135,136,142,152,153,154,155,157,165,174,175,178,180,189,190,197,198,199,200,201,209,210,212,213,214,217,219,220,221,222,223,224,225,226,227,229,230,233,235,237,238,247,248,249,253,259,260,264,265,267,274,275,277,278,279,282,284,286,287,290,293,294,295,296,303,304,305,307,308,],[39,39,-18,-11,-12,-13,-14,-15,-101,77,-100,39,-75,39,39,-109,39,-97,-98,-5,-6,-7,-8,-9,-10,39,39,39,39,39,39,-16,-17,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,77,-100,-101,39,39,39,-95,39,-100,-101,-96,39,-101,-101,77,77,77,77,77,77,77,39,-102,-103,-104,-105,-106,-107,77,-99,77,-101,-39,39,39,39,39,39,39,39,39,-36,-28,-29,-30,-31,-32,39,-48,39,-129,-73,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,39,39,39,-53,-55,-56,39,39,39,39,39,39,-57,-74,39,39,-58,39,-129,-68,39,-63,-65,-66,-129,39,39,39,-54,-67,-69,39,-129,-64,]),'INTEGER':([0,4,5,12,13,14,15,16,28,38,39,41,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,74,76,77,78,79,80,81,82,84,85,86,94,95,97,101,106,129,155,157,165,174,175,178,180,189,190,197,198,199,200,201,209,210,212,213,214,217,219,220,221,222,223,224,225,226,227,229,230,233,235,237,238,247,248,249,253,259,260,264,265,267,274,275,277,278,279,282,284,286,287,290,293,294,295,296,303,304,305,307,308,],[44,44,-18,-11,-12,-13,-14,-15,44,44,44,44,-5,-6,-7,-8,-9,-10,44,44,44,44,44,44,-16,-17,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-36,-28,-29,-30,-31,-32,44,-48,44,-129,-73,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,44,44,44,-53,-55,-56,44,44,44,44,44,44,-57,-74,44,44,-58,44,-129,-68,44,-63,-65,-66,-129,44,44,44,-54,-67,-69,44,-129,-64,]),'FLOAT':([0,4,5,12,13,14,15,16,28,38,39,41,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,74,76,77,78,79,80,81,82,84,85,86,94,95,97,101,106,129,155,157,165,174,175,178,180,189,190,197,198,199,200,201,209,210,212,213,214,217,219,220,221,222,223,224,225,226,227,229,230,233,235,237,238,247,248,249,253,259,260,264,265,267,274,275,277,278,279,282,284,286,287,290,293,294,295,296,303,304,305,307,308,],[45,45,-18,-11,-12,-13,-14,-15,45,45,45,45,-5,-6,-7,-8,-9,-10,45,45,45,45,45,45,-16,-17,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-36,-28,-29,-30,-31,-32,45,-48,45,-129,-73,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,45,45,45,-53,-55,-56,45,45,45,45,45,45,-57,-74,45,45,-58,45,-129,-68,45,-63,-65,-66,-129,45,45,45,-54,-67,-69,45,-129,-64,]),'LPAREN':([0,4,5,12,13,14,15,16,19,28,29,30,31,32,33,34,35,36,38,39,41,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,74,76,77,78,79,80,81,82,84,85,86,87,91,94,95,97,101,103,106,107,109,129,153,155,157,165,174,175,178,180,189,190,197,198,199,200,201,205,206,207,208,209,210,212,213,214,217,219,220,221,222,223,224,225,226,227,229,230,233,235,236,237,238,247,248,249,253,259,260,264,265,267,274,275,277,278,279,282,284,285,286,287,290,293,294,295,296,303,304,305,307,308,],[28,28,-18,-11,-12,-13,-14,-15,74,28,93,94,95,96,97,98,99,-75,101,101,106,-5,-6,-7,-8,-9,-10,28,28,28,28,28,28,-16,-17,28,101,101,101,101,101,101,101,28,101,101,101,101,101,101,101,106,106,28,141,74,106,106,28,101,74,106,74,74,28,74,28,28,106,28,28,28,28,28,-36,-28,-29,-30,-31,-32,228,229,230,231,28,-48,28,-129,-73,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,106,106,28,-53,247,-55,-56,106,28,28,106,28,28,-57,-74,28,28,-58,28,-129,-68,28,-63,293,-65,-66,-129,106,28,28,-54,-67,-69,28,-129,-64,]),'BOOLEAN':([0,4,5,12,13,14,15,16,28,41,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,74,84,85,86,94,95,97,106,129,155,157,165,174,175,178,180,189,190,197,198,199,200,201,209,210,212,213,214,217,219,220,221,222,223,224,225,226,227,229,230,233,235,237,238,247,248,249,253,259,260,264,265,267,274,275,277,278,279,282,284,286,287,290,293,294,295,296,303,304,305,307,308,],[46,46,-18,-11,-12,-13,-14,-15,46,46,-5,-6,-7,-8,-9,-10,46,46,46,46,46,46,-16,-17,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-36,-28,-29,-30,-31,-32,46,-48,46,-129,-73,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,46,46,46,-53,-55,-56,46,46,46,46,46,46,-57,-74,46,46,-58,46,-129,-68,46,-63,-65,-66,-129,46,46,46,-54,-67,-69,46,-129,-64,]),'RBRACE':([3,4,5,12,13,14,15,16,48,49,50,51,52,53,54,61,62,173,174,175,178,179,181,182,184,185,187,188,189,190,197,198,199,200,201,210,212,213,214,217,218,219,220,221,222,223,224,225,226,227,233,234,235,237,238,245,246,248,249,254,256,257,258,259,260,262,264,265,266,268,269,271,272,274,275,277,278,279,281,282,283,284,286,287,290,291,292,294,295,296,297,299,300,301,303,304,305,306,307,308,],[-2,-129,-4,-11,-12,-13,-14,-15,-3,-5,-6,-7,-8,-9,-10,-16,-17,-129,-129,-129,-129,210,-50,-51,213,214,217,-19,-129,-21,-28,-29,-30,-31,-32,-48,-129,-129,-73,-38,-20,-22,-23,-24,-25,-26,-27,-33,-34,-35,-129,246,-53,-55,-56,254,-52,-129,-129,-129,264,265,-129,-129,-129,-49,-57,-74,275,-60,-61,278,279,-129,-58,-129,-129,-68,290,-129,292,-63,-65,-66,-129,297,-62,-129,-129,-54,-129,303,304,-59,-67,-69,-129,307,-129,-64,]),'SEMI':([6,7,8,9,10,11,17,18,19,21,22,23,24,25,26,36,37,40,42,43,44,45,46,47,72,73,100,102,103,104,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,130,131,132,133,134,135,136,137,138,139,142,143,147,154,156,166,167,168,170,176,191,192,193,194,195,196,202,203,204,232,244,261,],[49,50,51,52,53,54,61,62,-93,-89,-88,-90,-91,-92,-94,-75,-111,-109,-116,-127,-97,-98,-118,-119,-85,-86,-95,-100,-101,-96,-115,-120,-121,-93,-122,-123,-124,-125,-126,-76,-78,-79,-80,-81,-82,-83,-84,-112,-87,-102,-103,-104,-105,-106,-107,-108,-110,-113,-114,-99,-117,165,-39,-77,-70,-71,-72,-128,186,219,220,221,222,223,224,225,226,227,-37,253,273,]),'EQ':([11,19,21,22,23,24,25,26,36,37,40,42,43,44,45,46,47,88,89,90,91,92,100,102,103,104,105,107,108,109,110,111,112,113,114,115,123,128,130,131,132,133,134,135,136,137,138,139,140,142,143,145,146,149,153,154,156,170,176,196,211,232,242,243,255,261,276,298,],[55,-93,-89,-88,-90,-91,-92,-94,-75,-111,-109,-116,-127,-97,-98,-118,-119,-89,-90,-94,-93,55,-95,-100,-101,-96,-90,-93,55,-93,55,55,55,55,55,55,-112,55,-102,-103,-104,-105,-106,-107,-108,-110,-90,-90,55,-99,-117,-90,-90,55,-93,-39,55,55,-90,55,55,55,-90,-90,-90,-90,55,-90,]),'NE':([11,19,21,22,23,24,25,26,36,37,40,42,43,44,45,46,47,88,89,90,91,92,100,102,103,104,105,107,108,109,110,111,112,113,114,115,123,128,130,131,132,133,134,135,136,137,138,139,140,142,143,145,146,149,153,154,156,170,176,196,211,232,242,243,255,261,276,298,],[56,-93,-89,-88,-90,-91,-92,-94,-75,-111,-109,-116,-127,-97,-98,-118,-119,-89,-90,-94,-93,56,-95,-100,-101,-96,-90,-93,56,-93,56,56,56,56,56,56,-112,56,-102,-103,-104,-105,-106,-107,-108,-110,-90,-90,56,-99,-117,-90,-90,56,-93,-39,56,56,-90,56,56,56,-90,-90,-90,-90,56,-90,]),'LT':([11,19,21,22,23,24,25,26,36,37,40,42,43,44,45,46,47,88,89,90,91,92,100,102,103,104,105,107,108,109,110,111,112,113,114,115,123,128,130,131,132,133,134,135,136,137,138,139,140,142,143,145,146,149,153,154,156,170,176,196,211,232,242,243,255,261,276,298,],[57,-93,-89,-88,-90,-91,-92,-94,-75,-111,-109,-116,-127,-97,-98,-118,-119,-89,-90,-94,-93,57,-95,-100,-101,-96,-90,-93,57,-93,57,57,57,57,57,57,-112,57,-102,-103,-104,-105,-106,-107,-108,-110,-90,-90,57,-99,-117,-90,-90,57,-93,-39,57,57,-90,57,57,57,-90,-90,-90,-90,57,-90,]),'GT':([11,19,21,22,23,24,25,26,36,37,40,42,43,44,45,46,47,88,89,90,91,92,100,102,103,104,105,107,108,109,110,111,112,113,114,115,123,128,130,131,132,133,134,135,136,137,138,139,140,142,143,145,146,149,153,154,156,170,176,196,211,232,242,243,255,261,276,298,],[58,-93,-89,-88,-90,-91,-92,-94,-75,-111,-109,-116,-127,-97,-98,-118,-119,-89,-90,-94,-93,58,-95,-100,-101,-96,-90,-93,58,-93,58,58,58,58,58,58,-112,58,-102,-103,-104,-105,-106,-107,-108,-110,-90,-90,58,-99,-117,-90,-90,58,-93,-39,58,58,-90,58,58,58,-90,-90,-90,-90,58,-90,]),'LE':([11,19,21,22,23,24,25,26,36,37,40,42,43,44,45,46,47,88,89,90,91,92,100,102,103,104,105,107,108,109,110,111,112,113,114,115,123,128,130,131,132,133,134,135,136,137,138,139,140,142,143,145,146,149,153,154,156,170,176,196,211,232,242,243,255,261,276,298,],[59,-93,-89,-88,-90,-91,-92,-94,-75,-111,-109,-116,-127,-97,-98,-118,-119,-89,-90,-94,-93,59,-95,-100,-101,-96,-90,-93,59,-93,59,59,59,59,59,59,-112,59,-102,-103,-104,-105,-106,-107,-108,-110,-90,-90,59,-99,-117,-90,-90,59,-93,-39,59,59,-90,59,59,59,-90,-90,-90,-90,59,-90,]),'GE':([11,19,21,22,23,24,25,26,36,37,40,42,43,44,45,46,47,88,89,90,91,92,100,102,103,104,105,107,108,109,110,111,112,113,114,115,123,128,130,131,132,133,134,135,136,137,138,139,140,142,143,145,146,149,153,154,156,170,176,196,211,232,242,243,255,261,276,298,],[60,-93,-89,-88,-90,-91,-92,-94,-75,-111,-109,-116,-127,-97,-98,-118,-119,-89,-90,-94,-93,60,-95,-100,-101,-96,-90,-93,60,-93,60,60,60,60,60,60,-112,60,-102,-103,-104,-105,-106,-107,-108,-110,-90,-90,60,-99,-117,-90,-90,60,-93,-39,60,60,-90,60,60,60,-90,-90,-90,-90,60,-90,]),'ASSIGN':([19,36,75,148,],[63,-75,129,63,]),'PLUS_ASSIGN':([19,36,],[64,-75,]),'MINUS_ASSIGN':([19,36,],[65,-75,]),'TIMES_ASSIGN':([19,36,],[66,-75,]),'DIVIDE_ASSIGN':([19,36,],[67,-75,]),'POWER_ASSIGN':([19,36,],[68,-75,]),'MODULO_ASSIGN':([19,36,],[69,-75,]),'INT_DIVIDE_ASSIGN':([19,36,],[70,-75,]),'CONCAT_ASSIGN':([19,36,],[71,-75,]),'INCREMENT':([19,36,216,],[72,-75,72,]),'DECREMENT':([19,36,216,],[73,-75,73,]),'CONCAT':([19,22,36,37,91,107,109,123,124,137,153,],[-112,83,-75,-111,-112,-112,-112,-112,83,83,-112,]),'TIMES':([19,21,26,36,40,44,45,88,90,91,100,102,103,104,107,109,116,117,118,119,120,121,122,130,131,132,133,134,135,136,142,152,153,154,],[-101,78,-100,-75,-109,-97,-98,78,-100,-101,-95,-100,-101,-96,-101,-101,78,78,78,78,78,78,78,78,78,-104,-105,-106,-107,78,-99,78,-101,-39,]),'DIVIDE':([19,21,26,36,40,44,45,88,90,91,100,102,103,104,107,109,116,117,118,119,120,121,122,130,131,132,133,134,135,136,142,152,153,154,],[-101,79,-100,-75,-109,-97,-98,79,-100,-101,-95,-100,-101,-96,-101,-101,79,79,79,79,79,79,79,79,79,-104,-105,-106,-107,79,-99,79,-101,-39,]),'INT_DIVIDE':([19,21,26,36,40,44,45,88,90,91,100,102,103,104,107,109,116,117,118,119,120,121,122,130,131,132,133,134,135,136,142,152,153,154,],[-101,80,-100,-75,-109,-97,-98,80,-100,-101,-95,-100,-101,-96,-101,-101,80,80,80,80,80,80,80,80,80,-104,-105,-106,-107,80,-99,80,-101,-39,]),'POWER':([19,21,26,36,40,44,45,88,90,91,100,102,103,104,107,109,116,117,118,119,120,121,122,130,131,132,133,134,135,136,142,152,153,154,],[-101,81,-100,-75,-109,-97,-98,81,-100,-101,-95,-100,-101,-96,-101,-101,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-99,81,-101,-39,]),'MODULO':([19,21,26,36,40,44,45,88,90,91,100,102,103,104,107,109,116,117,118,119,120,121,122,130,131,132,133,134,135,136,142,152,153,154,],[-101,82,-100,-75,-109,-97,-98,82,-100,-101,-95,-100,-101,-96,-101,-101,82,82,82,82,82,82,82,-102,-103,-104,-105,-106,-107,82,-99,82,-101,-39,]),'AND':([19,21,22,23,24,25,26,36,37,40,42,43,44,45,46,47,89,91,100,102,103,104,105,107,108,109,110,111,112,113,114,123,130,131,132,133,134,135,136,137,138,139,142,143,145,146,153,154,170,176,242,243,255,261,298,],[-120,-89,-88,84,-91,-92,-94,-75,-111,-109,-116,-127,-97,-98,-118,-119,84,-120,-95,-100,-101,-96,84,-120,-121,-93,-122,-123,-124,-125,-126,-112,-102,-103,-104,-105,-106,-107,-108,-110,84,84,-99,-117,84,84,-120,-39,-128,84,84,84,84,84,84,]),'OR':([19,21,22,23,24,25,26,36,37,40,42,43,44,45,46,47,89,91,100,102,103,104,105,107,108,109,110,111,112,113,114,123,130,131,132,133,134,135,136,137,138,139,142,143,145,146,153,154,170,176,242,243,255,261,298,],[-120,-89,-88,85,-91,-92,-94,-75,-111,-109,-116,-127,-97,-98,-118,-119,85,-120,-95,-100,-101,-96,85,-120,-121,-93,-122,-123,-124,-125,-126,-112,-102,-103,-104,-105,-106,-107,-108,-110,85,85,-99,-117,85,85,-120,-39,-128,85,85,85,85,85,85,]),'TERNARY_Q':([19,21,22,23,24,25,26,36,37,40,42,43,44,45,46,47,89,91,100,102,103,104,105,107,108,109,110,111,112,113,114,123,130,131,132,133,134,135,136,137,138,139,142,143,145,146,153,154,170,176,242,243,255,261,298,],[-120,-89,-88,86,-91,-92,-94,-75,-111,-109,-116,-127,-97,-98,-118,-119,86,-120,-95,-100,-101,-96,86,-120,-121,-93,-122,-123,-124,-125,-126,-112,-102,-103,-104,-105,-106,-107,-108,-110,86,86,-99,-117,86,86,-120,-39,-128,86,86,86,86,86,86,]),'RPAREN':([21,22,23,24,25,26,36,37,40,42,43,44,45,46,47,72,73,74,88,89,90,91,100,102,103,104,105,107,108,109,110,111,112,113,114,123,125,126,127,128,130,131,132,133,134,135,136,137,138,139,141,142,143,144,145,146,149,150,151,152,153,154,158,159,160,161,169,170,177,215,241,242,243,255,280,298,],[-89,-88,-90,-91,-92,-94,-75,-111,-109,-116,-127,-97,-98,-118,-119,-85,-86,-129,142,143,-100,-101,-95,-100,-101,-96,-115,-120,-121,-93,-122,-123,-124,-125,-126,-112,154,-40,-41,-43,-102,-103,-104,-105,-106,-107,-108,-110,-113,-114,-129,-99,-117,162,163,164,166,167,168,142,-101,-39,-47,172,-44,-45,-42,-128,-46,240,250,251,252,263,289,302,]),'COMMA':([21,22,23,24,25,26,36,37,40,42,43,44,45,46,47,100,102,103,104,105,107,108,109,110,111,112,113,114,123,128,130,131,132,133,134,135,136,137,138,139,142,143,154,158,170,],[-89,-88,-90,-91,-92,-94,-75,-111,-109,-116,-127,-97,-98,-118,-119,-95,-100,-101,-96,-115,-120,-121,-93,-122,-123,-124,-125,-126,-112,155,-102,-103,-104,-105,-106,-107,-108,-110,-113,-114,-99,-117,-39,171,-128,]),'TERNARY_C':([21,22,23,24,25,26,36,37,40,42,43,44,45,46,47,100,102,103,104,105,107,108,109,110,111,112,113,114,123,130,131,132,133,134,135,136,137,138,139,140,142,143,154,170,],[-89,-88,-90,-91,-92,-94,-75,-111,-109,-116,-127,-97,-98,-118,-119,-95,-100,-101,-96,-115,-120,-121,-93,-122,-123,-124,-125,-126,-112,-102,-103,-104,-105,-106,-107,-108,-110,-113,-114,157,-99,-117,-39,-128,]),'LBRACE':([21,22,23,24,25,26,36,37,40,42,43,44,45,46,47,100,102,103,104,105,107,108,109,110,111,112,113,114,123,130,131,132,133,134,135,136,137,138,139,142,143,154,162,163,164,170,172,183,211,239,240,250,251,252,263,270,276,288,289,302,],[-89,-88,-90,-91,-92,-94,-75,-111,-109,-116,-127,-97,-98,-118,-119,-95,-100,-101,-96,-115,-120,-121,-93,-122,-123,-124,-125,-126,-112,-102,-103,-104,-105,-106,-107,-108,-110,-113,-114,-99,-117,-39,173,174,175,-128,178,212,233,248,249,258,259,260,274,277,282,294,295,305,]),'CASE':([173,254,258,297,],[180,180,267,267,]),'DEFAULT':([173,254,258,297,],[183,183,270,270,]),'RETURN':([178,189,190,197,198,199,200,201,217,219,220,221,222,223,224,225,226,227,259,260,275,277,278,279,282,284,286,287,294,295,303,304,305,307,308,],[209,209,-36,-28,-29,-30,-31,-32,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,209,209,-58,209,-129,-68,209,-63,-65,-66,209,209,-67,-69,209,-129,-64,]),'ELIF':([213,278,290,307,],[236,285,236,285,]),'ELSE':([213,278,290,307,],[239,288,239,288,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([0,174,175,212,233,248,249,274,],[2,184,185,234,245,256,257,281,]),'statement_list':([0,4,174,175,212,233,248,249,274,],[3,48,3,3,3,3,3,3,3,]),'statement':([0,4,174,175,212,233,248,249,274,],[4,4,4,4,4,4,4,4,4,]),'empty':([0,4,74,141,173,174,175,178,189,212,213,233,248,249,254,258,259,260,274,277,278,282,290,294,295,297,305,307,],[5,5,127,161,182,5,5,190,190,5,238,5,5,5,182,269,190,190,5,190,287,190,238,190,190,269,190,287,]),'var_assign':([0,4,96,174,175,178,189,212,231,233,248,249,259,260,274,277,282,294,295,305,],[6,6,147,6,6,191,191,6,244,6,6,6,191,191,6,191,191,191,191,191,]),'final_assign':([0,4,174,175,178,189,212,233,248,249,259,260,274,277,282,294,295,305,],[7,7,7,7,192,192,7,7,7,7,192,192,7,192,192,192,192,192,]),'var_compound_assign':([0,4,174,175,178,189,212,233,248,249,259,260,274,277,282,294,295,305,],[8,8,8,8,193,193,8,8,8,8,193,193,8,193,193,193,193,193,]),'concat_assign':([0,4,174,175,178,189,212,233,248,249,259,260,274,277,282,294,295,305,],[9,9,9,9,194,194,9,9,9,9,194,194,9,194,194,194,194,194,]),'var_auto':([0,4,174,175,178,186,189,212,233,248,249,259,260,273,274,277,282,294,295,305,],[10,10,10,10,195,215,195,10,10,10,10,195,195,280,10,195,195,195,195,195,]),'expr':([0,4,28,41,55,56,57,58,59,60,63,74,84,85,86,94,95,97,106,129,155,157,165,174,175,178,180,189,209,212,229,230,233,247,248,249,253,259,260,267,274,277,282,293,294,295,305,],[11,11,92,92,108,110,111,112,113,114,115,128,92,92,140,92,92,149,92,156,128,170,92,11,11,196,211,196,232,11,92,92,11,92,11,11,92,196,196,276,11,196,196,92,196,196,196,]),'func_stmt':([0,4,174,175,178,189,212,233,248,249,259,260,274,277,282,294,295,305,],[12,12,12,12,197,197,12,12,12,12,197,197,12,197,197,197,197,197,]),'switch_stmt':([0,4,174,175,212,233,248,249,274,],[13,13,13,13,13,13,13,13,13,]),'if_stmt':([0,4,174,175,212,233,248,249,274,],[14,14,14,14,14,14,14,14,14,]),'while_stmt':([0,4,174,175,212,233,248,249,274,],[15,15,15,15,15,15,15,15,15,]),'for_stmt':([0,4,174,175,212,233,248,249,274,],[16,16,16,16,16,16,16,16,16,]),'print_stmt':([0,4,174,175,178,189,212,233,248,249,259,260,274,277,282,294,295,305,],[17,17,17,17,202,202,17,17,17,17,202,202,17,202,202,202,202,202,]),'scan_stmt':([0,4,174,175,178,189,212,233,248,249,259,260,274,277,282,294,295,305,],[18,18,18,18,203,203,18,18,18,18,203,203,18,203,203,203,203,203,]),'var':([0,4,20,27,28,38,39,41,55,56,57,58,59,60,63,64,65,66,67,68,69,70,71,74,76,77,78,79,80,81,82,83,84,85,86,93,94,95,96,97,98,99,101,106,129,141,155,157,165,171,174,175,178,180,186,189,209,212,228,229,230,231,233,247,248,249,253,259,260,267,273,274,277,282,293,294,295,305,],[19,19,75,87,91,103,103,107,109,109,109,109,109,109,109,103,103,103,103,103,103,103,123,109,103,103,103,103,103,103,103,123,107,107,109,144,107,107,148,109,150,151,103,153,109,158,109,109,107,158,19,19,19,109,216,19,109,19,241,107,107,148,19,107,19,19,107,19,19,109,216,19,19,19,107,19,19,19,]),'num_expr':([0,4,28,41,55,56,57,58,59,60,63,64,65,66,67,68,69,70,74,76,77,78,79,80,81,82,84,85,86,94,95,97,101,106,129,155,157,165,174,175,178,180,189,209,212,229,230,233,247,248,249,253,259,260,267,274,277,282,293,294,295,305,],[21,21,88,21,21,21,21,21,21,21,21,116,117,118,119,120,121,122,21,130,131,132,133,134,135,136,21,21,21,21,21,21,152,88,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'string_expr':([0,4,28,41,55,56,57,58,59,60,63,71,74,83,84,85,86,94,95,97,106,129,155,157,165,174,175,178,180,189,209,212,229,230,233,247,248,249,253,259,260,267,274,277,282,293,294,295,305,],[22,22,22,22,22,22,22,22,22,22,22,124,22,137,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'boolean_expr':([0,4,28,41,55,56,57,58,59,60,63,74,84,85,86,94,95,97,106,129,155,157,165,174,175,178,180,189,209,212,229,230,233,247,248,249,253,259,260,267,274,277,282,293,294,295,305,],[23,23,89,105,23,23,23,23,23,23,23,23,138,139,23,145,146,23,89,23,23,23,176,23,23,23,23,23,23,23,242,243,23,255,23,23,261,23,23,23,23,23,23,298,23,23,23,]),'null_expr':([0,4,28,41,55,56,57,58,59,60,63,74,84,85,86,94,95,97,106,129,155,157,165,174,175,178,180,189,209,212,229,230,233,247,248,249,253,259,260,267,274,277,282,293,294,295,305,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'ternary_expr':([0,4,28,41,55,56,57,58,59,60,63,74,84,85,86,94,95,97,106,129,155,157,165,174,175,178,180,189,209,212,229,230,233,247,248,249,253,259,260,267,274,277,282,293,294,295,305,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'func_call':([0,4,28,38,39,41,55,56,57,58,59,60,63,64,65,66,67,68,69,70,74,76,77,78,79,80,81,82,84,85,86,94,95,97,101,106,129,155,157,165,174,175,178,180,189,209,212,229,230,233,247,248,249,253,259,260,267,274,277,282,293,294,295,305,],[26,26,90,102,102,26,26,26,26,26,26,26,26,102,102,102,102,102,102,102,26,102,102,102,102,102,102,102,26,26,26,26,26,26,102,90,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'num_factor':([0,4,28,38,39,41,55,56,57,58,59,60,63,64,65,66,67,68,69,70,74,76,77,78,79,80,81,82,84,85,86,94,95,97,101,106,129,155,157,165,174,175,178,180,189,209,212,229,230,233,247,248,249,253,259,260,267,274,277,282,293,294,295,305,],[40,40,40,100,104,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'boolean_factor':([0,4,28,41,55,56,57,58,59,60,63,74,84,85,86,94,95,97,106,129,155,157,165,174,175,178,180,189,209,212,229,230,233,247,248,249,253,259,260,267,274,277,282,293,294,295,305,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'comparison':([0,4,28,41,55,56,57,58,59,60,63,74,84,85,86,94,95,97,106,129,155,157,165,174,175,178,180,189,209,212,229,230,233,247,248,249,253,259,260,267,274,277,282,293,294,295,305,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'arguments_list':([74,],[125,]),'non_empty_arguments_list':([74,155,],[126,169,]),'parameters_list':([141,],[159,]),'non_empty_parameters_list':([141,171,],[160,177,]),'case':([173,254,],[179,262,]),'default_case':([173,254,],[181,181,]),'scoped_block':([178,259,260,277,282,294,295,305,],[187,271,272,283,291,299,300,306,]),'scoped_statement_list':([178,189,259,260,277,282,294,295,305,],[188,218,188,188,188,188,188,188,188,]),'scoped_statement':([178,189,259,260,277,282,294,295,305,],[189,189,189,189,189,189,189,189,189,]),'scoped_switch_stmt':([178,189,259,260,277,282,294,295,305,],[198,198,198,198,198,198,198,198,198,]),'scoped_if_stmt':([178,189,259,260,277,282,294,295,305,],[199,199,199,199,199,199,199,199,199,]),'scoped_while_stmt':([178,189,259,260,277,282,294,295,305,],[200,200,200,200,200,200,200,200,200,]),'scoped_for_stmt':([178,189,259,260,277,282,294,295,305,],[201,201,201,201,201,201,201,201,201,]),'return':([178,189,259,260,277,282,294,295,305,],[204,204,204,204,204,204,204,204,204,]),'elif_stmt':([213,290,],[235,296,]),'else_stmt':([213,290,],[237,237,]),'scoped_case':([258,297,],[266,301,]),'scoped_default_case':([258,297,],[268,268,]),'scoped_elif_stmt':([278,307,],[284,308,]),'scoped_else_stmt':([278,307,],[286,286,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','parser.py',31),
  ('block -> statement_list','block',1,'p_block','parser.py',42),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser.py',49),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser.py',50),
  ('statement -> var_assign SEMI','statement',2,'p_statement','parser.py',59),
  ('statement -> final_assign SEMI','statement',2,'p_statement','parser.py',60),
  ('statement -> var_compound_assign SEMI','statement',2,'p_statement','parser.py',61),
  ('statement -> concat_assign SEMI','statement',2,'p_statement','parser.py',62),
  ('statement -> var_auto SEMI','statement',2,'p_statement','parser.py',63),
  ('statement -> expr SEMI','statement',2,'p_statement','parser.py',64),
  ('statement -> func_stmt','statement',1,'p_statement','parser.py',65),
  ('statement -> switch_stmt','statement',1,'p_statement','parser.py',66),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',67),
  ('statement -> while_stmt','statement',1,'p_statement','parser.py',68),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',69),
  ('statement -> print_stmt SEMI','statement',2,'p_statement','parser.py',70),
  ('statement -> scan_stmt SEMI','statement',2,'p_statement','parser.py',71),
  ('statement -> empty','statement',1,'p_statement','parser.py',72),
  ('scoped_block -> scoped_statement_list','scoped_block',1,'p_scoped_block','parser.py',80),
  ('scoped_statement_list -> scoped_statement scoped_statement_list','scoped_statement_list',2,'p_scope_statement_list','parser.py',87),
  ('scoped_statement_list -> empty','scoped_statement_list',1,'p_scope_statement_list','parser.py',88),
  ('scoped_statement -> var_assign SEMI','scoped_statement',2,'p_scope_statement','parser.py',97),
  ('scoped_statement -> final_assign SEMI','scoped_statement',2,'p_scope_statement','parser.py',98),
  ('scoped_statement -> var_compound_assign SEMI','scoped_statement',2,'p_scope_statement','parser.py',99),
  ('scoped_statement -> concat_assign SEMI','scoped_statement',2,'p_scope_statement','parser.py',100),
  ('scoped_statement -> var_auto SEMI','scoped_statement',2,'p_scope_statement','parser.py',101),
  ('scoped_statement -> expr SEMI','scoped_statement',2,'p_scope_statement','parser.py',102),
  ('scoped_statement -> func_stmt','scoped_statement',1,'p_scope_statement','parser.py',103),
  ('scoped_statement -> scoped_switch_stmt','scoped_statement',1,'p_scope_statement','parser.py',104),
  ('scoped_statement -> scoped_if_stmt','scoped_statement',1,'p_scope_statement','parser.py',105),
  ('scoped_statement -> scoped_while_stmt','scoped_statement',1,'p_scope_statement','parser.py',106),
  ('scoped_statement -> scoped_for_stmt','scoped_statement',1,'p_scope_statement','parser.py',107),
  ('scoped_statement -> print_stmt SEMI','scoped_statement',2,'p_scope_statement','parser.py',108),
  ('scoped_statement -> scan_stmt SEMI','scoped_statement',2,'p_scope_statement','parser.py',109),
  ('scoped_statement -> return SEMI','scoped_statement',2,'p_scope_statement','parser.py',110),
  ('scoped_statement -> empty','scoped_statement',1,'p_scope_statement','parser.py',111),
  ('return -> RETURN expr','return',2,'p_return','parser.py',115),
  ('func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE','func_stmt',8,'p_func_stmt','parser.py',125),
  ('func_call -> var LPAREN arguments_list RPAREN','func_call',4,'p_func_call','parser.py',133),
  ('arguments_list -> non_empty_arguments_list','arguments_list',1,'p_arguments_list','parser.py',140),
  ('arguments_list -> empty','arguments_list',1,'p_arguments_list','parser.py',141),
  ('non_empty_arguments_list -> expr COMMA non_empty_arguments_list','non_empty_arguments_list',3,'p_non_empty_arguments_list','parser.py',145),
  ('non_empty_arguments_list -> expr','non_empty_arguments_list',1,'p_non_empty_arguments_list','parser.py',146),
  ('parameters_list -> non_empty_parameters_list','parameters_list',1,'p_parameters_list','parser.py',157),
  ('parameters_list -> empty','parameters_list',1,'p_parameters_list','parser.py',158),
  ('non_empty_parameters_list -> var COMMA non_empty_parameters_list','non_empty_parameters_list',3,'p_non_empty_parameters_list','parser.py',162),
  ('non_empty_parameters_list -> var','non_empty_parameters_list',1,'p_non_empty_parameters_list','parser.py',163),
  ('switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE','switch_stmt',7,'p_switch_stmt','parser.py',182),
  ('case -> CASE expr LBRACE block RBRACE case','case',6,'p_case','parser.py',186),
  ('case -> default_case','case',1,'p_case','parser.py',187),
  ('case -> empty','case',1,'p_case','parser.py',188),
  ('default_case -> DEFAULT LBRACE block RBRACE','default_case',4,'p_default_case','parser.py',200),
  ('if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt','if_stmt',8,'p_if_stmt','parser.py',207),
  ('elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt','elif_stmt',8,'p_elif_stmt','parser.py',215),
  ('elif_stmt -> else_stmt','elif_stmt',1,'p_elif_stmt','parser.py',216),
  ('elif_stmt -> empty','elif_stmt',1,'p_elif_stmt','parser.py',217),
  ('else_stmt -> ELSE LBRACE block RBRACE','else_stmt',4,'p_else_stmt','parser.py',230),
  ('scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE','scoped_switch_stmt',7,'p_scoped_switch_stmt','parser.py',237),
  ('scoped_case -> CASE expr LBRACE scoped_block RBRACE scoped_case','scoped_case',6,'p_scoped_case','parser.py',241),
  ('scoped_case -> scoped_default_case','scoped_case',1,'p_scoped_case','parser.py',242),
  ('scoped_case -> empty','scoped_case',1,'p_scoped_case','parser.py',243),
  ('scoped_default_case -> DEFAULT LBRACE scoped_block RBRACE','scoped_default_case',4,'p_scoped_default_case','parser.py',255),
  ('scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt','scoped_if_stmt',8,'p_scoped_if_stmt','parser.py',260),
  ('scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt','scoped_elif_stmt',8,'p_scoped_elif_stmt','parser.py',268),
  ('scoped_elif_stmt -> scoped_else_stmt','scoped_elif_stmt',1,'p_scoped_elif_stmt','parser.py',269),
  ('scoped_elif_stmt -> empty','scoped_elif_stmt',1,'p_scoped_elif_stmt','parser.py',270),
  ('scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE','scoped_else_stmt',4,'p_scoped_else_stmt','parser.py',283),
  ('scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE','scoped_while_stmt',7,'p_scoped_while_stmt','parser.py',288),
  ('scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE','scoped_for_stmt',11,'p_scoped_for_stmt','parser.py',294),
  ('print_stmt -> PRINT LPAREN expr RPAREN','print_stmt',4,'p_print_stmt','parser.py',304),
  ('scan_stmt -> SCANSTR LPAREN var RPAREN','scan_stmt',4,'p_scan_stmt','parser.py',308),
  ('scan_stmt -> SCANNUM LPAREN var RPAREN','scan_stmt',4,'p_scan_stmt','parser.py',309),
  ('while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE','while_stmt',7,'p_while_stmt','parser.py',317),
  ('for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE','for_stmt',11,'p_for_stmt','parser.py',323),
  ('var -> ID','var',1,'p_var','parser.py',335),
  ('var_assign -> var ASSIGN expr','var_assign',3,'p_var_assign','parser.py',340),
  ('final_assign -> FINAL var ASSIGN expr','final_assign',4,'p_final_assign','parser.py',346),
  ('var_compound_assign -> var PLUS_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',352),
  ('var_compound_assign -> var MINUS_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',353),
  ('var_compound_assign -> var TIMES_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',354),
  ('var_compound_assign -> var DIVIDE_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',355),
  ('var_compound_assign -> var POWER_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',356),
  ('var_compound_assign -> var MODULO_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',357),
  ('var_compound_assign -> var INT_DIVIDE_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',358),
  ('var_auto -> var INCREMENT','var_auto',2,'p_var_auto','parser.py',366),
  ('var_auto -> var DECREMENT','var_auto',2,'p_var_auto','parser.py',367),
  ('concat_assign -> var CONCAT_ASSIGN string_expr','concat_assign',3,'p_concat_assign','parser.py',373),
  ('expr -> string_expr','expr',1,'p_expr','parser.py',383),
  ('expr -> num_expr','expr',1,'p_expr','parser.py',384),
  ('expr -> boolean_expr','expr',1,'p_expr','parser.py',385),
  ('expr -> null_expr','expr',1,'p_expr','parser.py',386),
  ('expr -> ternary_expr','expr',1,'p_expr','parser.py',387),
  ('expr -> var','expr',1,'p_expr','parser.py',388),
  ('expr -> func_call','expr',1,'p_expr','parser.py',389),
  ('num_factor -> PLUS num_factor','num_factor',2,'p_num_factor','parser.py',395),
  ('num_factor -> MINUS num_factor','num_factor',2,'p_num_factor','parser.py',396),
  ('num_factor -> INTEGER','num_factor',1,'p_num_factor','parser.py',397),
  ('num_factor -> FLOAT','num_factor',1,'p_num_factor','parser.py',398),
  ('num_factor -> LPAREN num_expr RPAREN','num_factor',3,'p_num_factor','parser.py',399),
  ('num_factor -> func_call','num_factor',1,'p_num_factor','parser.py',400),
  ('num_factor -> var','num_factor',1,'p_num_factor','parser.py',401),
  ('num_expr -> num_expr PLUS num_expr','num_expr',3,'p_num_expr','parser.py',419),
  ('num_expr -> num_expr MINUS num_expr','num_expr',3,'p_num_expr','parser.py',420),
  ('num_expr -> num_expr TIMES num_expr','num_expr',3,'p_num_expr','parser.py',421),
  ('num_expr -> num_expr DIVIDE num_expr','num_expr',3,'p_num_expr','parser.py',422),
  ('num_expr -> num_expr INT_DIVIDE num_expr','num_expr',3,'p_num_expr','parser.py',423),
  ('num_expr -> num_expr POWER num_expr','num_expr',3,'p_num_expr','parser.py',424),
  ('num_expr -> num_expr MODULO num_expr','num_expr',3,'p_num_expr','parser.py',425),
  ('num_expr -> num_factor','num_expr',1,'p_num_expr','parser.py',426),
  ('string_expr -> string_expr CONCAT string_expr','string_expr',3,'p_string_expr','parser.py',440),
  ('string_expr -> STRING','string_expr',1,'p_string_expr','parser.py',441),
  ('string_expr -> var','string_expr',1,'p_string_expr','parser.py',442),
  ('boolean_expr -> boolean_expr AND boolean_expr','boolean_expr',3,'p_boolean_expr','parser.py',460),
  ('boolean_expr -> boolean_expr OR boolean_expr','boolean_expr',3,'p_boolean_expr','parser.py',461),
  ('boolean_expr -> NOT boolean_expr','boolean_expr',2,'p_boolean_expr','parser.py',462),
  ('boolean_expr -> boolean_factor','boolean_expr',1,'p_boolean_expr','parser.py',463),
  ('boolean_factor -> LPAREN boolean_expr RPAREN','boolean_factor',3,'p_boolean_factor','parser.py',481),
  ('boolean_factor -> BOOLEAN','boolean_factor',1,'p_boolean_factor','parser.py',482),
  ('boolean_factor -> comparison','boolean_factor',1,'p_boolean_factor','parser.py',483),
  ('boolean_factor -> var','boolean_factor',1,'p_boolean_factor','parser.py',484),
  ('comparison -> expr EQ expr','comparison',3,'p_comparison','parser.py',499),
  ('comparison -> expr NE expr','comparison',3,'p_comparison','parser.py',500),
  ('comparison -> expr LT expr','comparison',3,'p_comparison','parser.py',501),
  ('comparison -> expr GT expr','comparison',3,'p_comparison','parser.py',502),
  ('comparison -> expr LE expr','comparison',3,'p_comparison','parser.py',503),
  ('comparison -> expr GE expr','comparison',3,'p_comparison','parser.py',504),
  ('null_expr -> NULL','null_expr',1,'p_null_expr','parser.py',514),
  ('ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr','ternary_expr',5,'p_ternary_expr','parser.py',523),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',531),
]
