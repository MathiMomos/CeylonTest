
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEINT_DIVIDErightPOWERAND ASSIGN BOOLEAN CASE CLASS COMMA COMMENT_SINGLE CONCAT CONCAT_ASSIGN DECREMENT DEFAULT DIVIDE DIVIDE_ASSIGN DOT ELIF ELSE EQ FALSE FINAL FLOAT FN FOR FSTRING GE GT ID IF IN INCREMENT INTEGER INT_DIVIDE INT_DIVIDE_ASSIGN LBRACE LBRACKET LE LPAREN LT MINUS MINUS_ASSIGN MODULO MODULO_ASSIGN NE NOT NULL OR PLUS PLUS_ASSIGN POWER POWER_ASSIGN PRINT RBRACE RBRACKET RETURN RPAREN SCAN SEMI STRING SWITCH TERNARY_C TERNARY_Q TIMES TIMES_ASSIGN TONUM TOSTR TRUE WHILEprogram : blockblock : statement_liststatement_list : statement statement_list\n| emptystatement : var_assign SEMI\n| final_assign SEMI\n| var_compound_assign SEMI\n| concat_assign SEMI\n| var_auto SEMI\n| expr SEMI\n| func_stmt\n| switch_stmt\n| if_stmt\n| while_stmt\n| for_stmt\n| print_stmt SEMI\n| scan_stmt SEMI\n| emptyscoped_block : scoped_statement_listscoped_statement_list : scoped_statement scoped_statement_list\n| emptyscoped_statement : var_assign SEMI\n| final_assign SEMI\n| var_compound_assign SEMI\n| concat_assign SEMI\n| var_auto SEMI\n| expr SEMI\n| func_stmt\n| scoped_switch_stmt\n| scoped_if_stmt\n| scoped_while_stmt\n| scoped_for_stmt\n| print_stmt SEMI\n| scan_stmt SEMI\n| return SEMI\n| emptyreturn : RETURN exprfunc_stmt : FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACEfunc_call : var LPAREN arguments_list RPARENarguments_list : non_empty_arguments_list\n| emptynon_empty_arguments_list : expr COMMA non_empty_arguments_list\n| exprparameters_list : non_empty_parameters_list\n| emptynon_empty_parameters_list : var COMMA non_empty_parameters_list\n| varswitch_stmt : SWITCH LPAREN var RPAREN LBRACE case RBRACEcase : CASE expr LBRACE block RBRACE case\n| default_case\n| emptydefault_case : DEFAULT LBRACE block RBRACEif_stmt : IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmtelif_stmt : ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt\n| else_stmt\n| emptyelse_stmt : ELSE LBRACE block RBRACEscoped_switch_stmt : SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACEscoped_case : CASE expr LBRACE scoped_block RBRACE scoped_case\n| scoped_default_case\n| emptyscoped_default_case : DEFAULT LBRACE scoped_block RBRACEscoped_if_stmt : IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmtscoped_elif_stmt : ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt\n| scoped_else_stmt\n| emptyscoped_else_stmt : ELSE LBRACE scoped_block RBRACEscoped_while_stmt : WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACEscoped_for_stmt : FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACEprint_stmt : PRINT LPAREN expr RPARENscan_stmt : SCAN LPAREN var RPARENtostr_expr : TOSTR LPAREN expr RPARENto_num_expr : TONUM LPAREN expr RPARENwhile_stmt : WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACEfor_stmt : FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACEvar : IDvar_assign : var ASSIGN exprfinal_assign : FINAL var ASSIGN exprvar_compound_assign : var PLUS_ASSIGN num_expr\n| var MINUS_ASSIGN num_expr\n| var TIMES_ASSIGN num_expr\n| var DIVIDE_ASSIGN num_expr\n| var POWER_ASSIGN num_expr\n| var MODULO_ASSIGN num_expr\n| var INT_DIVIDE_ASSIGN num_exprvar_auto : var INCREMENT\n| var DECREMENTconcat_assign : var CONCAT_ASSIGN string_exprexpr : string_expr\n| num_expr\n| boolean_expr\n| null_expr\n| ternary_expr\n| var\n| func_call\n| tostr_expr\n| to_num_exprnum_factor : PLUS num_factor\n| MINUS num_factor\n| INTEGER\n| FLOAT\n| LPAREN num_expr RPAREN\n| func_call\n| varnum_expr : num_expr PLUS num_expr\n| num_expr MINUS num_expr\n| num_expr TIMES num_expr\n| num_expr DIVIDE num_expr\n| num_expr INT_DIVIDE num_expr\n| num_expr POWER num_expr\n| num_expr MODULO num_expr\n| num_factor\n| to_num_exprstring_expr : string_expr CONCAT string_expr\n| STRING\n| var\n| tostr_expr\n| num_exprboolean_expr : boolean_expr AND boolean_expr\n| boolean_expr OR boolean_expr\n| NOT boolean_expr\n| boolean_factorboolean_factor : LPAREN boolean_expr RPAREN\n| BOOLEAN\n| comparison\n| varcomparison : expr EQ expr\n| expr NE expr\n| expr LT expr\n| expr GT expr\n| expr LE expr\n| expr GE exprnull_expr : NULLternary_expr : boolean_expr TERNARY_Q expr TERNARY_C exprempty : '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,12,13,14,15,16,51,52,53,54,55,56,57,64,65,220,223,224,227,245,247,248,274,275,300,306,],[-135,0,-1,-2,-135,-4,-11,-12,-13,-14,-15,-3,-5,-6,-7,-8,-9,-10,-16,-17,-48,-135,-74,-38,-53,-55,-56,-57,-75,-135,-54,]),'FINAL':([0,4,5,12,13,14,15,16,52,53,54,55,56,57,64,65,184,185,188,199,200,207,208,209,210,211,220,222,223,224,227,229,230,231,232,233,234,235,236,237,243,245,247,248,258,259,269,270,274,275,284,285,287,288,289,292,294,296,297,300,304,305,306,313,314,315,317,318,],[20,20,-18,-11,-12,-13,-14,-15,-5,-6,-7,-8,-9,-10,-16,-17,20,20,20,20,-36,-28,-29,-30,-31,-32,-48,20,-135,-74,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,20,-53,-55,-56,20,20,20,20,-57,-75,20,-58,20,-135,-68,20,-63,-65,-66,-135,20,20,-54,-67,-69,20,-135,-64,]),'FN':([0,4,5,12,13,14,15,16,52,53,54,55,56,57,64,65,184,185,188,199,200,207,208,209,210,211,220,222,223,224,227,229,230,231,232,233,234,235,236,237,243,245,247,248,258,259,269,270,274,275,284,285,287,288,289,292,294,296,297,300,304,305,306,313,314,315,317,318,],[29,29,-18,-11,-12,-13,-14,-15,-5,-6,-7,-8,-9,-10,-16,-17,29,29,29,29,-36,-28,-29,-30,-31,-32,-48,29,-135,-74,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,29,-53,-55,-56,29,29,29,29,-57,-75,29,-58,29,-135,-68,29,-63,-65,-66,-135,29,29,-54,-67,-69,29,-135,-64,]),'SWITCH':([0,4,5,12,13,14,15,16,52,53,54,55,56,57,64,65,184,185,188,199,200,207,208,209,210,211,220,222,223,224,227,229,230,231,232,233,234,235,236,237,243,245,247,248,258,259,269,270,274,275,284,285,287,288,289,292,294,296,297,300,304,305,306,313,314,315,317,318,],[31,31,-18,-11,-12,-13,-14,-15,-5,-6,-7,-8,-9,-10,-16,-17,31,31,215,215,-36,-28,-29,-30,-31,-32,-48,31,-135,-74,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,31,-53,-55,-56,31,31,215,215,-57,-75,31,-58,215,-135,-68,215,-63,-65,-66,-135,215,215,-54,-67,-69,215,-135,-64,]),'IF':([0,4,5,12,13,14,15,16,52,53,54,55,56,57,64,65,184,185,188,199,200,207,208,209,210,211,220,222,223,224,227,229,230,231,232,233,234,235,236,237,243,245,247,248,258,259,269,270,274,275,284,285,287,288,289,292,294,296,297,300,304,305,306,313,314,315,317,318,],[32,32,-18,-11,-12,-13,-14,-15,-5,-6,-7,-8,-9,-10,-16,-17,32,32,216,216,-36,-28,-29,-30,-31,-32,-48,32,-135,-74,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,32,-53,-55,-56,32,32,216,216,-57,-75,32,-58,216,-135,-68,216,-63,-65,-66,-135,216,216,-54,-67,-69,216,-135,-64,]),'WHILE':([0,4,5,12,13,14,15,16,52,53,54,55,56,57,64,65,184,185,188,199,200,207,208,209,210,211,220,222,223,224,227,229,230,231,232,233,234,235,236,237,243,245,247,248,258,259,269,270,274,275,284,285,287,288,289,292,294,296,297,300,304,305,306,313,314,315,317,318,],[33,33,-18,-11,-12,-13,-14,-15,-5,-6,-7,-8,-9,-10,-16,-17,33,33,217,217,-36,-28,-29,-30,-31,-32,-48,33,-135,-74,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,33,-53,-55,-56,33,33,217,217,-57,-75,33,-58,217,-135,-68,217,-63,-65,-66,-135,217,217,-54,-67,-69,217,-135,-64,]),'FOR':([0,4,5,12,13,14,15,16,52,53,54,55,56,57,64,65,184,185,188,199,200,207,208,209,210,211,220,222,223,224,227,229,230,231,232,233,234,235,236,237,243,245,247,248,258,259,269,270,274,275,284,285,287,288,289,292,294,296,297,300,304,305,306,313,314,315,317,318,],[34,34,-18,-11,-12,-13,-14,-15,-5,-6,-7,-8,-9,-10,-16,-17,34,34,218,218,-36,-28,-29,-30,-31,-32,-48,34,-135,-74,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,34,-53,-55,-56,34,34,218,218,-57,-75,34,-58,218,-135,-68,218,-63,-65,-66,-135,218,218,-54,-67,-69,218,-135,-64,]),'PRINT':([0,4,5,12,13,14,15,16,52,53,54,55,56,57,64,65,184,185,188,199,200,207,208,209,210,211,220,222,223,224,227,229,230,231,232,233,234,235,236,237,243,245,247,248,258,259,269,270,274,275,284,285,287,288,289,292,294,296,297,300,304,305,306,313,314,315,317,318,],[35,35,-18,-11,-12,-13,-14,-15,-5,-6,-7,-8,-9,-10,-16,-17,35,35,35,35,-36,-28,-29,-30,-31,-32,-48,35,-135,-74,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,35,-53,-55,-56,35,35,35,35,-57,-75,35,-58,35,-135,-68,35,-63,-65,-66,-135,35,35,-54,-67,-69,35,-135,-64,]),'SCAN':([0,4,5,12,13,14,15,16,52,53,54,55,56,57,64,65,184,185,188,199,200,207,208,209,210,211,220,222,223,224,227,229,230,231,232,233,234,235,236,237,243,245,247,248,258,259,269,270,274,275,284,285,287,288,289,292,294,296,297,300,304,305,306,313,314,315,317,318,],[36,36,-18,-11,-12,-13,-14,-15,-5,-6,-7,-8,-9,-10,-16,-17,36,36,36,36,-36,-28,-29,-30,-31,-32,-48,36,-135,-74,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,36,-53,-55,-56,36,36,36,36,-57,-75,36,-58,36,-135,-68,36,-63,-65,-66,-135,36,36,-54,-67,-69,36,-135,-64,]),'ID':([0,4,5,12,13,14,15,16,20,29,30,39,40,42,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,79,80,81,82,83,84,85,86,87,88,89,97,98,99,100,101,102,104,109,111,112,137,149,164,166,174,181,184,185,188,190,196,199,200,207,208,209,210,211,219,220,222,223,224,227,229,230,231,232,233,234,235,236,237,238,239,240,241,243,245,247,248,257,258,259,263,269,270,274,275,277,283,284,285,287,288,289,292,294,296,297,300,303,304,305,306,313,314,315,317,318,],[37,37,-18,-11,-12,-13,-14,-15,37,37,37,37,37,37,-5,-6,-7,-8,-9,-10,37,37,37,37,37,37,-16,-17,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-36,-28,-29,-30,-31,-32,37,-48,37,-135,-74,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,37,37,37,37,37,-53,-55,-56,37,37,37,37,37,37,-57,-75,37,37,37,-58,37,-135,-68,37,-63,-65,-66,-135,37,37,37,-54,-67,-69,37,-135,-64,]),'STRING':([0,4,5,12,13,14,15,16,30,42,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,74,77,86,87,88,89,98,99,101,109,111,112,137,164,166,174,184,185,188,190,199,200,207,208,209,210,211,219,220,222,223,224,227,229,230,231,232,233,234,235,236,237,239,240,243,245,247,248,257,258,259,263,269,270,274,275,277,284,285,287,288,289,292,294,296,297,300,303,304,305,306,313,314,315,317,318,],[38,38,-18,-11,-12,-13,-14,-15,38,38,-5,-6,-7,-8,-9,-10,38,38,38,38,38,38,-16,-17,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-36,-28,-29,-30,-31,-32,38,-48,38,-135,-74,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,38,38,38,-53,-55,-56,38,38,38,38,38,38,-57,-75,38,38,-58,38,-135,-68,38,-63,-65,-66,-135,38,38,38,-54,-67,-69,38,-135,-64,]),'NOT':([0,4,5,12,13,14,15,16,30,42,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,77,87,88,89,98,99,101,109,111,112,137,164,166,174,184,185,188,190,199,200,207,208,209,210,211,219,220,222,223,224,227,229,230,231,232,233,234,235,236,237,239,240,243,245,247,248,257,258,259,263,269,270,274,275,277,284,285,287,288,289,292,294,296,297,300,303,304,305,306,313,314,315,317,318,],[42,42,-18,-11,-12,-13,-14,-15,42,42,-5,-6,-7,-8,-9,-10,42,42,42,42,42,42,-16,-17,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-36,-28,-29,-30,-31,-32,42,-48,42,-135,-74,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,42,42,42,-53,-55,-56,42,42,42,42,42,42,-57,-75,42,42,-58,42,-135,-68,42,-63,-65,-66,-135,42,42,42,-54,-67,-69,42,-135,-64,]),'NULL':([0,4,5,12,13,14,15,16,30,42,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,77,87,88,89,98,99,101,109,111,112,137,164,166,174,184,185,188,190,199,200,207,208,209,210,211,219,220,222,223,224,227,229,230,231,232,233,234,235,236,237,239,240,243,245,247,248,257,258,259,263,269,270,274,275,277,284,285,287,288,289,292,294,296,297,300,303,304,305,306,313,314,315,317,318,],[44,44,-18,-11,-12,-13,-14,-15,44,44,-5,-6,-7,-8,-9,-10,44,44,44,44,44,44,-16,-17,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-36,-28,-29,-30,-31,-32,44,-48,44,-135,-74,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,44,44,44,-53,-55,-56,44,44,44,44,44,44,-57,-75,44,44,-58,44,-135,-68,44,-63,-65,-66,-135,44,44,44,-54,-67,-69,44,-135,-64,]),'TOSTR':([0,4,5,12,13,14,15,16,30,42,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,74,77,86,87,88,89,98,99,101,109,111,112,137,164,166,174,184,185,188,190,199,200,207,208,209,210,211,219,220,222,223,224,227,229,230,231,232,233,234,235,236,237,239,240,243,245,247,248,257,258,259,263,269,270,274,275,277,284,285,287,288,289,292,294,296,297,300,303,304,305,306,313,314,315,317,318,],[45,45,-18,-11,-12,-13,-14,-15,45,45,-5,-6,-7,-8,-9,-10,45,45,45,45,45,45,-16,-17,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-36,-28,-29,-30,-31,-32,45,-48,45,-135,-74,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,45,45,45,-53,-55,-56,45,45,45,45,45,45,-57,-75,45,45,-58,45,-135,-68,45,-63,-65,-66,-135,45,45,45,-54,-67,-69,45,-135,-64,]),'TONUM':([0,4,5,12,13,14,15,16,30,42,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,79,80,81,82,83,84,85,86,87,88,89,98,99,101,104,109,111,112,137,164,166,174,184,185,188,190,199,200,207,208,209,210,211,219,220,222,223,224,227,229,230,231,232,233,234,235,236,237,239,240,243,245,247,248,257,258,259,263,269,270,274,275,277,284,285,287,288,289,292,294,296,297,300,303,304,305,306,313,314,315,317,318,],[46,46,-18,-11,-12,-13,-14,-15,46,46,-5,-6,-7,-8,-9,-10,46,46,46,46,46,46,-16,-17,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-36,-28,-29,-30,-31,-32,46,-48,46,-135,-74,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,46,46,46,-53,-55,-56,46,46,46,46,46,46,-57,-75,46,46,-58,46,-135,-68,46,-63,-65,-66,-135,46,46,46,-54,-67,-69,46,-135,-64,]),'PLUS':([0,4,5,12,13,14,15,16,19,21,26,28,30,37,39,40,41,42,47,48,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,79,80,81,82,83,84,85,86,87,88,89,91,93,94,95,98,99,101,103,104,105,106,107,109,110,111,112,114,121,122,123,124,125,126,127,128,129,132,137,138,139,140,141,142,143,144,150,159,160,163,164,166,174,178,184,185,188,190,199,200,207,208,209,210,211,219,220,222,223,224,227,229,230,231,232,233,234,235,236,237,239,240,243,245,247,248,257,258,259,263,269,270,274,275,277,284,285,287,288,289,292,294,296,297,300,303,304,305,306,313,314,315,317,318,],[39,39,-18,-11,-12,-13,-14,-15,-104,79,-103,-113,39,-76,39,39,-112,39,-100,-101,-5,-6,-7,-8,-9,-10,39,39,39,39,39,39,-16,-17,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,79,-113,-103,-104,39,39,39,-98,39,-103,-104,-99,39,-104,39,39,-104,79,-113,79,79,79,79,79,79,-104,79,39,-105,-106,-107,-108,-109,-110,79,-102,79,-104,-39,39,39,39,-73,39,39,39,39,39,-36,-28,-29,-30,-31,-32,39,-48,39,-135,-74,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,39,39,39,-53,-55,-56,39,39,39,39,39,39,-57,-75,39,39,-58,39,-135,-68,39,-63,-65,-66,-135,39,39,39,-54,-67,-69,39,-135,-64,]),'MINUS':([0,4,5,12,13,14,15,16,19,21,26,28,30,37,39,40,41,42,47,48,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,79,80,81,82,83,84,85,86,87,88,89,91,93,94,95,98,99,101,103,104,105,106,107,109,110,111,112,114,121,122,123,124,125,126,127,128,129,132,137,138,139,140,141,142,143,144,150,159,160,163,164,166,174,178,184,185,188,190,199,200,207,208,209,210,211,219,220,222,223,224,227,229,230,231,232,233,234,235,236,237,239,240,243,245,247,248,257,258,259,263,269,270,274,275,277,284,285,287,288,289,292,294,296,297,300,303,304,305,306,313,314,315,317,318,],[40,40,-18,-11,-12,-13,-14,-15,-104,80,-103,-113,40,-76,40,40,-112,40,-100,-101,-5,-6,-7,-8,-9,-10,40,40,40,40,40,40,-16,-17,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,80,-113,-103,-104,40,40,40,-98,40,-103,-104,-99,40,-104,40,40,-104,80,-113,80,80,80,80,80,80,-104,80,40,-105,-106,-107,-108,-109,-110,80,-102,80,-104,-39,40,40,40,-73,40,40,40,40,40,-36,-28,-29,-30,-31,-32,40,-48,40,-135,-74,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,40,40,40,-53,-55,-56,40,40,40,40,40,40,-57,-75,40,40,-58,40,-135,-68,40,-63,-65,-66,-135,40,40,40,-54,-67,-69,40,-135,-64,]),'INTEGER':([0,4,5,12,13,14,15,16,30,39,40,42,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,79,80,81,82,83,84,85,86,87,88,89,98,99,101,104,109,111,112,137,164,166,174,184,185,188,190,199,200,207,208,209,210,211,219,220,222,223,224,227,229,230,231,232,233,234,235,236,237,239,240,243,245,247,248,257,258,259,263,269,270,274,275,277,284,285,287,288,289,292,294,296,297,300,303,304,305,306,313,314,315,317,318,],[47,47,-18,-11,-12,-13,-14,-15,47,47,47,47,-5,-6,-7,-8,-9,-10,47,47,47,47,47,47,-16,-17,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-36,-28,-29,-30,-31,-32,47,-48,47,-135,-74,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,47,47,47,-53,-55,-56,47,47,47,47,47,47,-57,-75,47,47,-58,47,-135,-68,47,-63,-65,-66,-135,47,47,47,-54,-67,-69,47,-135,-64,]),'FLOAT':([0,4,5,12,13,14,15,16,30,39,40,42,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,79,80,81,82,83,84,85,86,87,88,89,98,99,101,104,109,111,112,137,164,166,174,184,185,188,190,199,200,207,208,209,210,211,219,220,222,223,224,227,229,230,231,232,233,234,235,236,237,239,240,243,245,247,248,257,258,259,263,269,270,274,275,277,284,285,287,288,289,292,294,296,297,300,303,304,305,306,313,314,315,317,318,],[48,48,-18,-11,-12,-13,-14,-15,48,48,48,48,-5,-6,-7,-8,-9,-10,48,48,48,48,48,48,-16,-17,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-36,-28,-29,-30,-31,-32,48,-48,48,-135,-74,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,48,48,48,-53,-55,-56,48,48,48,48,48,48,-57,-75,48,48,-58,48,-135,-68,48,-63,-65,-66,-135,48,48,48,-54,-67,-69,48,-135,-64,]),'LPAREN':([0,4,5,12,13,14,15,16,19,30,31,32,33,34,35,36,37,39,40,42,45,46,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,79,80,81,82,83,84,85,86,87,88,89,90,95,98,99,101,104,106,109,110,111,112,114,129,137,160,164,166,174,184,185,188,190,199,200,207,208,209,210,211,215,216,217,218,219,220,222,223,224,227,229,230,231,232,233,234,235,236,237,239,240,243,245,246,247,248,257,258,259,263,269,270,274,275,277,284,285,287,288,289,292,294,295,296,297,300,303,304,305,306,313,314,315,317,318,],[30,30,-18,-11,-12,-13,-14,-15,77,30,97,98,99,100,101,102,-76,104,104,109,111,112,-5,-6,-7,-8,-9,-10,30,30,30,30,30,30,-16,-17,30,104,104,104,104,104,104,104,104,30,104,104,104,104,104,104,104,104,109,109,30,149,77,109,109,30,104,77,109,77,30,30,77,77,30,77,30,30,109,30,30,30,30,30,-36,-28,-29,-30,-31,-32,238,239,240,241,30,-48,30,-135,-74,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,109,109,30,-53,257,-55,-56,109,30,30,109,30,30,-57,-75,30,30,-58,30,-135,-68,30,-63,303,-65,-66,-135,109,30,30,-54,-67,-69,30,-135,-64,]),'BOOLEAN':([0,4,5,12,13,14,15,16,30,42,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,77,87,88,89,98,99,101,109,111,112,137,164,166,174,184,185,188,190,199,200,207,208,209,210,211,219,220,222,223,224,227,229,230,231,232,233,234,235,236,237,239,240,243,245,247,248,257,258,259,263,269,270,274,275,277,284,285,287,288,289,292,294,296,297,300,303,304,305,306,313,314,315,317,318,],[49,49,-18,-11,-12,-13,-14,-15,49,49,-5,-6,-7,-8,-9,-10,49,49,49,49,49,49,-16,-17,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-36,-28,-29,-30,-31,-32,49,-48,49,-135,-74,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,49,49,49,-53,-55,-56,49,49,49,49,49,49,-57,-75,49,49,-58,49,-135,-68,49,-63,-65,-66,-135,49,49,49,-54,-67,-69,49,-135,-64,]),'RBRACE':([3,4,5,12,13,14,15,16,51,52,53,54,55,56,57,64,65,183,184,185,188,189,191,192,194,195,197,198,199,200,207,208,209,210,211,220,222,223,224,227,228,229,230,231,232,233,234,235,236,237,243,244,245,247,248,255,256,258,259,264,266,267,268,269,270,272,274,275,276,278,279,281,282,284,285,287,288,289,291,292,293,294,296,297,300,301,302,304,305,306,307,309,310,311,313,314,315,316,317,318,],[-2,-135,-4,-11,-12,-13,-14,-15,-3,-5,-6,-7,-8,-9,-10,-16,-17,-135,-135,-135,-135,220,-50,-51,223,224,227,-19,-135,-21,-28,-29,-30,-31,-32,-48,-135,-135,-74,-38,-20,-22,-23,-24,-25,-26,-27,-33,-34,-35,-135,256,-53,-55,-56,264,-52,-135,-135,-135,274,275,-135,-135,-135,-49,-57,-75,285,-60,-61,288,289,-135,-58,-135,-135,-68,300,-135,302,-63,-65,-66,-135,307,-62,-135,-135,-54,-135,313,314,-59,-67,-69,-135,317,-135,-64,]),'SEMI':([6,7,8,9,10,11,17,18,19,21,22,23,24,25,26,27,28,37,38,41,43,44,47,48,49,50,75,76,103,105,106,107,108,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,138,139,140,141,142,143,144,145,146,147,150,151,155,163,165,175,176,177,178,180,186,201,202,203,204,205,206,212,213,214,242,254,271,],[52,53,54,55,56,57,64,65,-94,-90,-89,-91,-92,-93,-95,-96,-97,-76,-115,-112,-122,-133,-100,-101,-124,-125,-86,-87,-98,-103,-104,-99,-121,-126,-127,-94,-128,-129,-130,-131,-132,-77,-79,-113,-80,-81,-82,-83,-84,-85,-104,-88,-117,-118,-105,-106,-107,-108,-109,-110,-111,-114,-119,-120,-102,-123,174,-39,-78,-70,-71,-72,-73,-134,196,229,230,231,232,233,234,235,236,237,-37,263,283,]),'EQ':([11,19,21,22,23,24,25,26,27,28,37,38,41,43,44,47,48,49,50,91,92,93,94,95,96,103,105,106,107,108,110,113,114,115,116,117,118,119,120,122,129,131,132,136,138,139,140,141,142,143,144,145,146,147,148,150,151,153,154,157,160,161,162,163,165,177,178,180,186,206,221,242,252,253,265,271,286,308,],[58,-94,-90,-89,-91,-92,-93,-95,-96,-97,-76,-115,-112,-122,-133,-100,-101,-124,-125,-90,-91,-97,-95,-94,58,-98,-103,-104,-99,-91,-94,58,-94,58,58,58,58,58,58,-113,-104,-117,-118,58,-105,-106,-107,-108,-109,-110,-111,-114,-91,-91,58,-102,-123,-91,-91,58,-94,58,58,-39,58,-72,-73,58,-91,58,58,58,-91,-91,-91,-91,58,-91,]),'NE':([11,19,21,22,23,24,25,26,27,28,37,38,41,43,44,47,48,49,50,91,92,93,94,95,96,103,105,106,107,108,110,113,114,115,116,117,118,119,120,122,129,131,132,136,138,139,140,141,142,143,144,145,146,147,148,150,151,153,154,157,160,161,162,163,165,177,178,180,186,206,221,242,252,253,265,271,286,308,],[59,-94,-90,-89,-91,-92,-93,-95,-96,-97,-76,-115,-112,-122,-133,-100,-101,-124,-125,-90,-91,-97,-95,-94,59,-98,-103,-104,-99,-91,-94,59,-94,59,59,59,59,59,59,-113,-104,-117,-118,59,-105,-106,-107,-108,-109,-110,-111,-114,-91,-91,59,-102,-123,-91,-91,59,-94,59,59,-39,59,-72,-73,59,-91,59,59,59,-91,-91,-91,-91,59,-91,]),'LT':([11,19,21,22,23,24,25,26,27,28,37,38,41,43,44,47,48,49,50,91,92,93,94,95,96,103,105,106,107,108,110,113,114,115,116,117,118,119,120,122,129,131,132,136,138,139,140,141,142,143,144,145,146,147,148,150,151,153,154,157,160,161,162,163,165,177,178,180,186,206,221,242,252,253,265,271,286,308,],[60,-94,-90,-89,-91,-92,-93,-95,-96,-97,-76,-115,-112,-122,-133,-100,-101,-124,-125,-90,-91,-97,-95,-94,60,-98,-103,-104,-99,-91,-94,60,-94,60,60,60,60,60,60,-113,-104,-117,-118,60,-105,-106,-107,-108,-109,-110,-111,-114,-91,-91,60,-102,-123,-91,-91,60,-94,60,60,-39,60,-72,-73,60,-91,60,60,60,-91,-91,-91,-91,60,-91,]),'GT':([11,19,21,22,23,24,25,26,27,28,37,38,41,43,44,47,48,49,50,91,92,93,94,95,96,103,105,106,107,108,110,113,114,115,116,117,118,119,120,122,129,131,132,136,138,139,140,141,142,143,144,145,146,147,148,150,151,153,154,157,160,161,162,163,165,177,178,180,186,206,221,242,252,253,265,271,286,308,],[61,-94,-90,-89,-91,-92,-93,-95,-96,-97,-76,-115,-112,-122,-133,-100,-101,-124,-125,-90,-91,-97,-95,-94,61,-98,-103,-104,-99,-91,-94,61,-94,61,61,61,61,61,61,-113,-104,-117,-118,61,-105,-106,-107,-108,-109,-110,-111,-114,-91,-91,61,-102,-123,-91,-91,61,-94,61,61,-39,61,-72,-73,61,-91,61,61,61,-91,-91,-91,-91,61,-91,]),'LE':([11,19,21,22,23,24,25,26,27,28,37,38,41,43,44,47,48,49,50,91,92,93,94,95,96,103,105,106,107,108,110,113,114,115,116,117,118,119,120,122,129,131,132,136,138,139,140,141,142,143,144,145,146,147,148,150,151,153,154,157,160,161,162,163,165,177,178,180,186,206,221,242,252,253,265,271,286,308,],[62,-94,-90,-89,-91,-92,-93,-95,-96,-97,-76,-115,-112,-122,-133,-100,-101,-124,-125,-90,-91,-97,-95,-94,62,-98,-103,-104,-99,-91,-94,62,-94,62,62,62,62,62,62,-113,-104,-117,-118,62,-105,-106,-107,-108,-109,-110,-111,-114,-91,-91,62,-102,-123,-91,-91,62,-94,62,62,-39,62,-72,-73,62,-91,62,62,62,-91,-91,-91,-91,62,-91,]),'GE':([11,19,21,22,23,24,25,26,27,28,37,38,41,43,44,47,48,49,50,91,92,93,94,95,96,103,105,106,107,108,110,113,114,115,116,117,118,119,120,122,129,131,132,136,138,139,140,141,142,143,144,145,146,147,148,150,151,153,154,157,160,161,162,163,165,177,178,180,186,206,221,242,252,253,265,271,286,308,],[63,-94,-90,-89,-91,-92,-93,-95,-96,-97,-76,-115,-112,-122,-133,-100,-101,-124,-125,-90,-91,-97,-95,-94,63,-98,-103,-104,-99,-91,-94,63,-94,63,63,63,63,63,63,-113,-104,-117,-118,63,-105,-106,-107,-108,-109,-110,-111,-114,-91,-91,63,-102,-123,-91,-91,63,-94,63,63,-39,63,-72,-73,63,-91,63,63,63,-91,-91,-91,-91,63,-91,]),'ASSIGN':([19,37,78,156,],[66,-76,137,66,]),'PLUS_ASSIGN':([19,37,],[67,-76,]),'MINUS_ASSIGN':([19,37,],[68,-76,]),'TIMES_ASSIGN':([19,37,],[69,-76,]),'DIVIDE_ASSIGN':([19,37,],[70,-76,]),'POWER_ASSIGN':([19,37,],[71,-76,]),'MODULO_ASSIGN':([19,37,],[72,-76,]),'INT_DIVIDE_ASSIGN':([19,37,],[73,-76,]),'CONCAT_ASSIGN':([19,37,],[74,-76,]),'INCREMENT':([19,37,226,],[75,-76,75,]),'DECREMENT':([19,37,226,],[76,-76,76,]),'CONCAT':([19,21,22,26,27,28,37,38,41,47,48,91,93,94,95,103,105,106,107,110,114,122,129,130,131,132,138,139,140,141,142,143,144,145,150,160,163,177,178,],[-104,-118,86,-103,-117,-113,-76,-115,-112,-100,-101,-118,-113,-103,-104,-98,-103,-104,-99,-104,-104,-113,-104,86,-117,-118,-105,-106,-107,-108,-109,-110,-111,86,-102,-104,-39,-72,-73,]),'TIMES':([19,21,26,28,37,41,47,48,91,93,94,95,103,105,106,107,110,114,121,122,123,124,125,126,127,128,129,132,138,139,140,141,142,143,144,150,159,160,163,178,],[-104,81,-103,-113,-76,-112,-100,-101,81,-113,-103,-104,-98,-103,-104,-99,-104,-104,81,-113,81,81,81,81,81,81,-104,81,81,81,-107,-108,-109,-110,81,-102,81,-104,-39,-73,]),'DIVIDE':([19,21,26,28,37,41,47,48,91,93,94,95,103,105,106,107,110,114,121,122,123,124,125,126,127,128,129,132,138,139,140,141,142,143,144,150,159,160,163,178,],[-104,82,-103,-113,-76,-112,-100,-101,82,-113,-103,-104,-98,-103,-104,-99,-104,-104,82,-113,82,82,82,82,82,82,-104,82,82,82,-107,-108,-109,-110,82,-102,82,-104,-39,-73,]),'INT_DIVIDE':([19,21,26,28,37,41,47,48,91,93,94,95,103,105,106,107,110,114,121,122,123,124,125,126,127,128,129,132,138,139,140,141,142,143,144,150,159,160,163,178,],[-104,83,-103,-113,-76,-112,-100,-101,83,-113,-103,-104,-98,-103,-104,-99,-104,-104,83,-113,83,83,83,83,83,83,-104,83,83,83,-107,-108,-109,-110,83,-102,83,-104,-39,-73,]),'POWER':([19,21,26,28,37,41,47,48,91,93,94,95,103,105,106,107,110,114,121,122,123,124,125,126,127,128,129,132,138,139,140,141,142,143,144,150,159,160,163,178,],[-104,84,-103,-113,-76,-112,-100,-101,84,-113,-103,-104,-98,-103,-104,-99,-104,-104,84,-113,84,84,84,84,84,84,-104,84,84,84,84,84,84,84,84,-102,84,-104,-39,-73,]),'MODULO':([19,21,26,28,37,41,47,48,91,93,94,95,103,105,106,107,110,114,121,122,123,124,125,126,127,128,129,132,138,139,140,141,142,143,144,150,159,160,163,178,],[-104,85,-103,-113,-76,-112,-100,-101,85,-113,-103,-104,-98,-103,-104,-99,-104,-104,85,-113,85,85,85,85,85,85,-104,85,-105,-106,-107,-108,-109,-110,85,-102,85,-104,-39,-73,]),'AND':([19,21,22,23,24,25,26,27,28,37,38,41,43,44,47,48,49,50,92,95,103,105,106,107,108,110,113,114,115,116,117,118,119,122,129,131,132,138,139,140,141,142,143,144,145,146,147,150,151,153,154,160,163,177,178,180,186,252,253,265,271,308,],[-126,-90,-89,87,-92,-93,-95,-96,-97,-76,-115,-112,-122,-133,-100,-101,-124,-125,87,-126,-98,-103,-104,-99,87,-126,-127,-94,-128,-129,-130,-131,-132,-113,-104,-117,-118,-105,-106,-107,-108,-109,-110,-111,-114,87,87,-102,-123,87,87,-126,-39,-72,-73,-134,87,87,87,87,87,87,]),'OR':([19,21,22,23,24,25,26,27,28,37,38,41,43,44,47,48,49,50,92,95,103,105,106,107,108,110,113,114,115,116,117,118,119,122,129,131,132,138,139,140,141,142,143,144,145,146,147,150,151,153,154,160,163,177,178,180,186,252,253,265,271,308,],[-126,-90,-89,88,-92,-93,-95,-96,-97,-76,-115,-112,-122,-133,-100,-101,-124,-125,88,-126,-98,-103,-104,-99,88,-126,-127,-94,-128,-129,-130,-131,-132,-113,-104,-117,-118,-105,-106,-107,-108,-109,-110,-111,-114,88,88,-102,-123,88,88,-126,-39,-72,-73,-134,88,88,88,88,88,88,]),'TERNARY_Q':([19,21,22,23,24,25,26,27,28,37,38,41,43,44,47,48,49,50,92,95,103,105,106,107,108,110,113,114,115,116,117,118,119,122,129,131,132,138,139,140,141,142,143,144,145,146,147,150,151,153,154,160,163,177,178,180,186,252,253,265,271,308,],[-126,-90,-89,89,-92,-93,-95,-96,-97,-76,-115,-112,-122,-133,-100,-101,-124,-125,89,-126,-98,-103,-104,-99,89,-126,-127,-94,-128,-129,-130,-131,-132,-113,-104,-117,-118,-105,-106,-107,-108,-109,-110,-111,-114,89,89,-102,-123,89,89,-126,-39,-72,-73,-134,89,89,89,89,89,89,]),'RPAREN':([21,22,23,24,25,26,27,28,37,38,41,43,44,47,48,49,50,75,76,77,91,92,93,94,95,103,105,106,107,108,110,113,114,115,116,117,118,119,122,129,131,132,133,134,135,136,138,139,140,141,142,143,144,145,146,147,149,150,151,152,153,154,157,158,159,160,161,162,163,167,168,169,170,177,178,179,180,187,225,251,252,253,265,290,308,],[-90,-89,-91,-92,-93,-95,-96,-97,-76,-115,-112,-122,-133,-100,-101,-124,-125,-86,-87,-135,150,151,-113,-103,-104,-98,-103,-104,-99,-121,-126,-127,-94,-128,-129,-130,-131,-132,-113,-104,-117,-118,163,-40,-41,-43,-105,-106,-107,-108,-109,-110,-111,-114,-119,-120,-135,-102,-123,171,172,173,175,176,150,-104,177,178,-39,-47,182,-44,-45,-72,-73,-42,-134,-46,250,260,261,262,273,299,312,]),'COMMA':([21,22,23,24,25,26,27,28,37,38,41,43,44,47,48,49,50,103,105,106,107,108,110,113,114,115,116,117,118,119,122,129,131,132,136,138,139,140,141,142,143,144,145,146,147,150,151,163,167,177,178,180,],[-90,-89,-91,-92,-93,-95,-96,-97,-76,-115,-112,-122,-133,-100,-101,-124,-125,-98,-103,-104,-99,-121,-126,-127,-94,-128,-129,-130,-131,-132,-113,-104,-117,-118,164,-105,-106,-107,-108,-109,-110,-111,-114,-119,-120,-102,-123,-39,181,-72,-73,-134,]),'TERNARY_C':([21,22,23,24,25,26,27,28,37,38,41,43,44,47,48,49,50,103,105,106,107,108,110,113,114,115,116,117,118,119,122,129,131,132,138,139,140,141,142,143,144,145,146,147,148,150,151,163,177,178,180,],[-90,-89,-91,-92,-93,-95,-96,-97,-76,-115,-112,-122,-133,-100,-101,-124,-125,-98,-103,-104,-99,-121,-126,-127,-94,-128,-129,-130,-131,-132,-113,-104,-117,-118,-105,-106,-107,-108,-109,-110,-111,-114,-119,-120,166,-102,-123,-39,-72,-73,-134,]),'LBRACE':([21,22,23,24,25,26,27,28,37,38,41,43,44,47,48,49,50,103,105,106,107,108,110,113,114,115,116,117,118,119,122,129,131,132,138,139,140,141,142,143,144,145,146,147,150,151,163,171,172,173,177,178,180,182,193,221,249,250,260,261,262,273,280,286,298,299,312,],[-90,-89,-91,-92,-93,-95,-96,-97,-76,-115,-112,-122,-133,-100,-101,-124,-125,-98,-103,-104,-99,-121,-126,-127,-94,-128,-129,-130,-131,-132,-113,-104,-117,-118,-105,-106,-107,-108,-109,-110,-111,-114,-119,-120,-102,-123,-39,183,184,185,-72,-73,-134,188,222,243,258,259,268,269,270,284,287,292,304,305,315,]),'CASE':([183,264,268,307,],[190,190,277,277,]),'DEFAULT':([183,264,268,307,],[193,193,280,280,]),'RETURN':([188,199,200,207,208,209,210,211,227,229,230,231,232,233,234,235,236,237,269,270,285,287,288,289,292,294,296,297,304,305,313,314,315,317,318,],[219,219,-36,-28,-29,-30,-31,-32,-38,-22,-23,-24,-25,-26,-27,-33,-34,-35,219,219,-58,219,-135,-68,219,-63,-65,-66,219,219,-67,-69,219,-135,-64,]),'ELIF':([223,288,300,317,],[246,295,246,295,]),'ELSE':([223,288,300,317,],[249,298,249,298,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([0,184,185,222,243,258,259,284,],[2,194,195,244,255,266,267,291,]),'statement_list':([0,4,184,185,222,243,258,259,284,],[3,51,3,3,3,3,3,3,3,]),'statement':([0,4,184,185,222,243,258,259,284,],[4,4,4,4,4,4,4,4,4,]),'empty':([0,4,77,149,183,184,185,188,199,222,223,243,258,259,264,268,269,270,284,287,288,292,300,304,305,307,315,317,],[5,5,135,170,192,5,5,200,200,5,248,5,5,5,192,279,200,200,5,200,297,200,248,200,200,279,200,297,]),'var_assign':([0,4,100,184,185,188,199,222,241,243,258,259,269,270,284,287,292,304,305,315,],[6,6,155,6,6,201,201,6,254,6,6,6,201,201,6,201,201,201,201,201,]),'final_assign':([0,4,184,185,188,199,222,243,258,259,269,270,284,287,292,304,305,315,],[7,7,7,7,202,202,7,7,7,7,202,202,7,202,202,202,202,202,]),'var_compound_assign':([0,4,184,185,188,199,222,243,258,259,269,270,284,287,292,304,305,315,],[8,8,8,8,203,203,8,8,8,8,203,203,8,203,203,203,203,203,]),'concat_assign':([0,4,184,185,188,199,222,243,258,259,269,270,284,287,292,304,305,315,],[9,9,9,9,204,204,9,9,9,9,204,204,9,204,204,204,204,204,]),'var_auto':([0,4,184,185,188,196,199,222,243,258,259,269,270,283,284,287,292,304,305,315,],[10,10,10,10,205,225,205,10,10,10,10,205,205,290,10,205,205,205,205,205,]),'expr':([0,4,30,42,58,59,60,61,62,63,66,77,87,88,89,98,99,101,109,111,112,137,164,166,174,184,185,188,190,199,219,222,239,240,243,257,258,259,263,269,270,277,284,287,292,303,304,305,315,],[11,11,96,96,113,115,116,117,118,119,120,136,96,96,148,96,96,157,96,161,162,165,136,180,96,11,11,206,221,206,242,11,96,96,11,96,11,11,96,206,206,286,11,206,206,96,206,206,206,]),'func_stmt':([0,4,184,185,188,199,222,243,258,259,269,270,284,287,292,304,305,315,],[12,12,12,12,207,207,12,12,12,12,207,207,12,207,207,207,207,207,]),'switch_stmt':([0,4,184,185,222,243,258,259,284,],[13,13,13,13,13,13,13,13,13,]),'if_stmt':([0,4,184,185,222,243,258,259,284,],[14,14,14,14,14,14,14,14,14,]),'while_stmt':([0,4,184,185,222,243,258,259,284,],[15,15,15,15,15,15,15,15,15,]),'for_stmt':([0,4,184,185,222,243,258,259,284,],[16,16,16,16,16,16,16,16,16,]),'print_stmt':([0,4,184,185,188,199,222,243,258,259,269,270,284,287,292,304,305,315,],[17,17,17,17,212,212,17,17,17,17,212,212,17,212,212,212,212,212,]),'scan_stmt':([0,4,184,185,188,199,222,243,258,259,269,270,284,287,292,304,305,315,],[18,18,18,18,213,213,18,18,18,18,213,213,18,213,213,213,213,213,]),'var':([0,4,20,29,30,39,40,42,58,59,60,61,62,63,66,67,68,69,70,71,72,73,74,77,79,80,81,82,83,84,85,86,87,88,89,97,98,99,100,101,102,104,109,111,112,137,149,164,166,174,181,184,185,188,190,196,199,219,222,238,239,240,241,243,257,258,259,263,269,270,277,283,284,287,292,303,304,305,315,],[19,19,78,90,95,106,106,110,114,114,114,114,114,114,114,106,106,106,106,106,106,106,129,114,106,106,106,106,106,106,106,129,110,110,114,152,110,110,156,114,158,106,160,114,114,114,167,114,114,110,167,19,19,19,114,226,19,114,19,251,110,110,156,19,110,19,19,110,19,19,114,226,19,19,19,110,19,19,19,]),'num_expr':([0,4,30,42,58,59,60,61,62,63,66,67,68,69,70,71,72,73,74,77,79,80,81,82,83,84,85,86,87,88,89,98,99,101,104,109,111,112,137,164,166,174,184,185,188,190,199,219,222,239,240,243,257,258,259,263,269,270,277,284,287,292,303,304,305,315,],[21,21,91,21,21,21,21,21,21,21,21,121,123,124,125,126,127,128,132,21,138,139,140,141,142,143,144,132,21,21,21,21,21,21,159,91,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'string_expr':([0,4,30,42,58,59,60,61,62,63,66,74,77,86,87,88,89,98,99,101,109,111,112,137,164,166,174,184,185,188,190,199,219,222,239,240,243,257,258,259,263,269,270,277,284,287,292,303,304,305,315,],[22,22,22,22,22,22,22,22,22,22,22,130,22,145,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'boolean_expr':([0,4,30,42,58,59,60,61,62,63,66,77,87,88,89,98,99,101,109,111,112,137,164,166,174,184,185,188,190,199,219,222,239,240,243,257,258,259,263,269,270,277,284,287,292,303,304,305,315,],[23,23,92,108,23,23,23,23,23,23,23,23,146,147,23,153,154,23,92,23,23,23,23,23,186,23,23,23,23,23,23,23,252,253,23,265,23,23,271,23,23,23,23,23,23,308,23,23,23,]),'null_expr':([0,4,30,42,58,59,60,61,62,63,66,77,87,88,89,98,99,101,109,111,112,137,164,166,174,184,185,188,190,199,219,222,239,240,243,257,258,259,263,269,270,277,284,287,292,303,304,305,315,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'ternary_expr':([0,4,30,42,58,59,60,61,62,63,66,77,87,88,89,98,99,101,109,111,112,137,164,166,174,184,185,188,190,199,219,222,239,240,243,257,258,259,263,269,270,277,284,287,292,303,304,305,315,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'func_call':([0,4,30,39,40,42,58,59,60,61,62,63,66,67,68,69,70,71,72,73,74,77,79,80,81,82,83,84,85,86,87,88,89,98,99,101,104,109,111,112,137,164,166,174,184,185,188,190,199,219,222,239,240,243,257,258,259,263,269,270,277,284,287,292,303,304,305,315,],[26,26,94,105,105,26,26,26,26,26,26,26,26,105,105,105,105,105,105,105,105,26,105,105,105,105,105,105,105,105,26,26,26,26,26,26,105,94,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'tostr_expr':([0,4,30,42,58,59,60,61,62,63,66,74,77,86,87,88,89,98,99,101,109,111,112,137,164,166,174,184,185,188,190,199,219,222,239,240,243,257,258,259,263,269,270,277,284,287,292,303,304,305,315,],[27,27,27,27,27,27,27,27,27,27,27,131,27,131,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'to_num_expr':([0,4,30,42,58,59,60,61,62,63,66,67,68,69,70,71,72,73,74,77,79,80,81,82,83,84,85,86,87,88,89,98,99,101,104,109,111,112,137,164,166,174,184,185,188,190,199,219,222,239,240,243,257,258,259,263,269,270,277,284,287,292,303,304,305,315,],[28,28,93,28,28,28,28,28,28,28,28,122,122,122,122,122,122,122,122,28,122,122,122,122,122,122,122,122,28,28,28,28,28,28,122,93,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'num_factor':([0,4,30,39,40,42,58,59,60,61,62,63,66,67,68,69,70,71,72,73,74,77,79,80,81,82,83,84,85,86,87,88,89,98,99,101,104,109,111,112,137,164,166,174,184,185,188,190,199,219,222,239,240,243,257,258,259,263,269,270,277,284,287,292,303,304,305,315,],[41,41,41,103,107,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'boolean_factor':([0,4,30,42,58,59,60,61,62,63,66,77,87,88,89,98,99,101,109,111,112,137,164,166,174,184,185,188,190,199,219,222,239,240,243,257,258,259,263,269,270,277,284,287,292,303,304,305,315,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'comparison':([0,4,30,42,58,59,60,61,62,63,66,77,87,88,89,98,99,101,109,111,112,137,164,166,174,184,185,188,190,199,219,222,239,240,243,257,258,259,263,269,270,277,284,287,292,303,304,305,315,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'arguments_list':([77,],[133,]),'non_empty_arguments_list':([77,164,],[134,179,]),'parameters_list':([149,],[168,]),'non_empty_parameters_list':([149,181,],[169,187,]),'case':([183,264,],[189,272,]),'default_case':([183,264,],[191,191,]),'scoped_block':([188,269,270,287,292,304,305,315,],[197,281,282,293,301,309,310,316,]),'scoped_statement_list':([188,199,269,270,287,292,304,305,315,],[198,228,198,198,198,198,198,198,198,]),'scoped_statement':([188,199,269,270,287,292,304,305,315,],[199,199,199,199,199,199,199,199,199,]),'scoped_switch_stmt':([188,199,269,270,287,292,304,305,315,],[208,208,208,208,208,208,208,208,208,]),'scoped_if_stmt':([188,199,269,270,287,292,304,305,315,],[209,209,209,209,209,209,209,209,209,]),'scoped_while_stmt':([188,199,269,270,287,292,304,305,315,],[210,210,210,210,210,210,210,210,210,]),'scoped_for_stmt':([188,199,269,270,287,292,304,305,315,],[211,211,211,211,211,211,211,211,211,]),'return':([188,199,269,270,287,292,304,305,315,],[214,214,214,214,214,214,214,214,214,]),'elif_stmt':([223,300,],[245,306,]),'else_stmt':([223,300,],[247,247,]),'scoped_case':([268,307,],[276,311,]),'scoped_default_case':([268,307,],[278,278,]),'scoped_elif_stmt':([288,317,],[294,318,]),'scoped_else_stmt':([288,317,],[296,296,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','parser.py',31),
  ('block -> statement_list','block',1,'p_block','parser.py',42),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser.py',49),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser.py',50),
  ('statement -> var_assign SEMI','statement',2,'p_statement','parser.py',59),
  ('statement -> final_assign SEMI','statement',2,'p_statement','parser.py',60),
  ('statement -> var_compound_assign SEMI','statement',2,'p_statement','parser.py',61),
  ('statement -> concat_assign SEMI','statement',2,'p_statement','parser.py',62),
  ('statement -> var_auto SEMI','statement',2,'p_statement','parser.py',63),
  ('statement -> expr SEMI','statement',2,'p_statement','parser.py',64),
  ('statement -> func_stmt','statement',1,'p_statement','parser.py',65),
  ('statement -> switch_stmt','statement',1,'p_statement','parser.py',66),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',67),
  ('statement -> while_stmt','statement',1,'p_statement','parser.py',68),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',69),
  ('statement -> print_stmt SEMI','statement',2,'p_statement','parser.py',70),
  ('statement -> scan_stmt SEMI','statement',2,'p_statement','parser.py',71),
  ('statement -> empty','statement',1,'p_statement','parser.py',72),
  ('scoped_block -> scoped_statement_list','scoped_block',1,'p_scoped_block','parser.py',80),
  ('scoped_statement_list -> scoped_statement scoped_statement_list','scoped_statement_list',2,'p_scope_statement_list','parser.py',87),
  ('scoped_statement_list -> empty','scoped_statement_list',1,'p_scope_statement_list','parser.py',88),
  ('scoped_statement -> var_assign SEMI','scoped_statement',2,'p_scope_statement','parser.py',97),
  ('scoped_statement -> final_assign SEMI','scoped_statement',2,'p_scope_statement','parser.py',98),
  ('scoped_statement -> var_compound_assign SEMI','scoped_statement',2,'p_scope_statement','parser.py',99),
  ('scoped_statement -> concat_assign SEMI','scoped_statement',2,'p_scope_statement','parser.py',100),
  ('scoped_statement -> var_auto SEMI','scoped_statement',2,'p_scope_statement','parser.py',101),
  ('scoped_statement -> expr SEMI','scoped_statement',2,'p_scope_statement','parser.py',102),
  ('scoped_statement -> func_stmt','scoped_statement',1,'p_scope_statement','parser.py',103),
  ('scoped_statement -> scoped_switch_stmt','scoped_statement',1,'p_scope_statement','parser.py',104),
  ('scoped_statement -> scoped_if_stmt','scoped_statement',1,'p_scope_statement','parser.py',105),
  ('scoped_statement -> scoped_while_stmt','scoped_statement',1,'p_scope_statement','parser.py',106),
  ('scoped_statement -> scoped_for_stmt','scoped_statement',1,'p_scope_statement','parser.py',107),
  ('scoped_statement -> print_stmt SEMI','scoped_statement',2,'p_scope_statement','parser.py',108),
  ('scoped_statement -> scan_stmt SEMI','scoped_statement',2,'p_scope_statement','parser.py',109),
  ('scoped_statement -> return SEMI','scoped_statement',2,'p_scope_statement','parser.py',110),
  ('scoped_statement -> empty','scoped_statement',1,'p_scope_statement','parser.py',111),
  ('return -> RETURN expr','return',2,'p_return','parser.py',115),
  ('func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE','func_stmt',8,'p_func_stmt','parser.py',125),
  ('func_call -> var LPAREN arguments_list RPAREN','func_call',4,'p_func_call','parser.py',133),
  ('arguments_list -> non_empty_arguments_list','arguments_list',1,'p_arguments_list','parser.py',140),
  ('arguments_list -> empty','arguments_list',1,'p_arguments_list','parser.py',141),
  ('non_empty_arguments_list -> expr COMMA non_empty_arguments_list','non_empty_arguments_list',3,'p_non_empty_arguments_list','parser.py',145),
  ('non_empty_arguments_list -> expr','non_empty_arguments_list',1,'p_non_empty_arguments_list','parser.py',146),
  ('parameters_list -> non_empty_parameters_list','parameters_list',1,'p_parameters_list','parser.py',157),
  ('parameters_list -> empty','parameters_list',1,'p_parameters_list','parser.py',158),
  ('non_empty_parameters_list -> var COMMA non_empty_parameters_list','non_empty_parameters_list',3,'p_non_empty_parameters_list','parser.py',162),
  ('non_empty_parameters_list -> var','non_empty_parameters_list',1,'p_non_empty_parameters_list','parser.py',163),
  ('switch_stmt -> SWITCH LPAREN var RPAREN LBRACE case RBRACE','switch_stmt',7,'p_switch_stmt','parser.py',182),
  ('case -> CASE expr LBRACE block RBRACE case','case',6,'p_case','parser.py',186),
  ('case -> default_case','case',1,'p_case','parser.py',187),
  ('case -> empty','case',1,'p_case','parser.py',188),
  ('default_case -> DEFAULT LBRACE block RBRACE','default_case',4,'p_default_case','parser.py',200),
  ('if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt','if_stmt',8,'p_if_stmt','parser.py',207),
  ('elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt','elif_stmt',8,'p_elif_stmt','parser.py',215),
  ('elif_stmt -> else_stmt','elif_stmt',1,'p_elif_stmt','parser.py',216),
  ('elif_stmt -> empty','elif_stmt',1,'p_elif_stmt','parser.py',217),
  ('else_stmt -> ELSE LBRACE block RBRACE','else_stmt',4,'p_else_stmt','parser.py',230),
  ('scoped_switch_stmt -> SWITCH LPAREN var RPAREN LBRACE scoped_case RBRACE','scoped_switch_stmt',7,'p_scoped_switch_stmt','parser.py',237),
  ('scoped_case -> CASE expr LBRACE scoped_block RBRACE scoped_case','scoped_case',6,'p_scoped_case','parser.py',241),
  ('scoped_case -> scoped_default_case','scoped_case',1,'p_scoped_case','parser.py',242),
  ('scoped_case -> empty','scoped_case',1,'p_scoped_case','parser.py',243),
  ('scoped_default_case -> DEFAULT LBRACE scoped_block RBRACE','scoped_default_case',4,'p_scoped_default_case','parser.py',255),
  ('scoped_if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt','scoped_if_stmt',8,'p_scoped_if_stmt','parser.py',260),
  ('scoped_elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE scoped_elif_stmt','scoped_elif_stmt',8,'p_scoped_elif_stmt','parser.py',268),
  ('scoped_elif_stmt -> scoped_else_stmt','scoped_elif_stmt',1,'p_scoped_elif_stmt','parser.py',269),
  ('scoped_elif_stmt -> empty','scoped_elif_stmt',1,'p_scoped_elif_stmt','parser.py',270),
  ('scoped_else_stmt -> ELSE LBRACE scoped_block RBRACE','scoped_else_stmt',4,'p_scoped_else_stmt','parser.py',283),
  ('scoped_while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE scoped_block RBRACE','scoped_while_stmt',7,'p_scoped_while_stmt','parser.py',288),
  ('scoped_for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE','scoped_for_stmt',11,'p_scoped_for_stmt','parser.py',294),
  ('print_stmt -> PRINT LPAREN expr RPAREN','print_stmt',4,'p_print_stmt','parser.py',306),
  ('scan_stmt -> SCAN LPAREN var RPAREN','scan_stmt',4,'p_scan_stmt','parser.py',310),
  ('tostr_expr -> TOSTR LPAREN expr RPAREN','tostr_expr',4,'p_tostr_expr','parser.py',316),
  ('to_num_expr -> TONUM LPAREN expr RPAREN','to_num_expr',4,'p_tonum_expr','parser.py',320),
  ('while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE','while_stmt',7,'p_while_stmt','parser.py',328),
  ('for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE','for_stmt',11,'p_for_stmt','parser.py',334),
  ('var -> ID','var',1,'p_var','parser.py',346),
  ('var_assign -> var ASSIGN expr','var_assign',3,'p_var_assign','parser.py',351),
  ('final_assign -> FINAL var ASSIGN expr','final_assign',4,'p_final_assign','parser.py',357),
  ('var_compound_assign -> var PLUS_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',363),
  ('var_compound_assign -> var MINUS_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',364),
  ('var_compound_assign -> var TIMES_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',365),
  ('var_compound_assign -> var DIVIDE_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',366),
  ('var_compound_assign -> var POWER_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',367),
  ('var_compound_assign -> var MODULO_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',368),
  ('var_compound_assign -> var INT_DIVIDE_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',369),
  ('var_auto -> var INCREMENT','var_auto',2,'p_var_auto','parser.py',377),
  ('var_auto -> var DECREMENT','var_auto',2,'p_var_auto','parser.py',378),
  ('concat_assign -> var CONCAT_ASSIGN string_expr','concat_assign',3,'p_concat_assign','parser.py',384),
  ('expr -> string_expr','expr',1,'p_expr','parser.py',394),
  ('expr -> num_expr','expr',1,'p_expr','parser.py',395),
  ('expr -> boolean_expr','expr',1,'p_expr','parser.py',396),
  ('expr -> null_expr','expr',1,'p_expr','parser.py',397),
  ('expr -> ternary_expr','expr',1,'p_expr','parser.py',398),
  ('expr -> var','expr',1,'p_expr','parser.py',399),
  ('expr -> func_call','expr',1,'p_expr','parser.py',400),
  ('expr -> tostr_expr','expr',1,'p_expr','parser.py',401),
  ('expr -> to_num_expr','expr',1,'p_expr','parser.py',402),
  ('num_factor -> PLUS num_factor','num_factor',2,'p_num_factor','parser.py',408),
  ('num_factor -> MINUS num_factor','num_factor',2,'p_num_factor','parser.py',409),
  ('num_factor -> INTEGER','num_factor',1,'p_num_factor','parser.py',410),
  ('num_factor -> FLOAT','num_factor',1,'p_num_factor','parser.py',411),
  ('num_factor -> LPAREN num_expr RPAREN','num_factor',3,'p_num_factor','parser.py',412),
  ('num_factor -> func_call','num_factor',1,'p_num_factor','parser.py',413),
  ('num_factor -> var','num_factor',1,'p_num_factor','parser.py',414),
  ('num_expr -> num_expr PLUS num_expr','num_expr',3,'p_num_expr','parser.py',432),
  ('num_expr -> num_expr MINUS num_expr','num_expr',3,'p_num_expr','parser.py',433),
  ('num_expr -> num_expr TIMES num_expr','num_expr',3,'p_num_expr','parser.py',434),
  ('num_expr -> num_expr DIVIDE num_expr','num_expr',3,'p_num_expr','parser.py',435),
  ('num_expr -> num_expr INT_DIVIDE num_expr','num_expr',3,'p_num_expr','parser.py',436),
  ('num_expr -> num_expr POWER num_expr','num_expr',3,'p_num_expr','parser.py',437),
  ('num_expr -> num_expr MODULO num_expr','num_expr',3,'p_num_expr','parser.py',438),
  ('num_expr -> num_factor','num_expr',1,'p_num_expr','parser.py',439),
  ('num_expr -> to_num_expr','num_expr',1,'p_num_expr','parser.py',440),
  ('string_expr -> string_expr CONCAT string_expr','string_expr',3,'p_string_expr','parser.py',454),
  ('string_expr -> STRING','string_expr',1,'p_string_expr','parser.py',455),
  ('string_expr -> var','string_expr',1,'p_string_expr','parser.py',456),
  ('string_expr -> tostr_expr','string_expr',1,'p_string_expr','parser.py',457),
  ('string_expr -> num_expr','string_expr',1,'p_string_expr','parser.py',458),
  ('boolean_expr -> boolean_expr AND boolean_expr','boolean_expr',3,'p_boolean_expr','parser.py',476),
  ('boolean_expr -> boolean_expr OR boolean_expr','boolean_expr',3,'p_boolean_expr','parser.py',477),
  ('boolean_expr -> NOT boolean_expr','boolean_expr',2,'p_boolean_expr','parser.py',478),
  ('boolean_expr -> boolean_factor','boolean_expr',1,'p_boolean_expr','parser.py',479),
  ('boolean_factor -> LPAREN boolean_expr RPAREN','boolean_factor',3,'p_boolean_factor','parser.py',497),
  ('boolean_factor -> BOOLEAN','boolean_factor',1,'p_boolean_factor','parser.py',498),
  ('boolean_factor -> comparison','boolean_factor',1,'p_boolean_factor','parser.py',499),
  ('boolean_factor -> var','boolean_factor',1,'p_boolean_factor','parser.py',500),
  ('comparison -> expr EQ expr','comparison',3,'p_comparison','parser.py',515),
  ('comparison -> expr NE expr','comparison',3,'p_comparison','parser.py',516),
  ('comparison -> expr LT expr','comparison',3,'p_comparison','parser.py',517),
  ('comparison -> expr GT expr','comparison',3,'p_comparison','parser.py',518),
  ('comparison -> expr LE expr','comparison',3,'p_comparison','parser.py',519),
  ('comparison -> expr GE expr','comparison',3,'p_comparison','parser.py',520),
  ('null_expr -> NULL','null_expr',1,'p_null_expr','parser.py',530),
  ('ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr','ternary_expr',5,'p_ternary_expr','parser.py',539),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',547),
]
