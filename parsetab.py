
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEINT_DIVIDErightPOWERAND ASSIGN BOOLEAN CASE CLASS COMMA DECREMENT DIVIDE DIVIDE_ASSIGN DOT ELIF ELSE EQ FALSE FINAL FLOAT FN FOR FSTRING GE GT ID IF IN INCREMENT INTEGER INT_DIVIDE INT_DIVIDE_ASSIGN LBRACE LBRACKET LE LPAREN LT MINUS MINUS_ASSIGN MODULO MODULO_ASSIGN NE NOT NULL OR PLUS PLUS_ASSIGN POWER POWER_ASSIGN RBRACE RBRACKET RETURN RPAREN SEMI STRING SWITCH TERNARY_C TERNARY_Q TIMES TIMES_ASSIGN TRUE WHILEblock : statement_listscoped_block : statement_list\n| emptystatement_list : statement statement_list\n| emptystatement : var_assign SEMI\n| final_assign SEMI\n| var_compound_assign SEMI\n| var_auto SEMI\n| expr SEMI\n| func_stmt\n| func_call\n| if_stmt\n| while_stmt\n| emptyfunc_stmt : FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACEfunc_call : var LPAREN arguments_list RPARENarguments_list : non_empty_arguments_list\n| emptynon_empty_arguments_list : var\n| var COMMA non_empty_arguments_listparameters_list : non_empty_parameters_list\n| emptynon_empty_parameters_list : var COMMA parameters_list\n| varif_stmt : IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmtelif_stmt : ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt\n| else_stmt\n| emptyelse_stmt : ELSE LBRACE block RBRACEwhile_stmt : WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACEfor_stmt : FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACEvar : IDvar_assign : var ASSIGN exprfinal_assign : FINAL var ASSIGN exprvar_compound_assign : var PLUS_ASSIGN num_expr\n| var MINUS_ASSIGN num_expr\n| var TIMES_ASSIGN num_expr\n| var DIVIDE_ASSIGN num_expr\n| var POWER_ASSIGN num_expr\n| var MODULO_ASSIGN num_expr\n| var INT_DIVIDE_ASSIGN num_exprvar_auto : var INCREMENT\n| var DECREMENTexpr : num_expr\n| string_expr\n| boolean_expr\n| null_expr\n| ternary_expr\n| varnum_factor : PLUS num_factor\n| MINUS num_factor\n| INTEGER\n| FLOAT\n| LPAREN expr RPAREN\n| varnum_expr : num_expr PLUS num_expr\n| num_expr MINUS num_expr\n| num_expr TIMES num_expr\n| num_expr DIVIDE num_expr\n| num_expr INT_DIVIDE num_expr\n| num_expr POWER num_expr\n| num_factorstring_expr : STRING PLUS string_expr\n| STRINGboolean_expr : boolean_expr AND boolean_expr\n| boolean_expr OR boolean_expr\n| NOT boolean_expr\n| boolean_factorboolean_factor : LPAREN boolean_expr RPAREN\n| BOOLEAN\n| comparison\n| varcomparison : expr EQ expr\n| expr NE expr\n| expr LT expr\n| expr GT expr\n| expr LE expr\n| expr GE exprnull_expr : NULLternary_expr : boolean_expr TERNARY_Q expr TERNARY_C exprempty : '
    
_lr_action_items = {'$end':([0,1,2,3,4,10,11,12,13,37,38,39,40,41,42,122,144,145,146,147,149,150,157,160,161,],[-82,0,-1,-82,-5,-11,-12,-13,-14,-4,-6,-7,-8,-9,-10,-17,-82,-31,-16,-26,-28,-29,-30,-82,-27,]),'FINAL':([0,3,4,10,11,12,13,38,39,40,41,42,122,135,136,138,143,144,145,146,147,149,150,153,157,158,160,161,],[15,15,-15,-11,-12,-13,-14,-6,-7,-8,-9,-10,-17,15,15,15,-15,-82,-31,-16,-26,-28,-29,15,-30,15,-82,-27,]),'FN':([0,3,4,10,11,12,13,38,39,40,41,42,122,135,136,138,143,144,145,146,147,149,150,153,157,158,160,161,],[21,21,-15,-11,-12,-13,-14,-6,-7,-8,-9,-10,-17,21,21,21,-15,-82,-31,-16,-26,-28,-29,21,-30,21,-82,-27,]),'IF':([0,3,4,10,11,12,13,38,39,40,41,42,122,135,136,138,143,144,145,146,147,149,150,153,157,158,160,161,],[23,23,-15,-11,-12,-13,-14,-6,-7,-8,-9,-10,-17,23,23,23,-15,-82,-31,-16,-26,-28,-29,23,-30,23,-82,-27,]),'WHILE':([0,3,4,10,11,12,13,38,39,40,41,42,122,135,136,138,143,144,145,146,147,149,150,153,157,158,160,161,],[24,24,-15,-11,-12,-13,-14,-6,-7,-8,-9,-10,-17,24,24,24,-15,-82,-31,-16,-26,-28,-29,24,-30,24,-82,-27,]),'ID':([0,3,4,10,11,12,13,15,21,22,26,27,30,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,61,62,63,64,65,66,67,68,69,71,75,76,78,104,114,121,122,124,133,135,136,138,143,144,145,146,147,149,150,152,153,157,158,160,161,],[25,25,-15,-11,-12,-13,-14,25,25,25,25,25,25,-6,-7,-8,-9,-10,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-17,25,25,25,25,25,-15,-82,-31,-16,-26,-28,-29,25,25,-30,25,-82,-27,]),'STRING':([0,3,4,10,11,12,13,22,30,38,39,40,41,42,43,44,45,46,47,48,49,67,68,69,71,75,76,78,81,104,122,124,135,136,138,143,144,145,146,147,149,150,152,153,157,158,160,161,],[29,29,-15,-11,-12,-13,-14,29,29,-6,-7,-8,-9,-10,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-17,29,29,29,29,-15,-82,-31,-16,-26,-28,-29,29,29,-30,29,-82,-27,]),'NOT':([0,3,4,10,11,12,13,22,30,38,39,40,41,42,43,44,45,46,47,48,49,67,68,69,71,75,76,78,104,122,124,135,136,138,143,144,145,146,147,149,150,152,153,157,158,160,161,],[30,30,-15,-11,-12,-13,-14,30,30,-6,-7,-8,-9,-10,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-17,30,30,30,30,-15,-82,-31,-16,-26,-28,-29,30,30,-30,30,-82,-27,]),'NULL':([0,3,4,10,11,12,13,22,30,38,39,40,41,42,43,44,45,46,47,48,49,67,68,69,71,75,76,78,104,122,124,135,136,138,143,144,145,146,147,149,150,152,153,157,158,160,161,],[32,32,-15,-11,-12,-13,-14,32,32,-6,-7,-8,-9,-10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-17,32,32,32,32,-15,-82,-31,-16,-26,-28,-29,32,32,-30,32,-82,-27,]),'PLUS':([0,3,4,10,11,12,13,14,16,22,25,26,27,28,29,30,33,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,63,64,65,66,67,68,69,71,74,75,76,77,78,79,80,83,86,93,94,95,96,97,98,99,104,105,106,107,108,109,110,116,122,124,135,136,138,143,144,145,146,147,149,150,152,153,157,158,160,161,],[26,26,-15,-11,-12,-13,-14,-56,61,26,-33,26,26,-63,81,26,-53,-54,-6,-7,-8,-9,-10,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-56,26,26,-51,26,-56,-52,-56,-56,61,61,61,61,61,61,61,26,-57,-58,-59,-60,-61,-62,-55,-17,26,26,26,26,-15,-82,-31,-16,-26,-28,-29,26,26,-30,26,-82,-27,]),'MINUS':([0,3,4,10,11,12,13,14,16,22,25,26,27,28,30,33,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,63,64,65,66,67,68,69,71,74,75,76,77,78,79,80,83,86,93,94,95,96,97,98,99,104,105,106,107,108,109,110,116,122,124,135,136,138,143,144,145,146,147,149,150,152,153,157,158,160,161,],[27,27,-15,-11,-12,-13,-14,-56,62,27,-33,27,27,-63,27,-53,-54,-6,-7,-8,-9,-10,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-56,27,27,-51,27,-56,-52,-56,-56,62,62,62,62,62,62,62,27,-57,-58,-59,-60,-61,-62,-55,-17,27,27,27,27,-15,-82,-31,-16,-26,-28,-29,27,27,-30,27,-82,-27,]),'INTEGER':([0,3,4,10,11,12,13,22,26,27,30,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,63,64,65,66,67,68,69,71,75,76,78,104,122,124,135,136,138,143,144,145,146,147,149,150,152,153,157,158,160,161,],[33,33,-15,-11,-12,-13,-14,33,33,33,33,-6,-7,-8,-9,-10,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-17,33,33,33,33,-15,-82,-31,-16,-26,-28,-29,33,33,-30,33,-82,-27,]),'FLOAT':([0,3,4,10,11,12,13,22,26,27,30,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,63,64,65,66,67,68,69,71,75,76,78,104,122,124,135,136,138,143,144,145,146,147,149,150,152,153,157,158,160,161,],[34,34,-15,-11,-12,-13,-14,34,34,34,34,-6,-7,-8,-9,-10,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-17,34,34,34,34,-15,-82,-31,-16,-26,-28,-29,34,34,-30,34,-82,-27,]),'LPAREN':([0,3,4,10,11,12,13,14,22,23,24,25,26,27,30,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,63,64,65,66,67,68,69,70,71,75,76,78,104,122,124,135,136,138,143,144,145,146,147,148,149,150,152,153,157,158,160,161,],[22,22,-15,-11,-12,-13,-14,59,71,75,76,-33,78,78,71,-6,-7,-8,-9,-10,22,22,22,22,22,22,22,78,78,78,78,78,78,78,78,78,78,78,78,78,71,71,22,114,71,71,71,22,22,-17,22,22,22,22,-15,-82,-31,-16,-26,152,-28,-29,71,22,-30,22,-82,-27,]),'BOOLEAN':([0,3,4,10,11,12,13,22,30,38,39,40,41,42,43,44,45,46,47,48,49,67,68,69,71,75,76,78,104,122,124,135,136,138,143,144,145,146,147,149,150,152,153,157,158,160,161,],[35,35,-15,-11,-12,-13,-14,35,35,-6,-7,-8,-9,-10,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-17,35,35,35,35,-15,-82,-31,-16,-26,-28,-29,35,35,-30,35,-82,-27,]),'RBRACE':([2,3,4,10,11,12,13,37,38,39,40,41,42,122,135,136,138,139,140,141,142,143,144,145,146,147,149,150,153,155,157,158,159,160,161,],[-1,-82,-5,-11,-12,-13,-14,-4,-6,-7,-8,-9,-10,-17,-82,-82,-82,144,145,146,-2,-3,-82,-31,-16,-26,-28,-29,-82,157,-30,-82,160,-82,-27,]),'SEMI':([5,6,7,8,9,14,16,17,18,19,20,25,28,29,31,32,33,34,35,36,57,58,77,79,80,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,105,106,107,108,109,110,111,112,116,117,120,123,132,],[38,39,40,41,42,-50,-45,-46,-47,-48,-49,-33,-63,-65,-69,-80,-53,-54,-71,-72,-43,-44,-51,-56,-52,-68,-73,-74,-50,-75,-76,-77,-78,-79,-34,-36,-37,-38,-39,-40,-41,-42,-57,-58,-59,-60,-61,-62,-66,-67,-55,-70,-64,-35,-81,]),'EQ':([9,14,16,17,18,19,20,25,28,29,31,32,33,34,35,36,72,73,74,77,79,80,82,83,84,85,86,87,88,89,90,91,92,105,106,107,108,109,110,111,112,113,115,116,117,118,119,120,123,132,154,],[43,-50,-45,-46,-47,-48,-49,-33,-63,-65,-69,-80,-53,-54,-71,-72,43,-47,-50,-51,-56,-52,-47,-50,43,43,-50,43,43,43,43,43,43,-57,-58,-59,-60,-61,-62,-47,-47,43,-47,-55,-70,-47,-47,-64,43,43,-47,]),'NE':([9,14,16,17,18,19,20,25,28,29,31,32,33,34,35,36,72,73,74,77,79,80,82,83,84,85,86,87,88,89,90,91,92,105,106,107,108,109,110,111,112,113,115,116,117,118,119,120,123,132,154,],[44,-50,-45,-46,-47,-48,-49,-33,-63,-65,-69,-80,-53,-54,-71,-72,44,-47,-50,-51,-56,-52,-47,-50,44,44,-50,44,44,44,44,44,44,-57,-58,-59,-60,-61,-62,-47,-47,44,-47,-55,-70,-47,-47,-64,44,44,-47,]),'LT':([9,14,16,17,18,19,20,25,28,29,31,32,33,34,35,36,72,73,74,77,79,80,82,83,84,85,86,87,88,89,90,91,92,105,106,107,108,109,110,111,112,113,115,116,117,118,119,120,123,132,154,],[45,-50,-45,-46,-47,-48,-49,-33,-63,-65,-69,-80,-53,-54,-71,-72,45,-47,-50,-51,-56,-52,-47,-50,45,45,-50,45,45,45,45,45,45,-57,-58,-59,-60,-61,-62,-47,-47,45,-47,-55,-70,-47,-47,-64,45,45,-47,]),'GT':([9,14,16,17,18,19,20,25,28,29,31,32,33,34,35,36,72,73,74,77,79,80,82,83,84,85,86,87,88,89,90,91,92,105,106,107,108,109,110,111,112,113,115,116,117,118,119,120,123,132,154,],[46,-50,-45,-46,-47,-48,-49,-33,-63,-65,-69,-80,-53,-54,-71,-72,46,-47,-50,-51,-56,-52,-47,-50,46,46,-50,46,46,46,46,46,46,-57,-58,-59,-60,-61,-62,-47,-47,46,-47,-55,-70,-47,-47,-64,46,46,-47,]),'LE':([9,14,16,17,18,19,20,25,28,29,31,32,33,34,35,36,72,73,74,77,79,80,82,83,84,85,86,87,88,89,90,91,92,105,106,107,108,109,110,111,112,113,115,116,117,118,119,120,123,132,154,],[47,-50,-45,-46,-47,-48,-49,-33,-63,-65,-69,-80,-53,-54,-71,-72,47,-47,-50,-51,-56,-52,-47,-50,47,47,-50,47,47,47,47,47,47,-57,-58,-59,-60,-61,-62,-47,-47,47,-47,-55,-70,-47,-47,-64,47,47,-47,]),'GE':([9,14,16,17,18,19,20,25,28,29,31,32,33,34,35,36,72,73,74,77,79,80,82,83,84,85,86,87,88,89,90,91,92,105,106,107,108,109,110,111,112,113,115,116,117,118,119,120,123,132,154,],[48,-50,-45,-46,-47,-48,-49,-33,-63,-65,-69,-80,-53,-54,-71,-72,48,-47,-50,-51,-56,-52,-47,-50,48,48,-50,48,48,48,48,48,48,-57,-58,-59,-60,-61,-62,-47,-47,48,-47,-55,-70,-47,-47,-64,48,48,-47,]),'ASSIGN':([14,25,60,],[49,-33,104,]),'PLUS_ASSIGN':([14,25,],[50,-33,]),'MINUS_ASSIGN':([14,25,],[51,-33,]),'TIMES_ASSIGN':([14,25,],[52,-33,]),'DIVIDE_ASSIGN':([14,25,],[53,-33,]),'POWER_ASSIGN':([14,25,],[54,-33,]),'MODULO_ASSIGN':([14,25,],[55,-33,]),'INT_DIVIDE_ASSIGN':([14,25,],[56,-33,]),'INCREMENT':([14,25,],[57,-33,]),'DECREMENT':([14,25,],[58,-33,]),'TIMES':([14,16,25,28,33,34,74,77,79,80,83,86,93,94,95,96,97,98,99,105,106,107,108,109,110,116,],[-56,63,-33,-63,-53,-54,-56,-51,-56,-52,-56,-56,63,63,63,63,63,63,63,63,63,-59,-60,-61,-62,-55,]),'DIVIDE':([14,16,25,28,33,34,74,77,79,80,83,86,93,94,95,96,97,98,99,105,106,107,108,109,110,116,],[-56,64,-33,-63,-53,-54,-56,-51,-56,-52,-56,-56,64,64,64,64,64,64,64,64,64,-59,-60,-61,-62,-55,]),'INT_DIVIDE':([14,16,25,28,33,34,74,77,79,80,83,86,93,94,95,96,97,98,99,105,106,107,108,109,110,116,],[-56,65,-33,-63,-53,-54,-56,-51,-56,-52,-56,-56,65,65,65,65,65,65,65,65,65,-59,-60,-61,-62,-55,]),'POWER':([14,16,25,28,33,34,74,77,79,80,83,86,93,94,95,96,97,98,99,105,106,107,108,109,110,116,],[-56,66,-33,-63,-53,-54,-56,-51,-56,-52,-56,-56,66,66,66,66,66,66,66,66,66,66,66,66,66,-55,]),'AND':([14,16,17,18,19,20,25,28,29,31,32,33,34,35,36,73,74,77,79,80,82,83,85,86,87,88,89,90,91,105,106,107,108,109,110,111,112,115,116,117,118,119,120,132,154,],[-73,-45,-46,67,-48,-49,-33,-63,-65,-69,-80,-53,-54,-71,-72,67,-73,-51,-56,-52,67,-73,-74,-50,-75,-76,-77,-78,-79,-57,-58,-59,-60,-61,-62,67,67,67,-55,-70,67,67,-64,-81,67,]),'OR':([14,16,17,18,19,20,25,28,29,31,32,33,34,35,36,73,74,77,79,80,82,83,85,86,87,88,89,90,91,105,106,107,108,109,110,111,112,115,116,117,118,119,120,132,154,],[-73,-45,-46,68,-48,-49,-33,-63,-65,-69,-80,-53,-54,-71,-72,68,-73,-51,-56,-52,68,-73,-74,-50,-75,-76,-77,-78,-79,-57,-58,-59,-60,-61,-62,68,68,68,-55,-70,68,68,-64,-81,68,]),'TERNARY_Q':([14,16,17,18,19,20,25,28,29,31,32,33,34,35,36,73,74,77,79,80,82,83,85,86,87,88,89,90,91,105,106,107,108,109,110,111,112,115,116,117,118,119,120,132,154,],[-73,-45,-46,69,-48,-49,-33,-63,-65,-69,-80,-53,-54,-71,-72,69,-73,-51,-56,-52,69,-73,-74,-50,-75,-76,-77,-78,-79,-57,-58,-59,-60,-61,-62,69,69,69,-55,-70,69,69,-64,-81,69,]),'RPAREN':([16,17,18,19,20,25,28,29,31,32,33,34,35,36,59,72,73,74,77,79,80,82,83,85,86,87,88,89,90,91,100,101,102,103,105,106,107,108,109,110,111,112,114,115,116,117,118,119,120,125,126,127,128,131,132,133,137,154,],[-45,-46,-47,-48,-49,-33,-63,-65,-69,-80,-53,-54,-71,-72,-82,116,117,-50,-51,-56,-52,-68,-73,-74,-50,-75,-76,-77,-78,-79,-20,122,-18,-19,-57,-58,-59,-60,-61,-62,-66,-67,-82,117,-55,-70,129,130,-64,-25,134,-22,-23,-21,-81,-82,-24,156,]),'TERNARY_C':([16,17,18,19,20,25,28,29,31,32,33,34,35,36,77,79,80,82,83,85,86,87,88,89,90,91,105,106,107,108,109,110,111,112,113,116,117,120,132,],[-45,-46,-47,-48,-49,-33,-63,-65,-69,-80,-53,-54,-71,-72,-51,-56,-52,-68,-73,-74,-50,-75,-76,-77,-78,-79,-57,-58,-59,-60,-61,-62,-66,-67,124,-55,-70,-64,-81,]),'COMMA':([25,100,125,],[-33,121,133,]),'LBRACE':([129,130,134,151,156,],[135,136,138,153,158,]),'ELIF':([144,160,],[148,148,]),'ELSE':([144,160,],[151,151,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'block':([0,135,136,153,158,],[1,139,140,155,159,]),'statement_list':([0,3,135,136,138,153,158,],[2,37,2,2,142,2,2,]),'statement':([0,3,135,136,138,153,158,],[3,3,3,3,3,3,3,]),'empty':([0,3,59,114,133,135,136,138,144,153,158,160,],[4,4,103,128,128,4,4,143,150,4,4,150,]),'var_assign':([0,3,135,136,138,153,158,],[5,5,5,5,5,5,5,]),'final_assign':([0,3,135,136,138,153,158,],[6,6,6,6,6,6,6,]),'var_compound_assign':([0,3,135,136,138,153,158,],[7,7,7,7,7,7,7,]),'var_auto':([0,3,135,136,138,153,158,],[8,8,8,8,8,8,8,]),'expr':([0,3,22,30,43,44,45,46,47,48,49,67,68,69,71,75,76,78,104,124,135,136,138,152,153,158,],[9,9,72,84,85,87,88,89,90,91,92,84,84,113,72,84,84,72,123,132,9,9,9,84,9,9,]),'func_stmt':([0,3,135,136,138,153,158,],[10,10,10,10,10,10,10,]),'func_call':([0,3,135,136,138,153,158,],[11,11,11,11,11,11,11,]),'if_stmt':([0,3,135,136,138,153,158,],[12,12,12,12,12,12,12,]),'while_stmt':([0,3,135,136,138,153,158,],[13,13,13,13,13,13,13,]),'var':([0,3,15,21,22,26,27,30,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,61,62,63,64,65,66,67,68,69,71,75,76,78,104,114,121,124,133,135,136,138,152,153,158,],[14,14,60,70,74,79,79,83,86,86,86,86,86,86,86,79,79,79,79,79,79,79,100,79,79,79,79,79,79,83,83,86,74,83,83,86,86,125,100,86,125,14,14,14,83,14,14,]),'num_expr':([0,3,22,30,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,63,64,65,66,67,68,69,71,75,76,78,104,124,135,136,138,152,153,158,],[16,16,16,16,16,16,16,16,16,16,16,93,94,95,96,97,98,99,105,106,107,108,109,110,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'string_expr':([0,3,22,30,43,44,45,46,47,48,49,67,68,69,71,75,76,78,81,104,124,135,136,138,152,153,158,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,120,17,17,17,17,17,17,17,17,]),'boolean_expr':([0,3,22,30,43,44,45,46,47,48,49,67,68,69,71,75,76,78,104,124,135,136,138,152,153,158,],[18,18,73,82,18,18,18,18,18,18,18,111,112,18,115,118,119,18,18,18,18,18,18,154,18,18,]),'null_expr':([0,3,22,30,43,44,45,46,47,48,49,67,68,69,71,75,76,78,104,124,135,136,138,152,153,158,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'ternary_expr':([0,3,22,30,43,44,45,46,47,48,49,67,68,69,71,75,76,78,104,124,135,136,138,152,153,158,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'num_factor':([0,3,22,26,27,30,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,63,64,65,66,67,68,69,71,75,76,78,104,124,135,136,138,152,153,158,],[28,28,28,77,80,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'boolean_factor':([0,3,22,30,43,44,45,46,47,48,49,67,68,69,71,75,76,78,104,124,135,136,138,152,153,158,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'comparison':([0,3,22,30,43,44,45,46,47,48,49,67,68,69,71,75,76,78,104,124,135,136,138,152,153,158,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'arguments_list':([59,],[101,]),'non_empty_arguments_list':([59,121,],[102,131,]),'parameters_list':([114,133,],[126,137,]),'non_empty_parameters_list':([114,133,],[127,127,]),'scoped_block':([138,],[141,]),'elif_stmt':([144,160,],[147,161,]),'else_stmt':([144,160,],[149,149,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> block","S'",1,None,None,None),
  ('block -> statement_list','block',1,'p_block','parser.py',26),
  ('scoped_block -> statement_list','scoped_block',1,'p_scoped_block','parser.py',34),
  ('scoped_block -> empty','scoped_block',1,'p_scoped_block','parser.py',35),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser.py',46),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser.py',47),
  ('statement -> var_assign SEMI','statement',2,'p_statement','parser.py',57),
  ('statement -> final_assign SEMI','statement',2,'p_statement','parser.py',58),
  ('statement -> var_compound_assign SEMI','statement',2,'p_statement','parser.py',59),
  ('statement -> var_auto SEMI','statement',2,'p_statement','parser.py',60),
  ('statement -> expr SEMI','statement',2,'p_statement','parser.py',61),
  ('statement -> func_stmt','statement',1,'p_statement','parser.py',62),
  ('statement -> func_call','statement',1,'p_statement','parser.py',63),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',64),
  ('statement -> while_stmt','statement',1,'p_statement','parser.py',65),
  ('statement -> empty','statement',1,'p_statement','parser.py',66),
  ('func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE','func_stmt',8,'p_func_stmt','parser.py',74),
  ('func_call -> var LPAREN arguments_list RPAREN','func_call',4,'p_func_call','parser.py',82),
  ('arguments_list -> non_empty_arguments_list','arguments_list',1,'p_arguments_list','parser.py',89),
  ('arguments_list -> empty','arguments_list',1,'p_arguments_list','parser.py',90),
  ('non_empty_arguments_list -> var','non_empty_arguments_list',1,'p_non_empty_arguments_list','parser.py',94),
  ('non_empty_arguments_list -> var COMMA non_empty_arguments_list','non_empty_arguments_list',3,'p_non_empty_arguments_list','parser.py',95),
  ('parameters_list -> non_empty_parameters_list','parameters_list',1,'p_parameters_list','parser.py',104),
  ('parameters_list -> empty','parameters_list',1,'p_parameters_list','parser.py',105),
  ('non_empty_parameters_list -> var COMMA parameters_list','non_empty_parameters_list',3,'p_non_empty_parameters_list','parser.py',109),
  ('non_empty_parameters_list -> var','non_empty_parameters_list',1,'p_non_empty_parameters_list','parser.py',110),
  ('if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt','if_stmt',8,'p_if_stmt','parser.py',129),
  ('elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt','elif_stmt',8,'p_elif_stmt','parser.py',139),
  ('elif_stmt -> else_stmt','elif_stmt',1,'p_elif_stmt','parser.py',140),
  ('elif_stmt -> empty','elif_stmt',1,'p_elif_stmt','parser.py',141),
  ('else_stmt -> ELSE LBRACE block RBRACE','else_stmt',4,'p_else_stmt','parser.py',154),
  ('while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE','while_stmt',7,'p_while_stmt','parser.py',163),
  ('for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE scoped_block RBRACE','for_stmt',11,'p_for_stmt','parser.py',169),
  ('var -> ID','var',1,'p_var','parser.py',177),
  ('var_assign -> var ASSIGN expr','var_assign',3,'p_var_assign','parser.py',182),
  ('final_assign -> FINAL var ASSIGN expr','final_assign',4,'p_final_assign','parser.py',188),
  ('var_compound_assign -> var PLUS_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',194),
  ('var_compound_assign -> var MINUS_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',195),
  ('var_compound_assign -> var TIMES_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',196),
  ('var_compound_assign -> var DIVIDE_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',197),
  ('var_compound_assign -> var POWER_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',198),
  ('var_compound_assign -> var MODULO_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',199),
  ('var_compound_assign -> var INT_DIVIDE_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',200),
  ('var_auto -> var INCREMENT','var_auto',2,'p_var_auto','parser.py',208),
  ('var_auto -> var DECREMENT','var_auto',2,'p_var_auto','parser.py',209),
  ('expr -> num_expr','expr',1,'p_expr','parser.py',219),
  ('expr -> string_expr','expr',1,'p_expr','parser.py',220),
  ('expr -> boolean_expr','expr',1,'p_expr','parser.py',221),
  ('expr -> null_expr','expr',1,'p_expr','parser.py',222),
  ('expr -> ternary_expr','expr',1,'p_expr','parser.py',223),
  ('expr -> var','expr',1,'p_expr','parser.py',224),
  ('num_factor -> PLUS num_factor','num_factor',2,'p_num_factor','parser.py',230),
  ('num_factor -> MINUS num_factor','num_factor',2,'p_num_factor','parser.py',231),
  ('num_factor -> INTEGER','num_factor',1,'p_num_factor','parser.py',232),
  ('num_factor -> FLOAT','num_factor',1,'p_num_factor','parser.py',233),
  ('num_factor -> LPAREN expr RPAREN','num_factor',3,'p_num_factor','parser.py',234),
  ('num_factor -> var','num_factor',1,'p_num_factor','parser.py',235),
  ('num_expr -> num_expr PLUS num_expr','num_expr',3,'p_num_expr','parser.py',253),
  ('num_expr -> num_expr MINUS num_expr','num_expr',3,'p_num_expr','parser.py',254),
  ('num_expr -> num_expr TIMES num_expr','num_expr',3,'p_num_expr','parser.py',255),
  ('num_expr -> num_expr DIVIDE num_expr','num_expr',3,'p_num_expr','parser.py',256),
  ('num_expr -> num_expr INT_DIVIDE num_expr','num_expr',3,'p_num_expr','parser.py',257),
  ('num_expr -> num_expr POWER num_expr','num_expr',3,'p_num_expr','parser.py',258),
  ('num_expr -> num_factor','num_expr',1,'p_num_expr','parser.py',259),
  ('string_expr -> STRING PLUS string_expr','string_expr',3,'p_string_expr','parser.py',273),
  ('string_expr -> STRING','string_expr',1,'p_string_expr','parser.py',274),
  ('boolean_expr -> boolean_expr AND boolean_expr','boolean_expr',3,'p_boolean_expr','parser.py',288),
  ('boolean_expr -> boolean_expr OR boolean_expr','boolean_expr',3,'p_boolean_expr','parser.py',289),
  ('boolean_expr -> NOT boolean_expr','boolean_expr',2,'p_boolean_expr','parser.py',290),
  ('boolean_expr -> boolean_factor','boolean_expr',1,'p_boolean_expr','parser.py',291),
  ('boolean_factor -> LPAREN boolean_expr RPAREN','boolean_factor',3,'p_boolean_factor','parser.py',309),
  ('boolean_factor -> BOOLEAN','boolean_factor',1,'p_boolean_factor','parser.py',310),
  ('boolean_factor -> comparison','boolean_factor',1,'p_boolean_factor','parser.py',311),
  ('boolean_factor -> var','boolean_factor',1,'p_boolean_factor','parser.py',312),
  ('comparison -> expr EQ expr','comparison',3,'p_comparison','parser.py',327),
  ('comparison -> expr NE expr','comparison',3,'p_comparison','parser.py',328),
  ('comparison -> expr LT expr','comparison',3,'p_comparison','parser.py',329),
  ('comparison -> expr GT expr','comparison',3,'p_comparison','parser.py',330),
  ('comparison -> expr LE expr','comparison',3,'p_comparison','parser.py',331),
  ('comparison -> expr GE expr','comparison',3,'p_comparison','parser.py',332),
  ('null_expr -> NULL','null_expr',1,'p_null_expr','parser.py',342),
  ('ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr','ternary_expr',5,'p_ternary_expr','parser.py',351),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',359),
]
