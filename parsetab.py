
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEINT_DIVIDErightPOWERAND ASSIGN BOOLEAN CASE CLASS COMMA DECREMENT DIVIDE DIVIDE_ASSIGN DOT ELIF ELSE EQ FALSE FINAL FLOAT FN FOR FSTRING GE GT ID IF IN INCREMENT INTEGER INT_DIVIDE INT_DIVIDE_ASSIGN LBRACE LBRACKET LE LPAREN LT MINUS MINUS_ASSIGN MODULO MODULO_ASSIGN NE NOT NULL OR PLUS PLUS_ASSIGN POWER POWER_ASSIGN RBRACE RBRACKET RETURN RPAREN SEMI STRING SWITCH TERNARY_C TERNARY_Q TIMES TIMES_ASSIGN TRUE WHILEblock : statement_liststatement_list : statement statement_list\n| emptystatement : var_assign SEMI\n| final_assign SEMI\n| var_compound_assign SEMI\n| var_auto SEMI\n| expr SEMI\n| func_stmt\n| func_call\n| if_stmt\n| while_stmt\n| for_stmt\n| emptyscoped_block : scope_statement_listscope_statement_list : scope_statement scope_statement_list\n| emptyscope_statement : var_assign SEMI\n| final_assign SEMI\n| var_compound_assign SEMI\n| var_auto SEMI\n| expr SEMI\n| func_stmt\n| func_call\n| if_stmt\n| while_stmt\n| for_stmt\n| return SEMI\n| emptyreturn : RETURN expr\n| RETURN emptyfunc_stmt : FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACEfunc_call : var LPAREN arguments_list RPARENarguments_list : non_empty_arguments_list\n| emptynon_empty_arguments_list : var\n| var COMMA non_empty_arguments_listparameters_list : non_empty_parameters_list\n| emptynon_empty_parameters_list : var COMMA non_empty_parameters_list\n| varif_stmt : IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmtelif_stmt : ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt\n| else_stmt\n| emptyelse_stmt : ELSE LBRACE block RBRACEwhile_stmt : WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACEfor_stmt : FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACEvar : IDvar_assign : var ASSIGN exprfinal_assign : FINAL var ASSIGN exprvar_compound_assign : var PLUS_ASSIGN num_expr\n| var MINUS_ASSIGN num_expr\n| var TIMES_ASSIGN num_expr\n| var DIVIDE_ASSIGN num_expr\n| var POWER_ASSIGN num_expr\n| var MODULO_ASSIGN num_expr\n| var INT_DIVIDE_ASSIGN num_exprvar_auto : var INCREMENT\n| var DECREMENTexpr : num_expr\n| string_expr\n| boolean_expr\n| null_expr\n| ternary_expr\n| varnum_factor : PLUS num_factor\n| MINUS num_factor\n| INTEGER\n| FLOAT\n| LPAREN expr RPAREN\n| varnum_expr : num_expr PLUS num_expr\n| num_expr MINUS num_expr\n| num_expr TIMES num_expr\n| num_expr DIVIDE num_expr\n| num_expr INT_DIVIDE num_expr\n| num_expr POWER num_expr\n| num_factorstring_expr : STRING PLUS string_expr\n| STRINGboolean_expr : boolean_expr AND boolean_expr\n| boolean_expr OR boolean_expr\n| NOT boolean_expr\n| boolean_factorboolean_factor : LPAREN boolean_expr RPAREN\n| BOOLEAN\n| comparison\n| varcomparison : expr EQ expr\n| expr NE expr\n| expr LT expr\n| expr GT expr\n| expr LE expr\n| expr GE exprnull_expr : NULLternary_expr : boolean_expr TERNARY_Q expr TERNARY_C exprempty : '
    
_lr_action_items = {'$end':([0,1,2,3,4,10,11,12,13,14,39,40,41,42,43,44,127,165,166,169,179,181,182,192,193,196,197,],[-98,0,-1,-98,-3,-9,-10,-11,-12,-13,-2,-4,-5,-6,-7,-8,-33,-98,-47,-32,-42,-44,-45,-46,-48,-98,-43,]),'FINAL':([0,3,4,10,11,12,13,14,40,41,42,43,44,127,141,142,145,151,152,158,159,160,161,162,165,166,169,171,172,173,174,175,176,179,181,182,186,187,192,193,194,196,197,],[16,16,-14,-9,-10,-11,-12,-13,-4,-5,-6,-7,-8,-33,16,16,16,16,-29,-23,-24,-25,-26,-27,-98,-47,-32,-18,-19,-20,-21,-22,-28,-42,-44,-45,16,16,-46,-48,16,-98,-43,]),'FN':([0,3,4,10,11,12,13,14,40,41,42,43,44,127,141,142,145,151,152,158,159,160,161,162,165,166,169,171,172,173,174,175,176,179,181,182,186,187,192,193,194,196,197,],[22,22,-14,-9,-10,-11,-12,-13,-4,-5,-6,-7,-8,-33,22,22,22,22,-29,-23,-24,-25,-26,-27,-98,-47,-32,-18,-19,-20,-21,-22,-28,-42,-44,-45,22,22,-46,-48,22,-98,-43,]),'IF':([0,3,4,10,11,12,13,14,40,41,42,43,44,127,141,142,145,151,152,158,159,160,161,162,165,166,169,171,172,173,174,175,176,179,181,182,186,187,192,193,194,196,197,],[24,24,-14,-9,-10,-11,-12,-13,-4,-5,-6,-7,-8,-33,24,24,24,24,-29,-23,-24,-25,-26,-27,-98,-47,-32,-18,-19,-20,-21,-22,-28,-42,-44,-45,24,24,-46,-48,24,-98,-43,]),'WHILE':([0,3,4,10,11,12,13,14,40,41,42,43,44,127,141,142,145,151,152,158,159,160,161,162,165,166,169,171,172,173,174,175,176,179,181,182,186,187,192,193,194,196,197,],[25,25,-14,-9,-10,-11,-12,-13,-4,-5,-6,-7,-8,-33,25,25,25,25,-29,-23,-24,-25,-26,-27,-98,-47,-32,-18,-19,-20,-21,-22,-28,-42,-44,-45,25,25,-46,-48,25,-98,-43,]),'FOR':([0,3,4,10,11,12,13,14,40,41,42,43,44,127,141,142,145,151,152,158,159,160,161,162,165,166,169,171,172,173,174,175,176,179,181,182,186,187,192,193,194,196,197,],[26,26,-14,-9,-10,-11,-12,-13,-4,-5,-6,-7,-8,-33,26,26,26,26,-29,-23,-24,-25,-26,-27,-98,-47,-32,-18,-19,-20,-21,-22,-28,-42,-44,-45,26,26,-46,-48,26,-98,-43,]),'ID':([0,3,4,10,11,12,13,14,16,22,23,28,29,32,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,63,64,65,66,67,68,69,70,71,73,77,78,79,81,107,117,126,127,129,136,139,141,142,145,148,151,152,158,159,160,161,162,164,165,166,169,171,172,173,174,175,176,179,181,182,185,186,187,192,193,194,196,197,],[27,27,-14,-9,-10,-11,-12,-13,27,27,27,27,27,27,-4,-5,-6,-7,-8,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-33,27,27,27,27,27,27,27,27,-29,-23,-24,-25,-26,-27,27,-98,-47,-32,-18,-19,-20,-21,-22,-28,-42,-44,-45,27,27,27,-46,-48,27,-98,-43,]),'STRING':([0,3,4,10,11,12,13,14,23,32,40,41,42,43,44,45,46,47,48,49,50,51,69,70,71,73,77,78,81,84,107,127,129,136,141,142,145,151,152,158,159,160,161,162,164,165,166,169,171,172,173,174,175,176,179,181,182,185,186,187,192,193,194,196,197,],[31,31,-14,-9,-10,-11,-12,-13,31,31,-4,-5,-6,-7,-8,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-33,31,31,31,31,31,31,-29,-23,-24,-25,-26,-27,31,-98,-47,-32,-18,-19,-20,-21,-22,-28,-42,-44,-45,31,31,31,-46,-48,31,-98,-43,]),'NOT':([0,3,4,10,11,12,13,14,23,32,40,41,42,43,44,45,46,47,48,49,50,51,69,70,71,73,77,78,81,107,127,129,136,141,142,145,151,152,158,159,160,161,162,164,165,166,169,171,172,173,174,175,176,179,181,182,185,186,187,192,193,194,196,197,],[32,32,-14,-9,-10,-11,-12,-13,32,32,-4,-5,-6,-7,-8,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-33,32,32,32,32,32,32,-29,-23,-24,-25,-26,-27,32,-98,-47,-32,-18,-19,-20,-21,-22,-28,-42,-44,-45,32,32,32,-46,-48,32,-98,-43,]),'NULL':([0,3,4,10,11,12,13,14,23,32,40,41,42,43,44,45,46,47,48,49,50,51,69,70,71,73,77,78,81,107,127,129,136,141,142,145,151,152,158,159,160,161,162,164,165,166,169,171,172,173,174,175,176,179,181,182,185,186,187,192,193,194,196,197,],[34,34,-14,-9,-10,-11,-12,-13,34,34,-4,-5,-6,-7,-8,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-33,34,34,34,34,34,34,-29,-23,-24,-25,-26,-27,34,-98,-47,-32,-18,-19,-20,-21,-22,-28,-42,-44,-45,34,34,34,-46,-48,34,-98,-43,]),'PLUS':([0,3,4,10,11,12,13,14,15,17,23,27,28,29,30,31,32,35,36,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,64,65,66,67,68,69,70,71,73,76,77,78,80,81,82,83,86,89,96,97,98,99,100,101,102,107,108,109,110,111,112,113,119,127,129,136,141,142,145,151,152,158,159,160,161,162,164,165,166,169,171,172,173,174,175,176,179,181,182,185,186,187,192,193,194,196,197,],[28,28,-14,-9,-10,-11,-12,-13,-72,63,28,-49,28,28,-79,84,28,-69,-70,-4,-5,-6,-7,-8,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-72,28,28,-67,28,-72,-68,-72,-72,63,63,63,63,63,63,63,28,-73,-74,-75,-76,-77,-78,-71,-33,28,28,28,28,28,28,-29,-23,-24,-25,-26,-27,28,-98,-47,-32,-18,-19,-20,-21,-22,-28,-42,-44,-45,28,28,28,-46,-48,28,-98,-43,]),'MINUS':([0,3,4,10,11,12,13,14,15,17,23,27,28,29,30,32,35,36,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,64,65,66,67,68,69,70,71,73,76,77,78,80,81,82,83,86,89,96,97,98,99,100,101,102,107,108,109,110,111,112,113,119,127,129,136,141,142,145,151,152,158,159,160,161,162,164,165,166,169,171,172,173,174,175,176,179,181,182,185,186,187,192,193,194,196,197,],[29,29,-14,-9,-10,-11,-12,-13,-72,64,29,-49,29,29,-79,29,-69,-70,-4,-5,-6,-7,-8,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-72,29,29,-67,29,-72,-68,-72,-72,64,64,64,64,64,64,64,29,-73,-74,-75,-76,-77,-78,-71,-33,29,29,29,29,29,29,-29,-23,-24,-25,-26,-27,29,-98,-47,-32,-18,-19,-20,-21,-22,-28,-42,-44,-45,29,29,29,-46,-48,29,-98,-43,]),'INTEGER':([0,3,4,10,11,12,13,14,23,28,29,32,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,64,65,66,67,68,69,70,71,73,77,78,81,107,127,129,136,141,142,145,151,152,158,159,160,161,162,164,165,166,169,171,172,173,174,175,176,179,181,182,185,186,187,192,193,194,196,197,],[35,35,-14,-9,-10,-11,-12,-13,35,35,35,35,-4,-5,-6,-7,-8,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-33,35,35,35,35,35,35,-29,-23,-24,-25,-26,-27,35,-98,-47,-32,-18,-19,-20,-21,-22,-28,-42,-44,-45,35,35,35,-46,-48,35,-98,-43,]),'FLOAT':([0,3,4,10,11,12,13,14,23,28,29,32,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,64,65,66,67,68,69,70,71,73,77,78,81,107,127,129,136,141,142,145,151,152,158,159,160,161,162,164,165,166,169,171,172,173,174,175,176,179,181,182,185,186,187,192,193,194,196,197,],[36,36,-14,-9,-10,-11,-12,-13,36,36,36,36,-4,-5,-6,-7,-8,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-33,36,36,36,36,36,36,-29,-23,-24,-25,-26,-27,36,-98,-47,-32,-18,-19,-20,-21,-22,-28,-42,-44,-45,36,36,36,-46,-48,36,-98,-43,]),'LPAREN':([0,3,4,10,11,12,13,14,15,23,24,25,26,27,28,29,32,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,64,65,66,67,68,69,70,71,72,73,77,78,81,107,127,129,136,141,142,145,151,152,158,159,160,161,162,164,165,166,169,171,172,173,174,175,176,179,180,181,182,185,186,187,192,193,194,196,197,],[23,23,-14,-9,-10,-11,-12,-13,61,73,77,78,79,-49,81,81,73,-4,-5,-6,-7,-8,23,23,23,23,23,23,23,81,81,81,81,81,81,81,81,81,81,81,81,81,73,73,23,117,73,73,73,23,23,-33,23,73,23,23,23,23,-29,-23,-24,-25,-26,-27,23,-98,-47,-32,-18,-19,-20,-21,-22,-28,-42,185,-44,-45,73,23,23,-46,-48,23,-98,-43,]),'BOOLEAN':([0,3,4,10,11,12,13,14,23,32,40,41,42,43,44,45,46,47,48,49,50,51,69,70,71,73,77,78,81,107,127,129,136,141,142,145,151,152,158,159,160,161,162,164,165,166,169,171,172,173,174,175,176,179,181,182,185,186,187,192,193,194,196,197,],[37,37,-14,-9,-10,-11,-12,-13,37,37,-4,-5,-6,-7,-8,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-33,37,37,37,37,37,37,-29,-23,-24,-25,-26,-27,37,-98,-47,-32,-18,-19,-20,-21,-22,-28,-42,-44,-45,37,37,37,-46,-48,37,-98,-43,]),'RBRACE':([2,3,4,10,11,12,13,14,39,40,41,42,43,44,127,141,142,145,146,147,149,150,151,152,158,159,160,161,162,165,166,169,170,171,172,173,174,175,176,179,181,182,186,187,189,190,192,193,194,195,196,197,],[-1,-98,-3,-9,-10,-11,-12,-13,-2,-4,-5,-6,-7,-8,-33,-98,-98,-98,165,166,169,-15,-98,-17,-23,-24,-25,-26,-27,-98,-47,-32,-16,-18,-19,-20,-21,-22,-28,-42,-44,-45,-98,-98,192,193,-46,-48,-98,196,-98,-43,]),'SEMI':([5,6,7,8,9,15,17,18,19,20,21,27,30,31,33,34,35,36,37,38,59,60,80,82,83,85,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,108,109,110,111,112,113,114,115,119,120,123,125,128,138,143,153,154,155,156,157,163,164,177,178,],[40,41,42,43,44,-66,-61,-62,-63,-64,-65,-49,-79,-81,-85,-96,-69,-70,-87,-88,-59,-60,-67,-72,-68,-84,-89,-90,-66,-91,-92,-93,-94,-95,-50,-52,-53,-54,-55,-56,-57,-58,-73,-74,-75,-76,-77,-78,-82,-83,-71,-86,136,-80,-51,-97,148,171,172,173,174,175,176,-98,-30,-31,]),'EQ':([9,15,17,18,19,20,21,27,30,31,33,34,35,36,37,38,74,75,76,80,82,83,85,86,87,88,89,90,91,92,93,94,95,108,109,110,111,112,113,114,115,116,118,119,120,121,122,125,128,138,143,157,177,188,],[45,-66,-61,-62,-63,-64,-65,-49,-79,-81,-85,-96,-69,-70,-87,-88,45,-63,-66,-67,-72,-68,-63,-66,45,45,-66,45,45,45,45,45,45,-73,-74,-75,-76,-77,-78,-63,-63,45,-63,-71,-86,-63,-63,-80,45,45,-63,45,45,-63,]),'NE':([9,15,17,18,19,20,21,27,30,31,33,34,35,36,37,38,74,75,76,80,82,83,85,86,87,88,89,90,91,92,93,94,95,108,109,110,111,112,113,114,115,116,118,119,120,121,122,125,128,138,143,157,177,188,],[46,-66,-61,-62,-63,-64,-65,-49,-79,-81,-85,-96,-69,-70,-87,-88,46,-63,-66,-67,-72,-68,-63,-66,46,46,-66,46,46,46,46,46,46,-73,-74,-75,-76,-77,-78,-63,-63,46,-63,-71,-86,-63,-63,-80,46,46,-63,46,46,-63,]),'LT':([9,15,17,18,19,20,21,27,30,31,33,34,35,36,37,38,74,75,76,80,82,83,85,86,87,88,89,90,91,92,93,94,95,108,109,110,111,112,113,114,115,116,118,119,120,121,122,125,128,138,143,157,177,188,],[47,-66,-61,-62,-63,-64,-65,-49,-79,-81,-85,-96,-69,-70,-87,-88,47,-63,-66,-67,-72,-68,-63,-66,47,47,-66,47,47,47,47,47,47,-73,-74,-75,-76,-77,-78,-63,-63,47,-63,-71,-86,-63,-63,-80,47,47,-63,47,47,-63,]),'GT':([9,15,17,18,19,20,21,27,30,31,33,34,35,36,37,38,74,75,76,80,82,83,85,86,87,88,89,90,91,92,93,94,95,108,109,110,111,112,113,114,115,116,118,119,120,121,122,125,128,138,143,157,177,188,],[48,-66,-61,-62,-63,-64,-65,-49,-79,-81,-85,-96,-69,-70,-87,-88,48,-63,-66,-67,-72,-68,-63,-66,48,48,-66,48,48,48,48,48,48,-73,-74,-75,-76,-77,-78,-63,-63,48,-63,-71,-86,-63,-63,-80,48,48,-63,48,48,-63,]),'LE':([9,15,17,18,19,20,21,27,30,31,33,34,35,36,37,38,74,75,76,80,82,83,85,86,87,88,89,90,91,92,93,94,95,108,109,110,111,112,113,114,115,116,118,119,120,121,122,125,128,138,143,157,177,188,],[49,-66,-61,-62,-63,-64,-65,-49,-79,-81,-85,-96,-69,-70,-87,-88,49,-63,-66,-67,-72,-68,-63,-66,49,49,-66,49,49,49,49,49,49,-73,-74,-75,-76,-77,-78,-63,-63,49,-63,-71,-86,-63,-63,-80,49,49,-63,49,49,-63,]),'GE':([9,15,17,18,19,20,21,27,30,31,33,34,35,36,37,38,74,75,76,80,82,83,85,86,87,88,89,90,91,92,93,94,95,108,109,110,111,112,113,114,115,116,118,119,120,121,122,125,128,138,143,157,177,188,],[50,-66,-61,-62,-63,-64,-65,-49,-79,-81,-85,-96,-69,-70,-87,-88,50,-63,-66,-67,-72,-68,-63,-66,50,50,-66,50,50,50,50,50,50,-73,-74,-75,-76,-77,-78,-63,-63,50,-63,-71,-86,-63,-63,-80,50,50,-63,50,50,-63,]),'ASSIGN':([15,27,62,124,],[51,-49,107,51,]),'PLUS_ASSIGN':([15,27,],[52,-49,]),'MINUS_ASSIGN':([15,27,],[53,-49,]),'TIMES_ASSIGN':([15,27,],[54,-49,]),'DIVIDE_ASSIGN':([15,27,],[55,-49,]),'POWER_ASSIGN':([15,27,],[56,-49,]),'MODULO_ASSIGN':([15,27,],[57,-49,]),'INT_DIVIDE_ASSIGN':([15,27,],[58,-49,]),'INCREMENT':([15,27,168,],[59,-49,59,]),'DECREMENT':([15,27,168,],[60,-49,60,]),'TIMES':([15,17,27,30,35,36,76,80,82,83,86,89,96,97,98,99,100,101,102,108,109,110,111,112,113,119,],[-72,65,-49,-79,-69,-70,-72,-67,-72,-68,-72,-72,65,65,65,65,65,65,65,65,65,-75,-76,-77,-78,-71,]),'DIVIDE':([15,17,27,30,35,36,76,80,82,83,86,89,96,97,98,99,100,101,102,108,109,110,111,112,113,119,],[-72,66,-49,-79,-69,-70,-72,-67,-72,-68,-72,-72,66,66,66,66,66,66,66,66,66,-75,-76,-77,-78,-71,]),'INT_DIVIDE':([15,17,27,30,35,36,76,80,82,83,86,89,96,97,98,99,100,101,102,108,109,110,111,112,113,119,],[-72,67,-49,-79,-69,-70,-72,-67,-72,-68,-72,-72,67,67,67,67,67,67,67,67,67,-75,-76,-77,-78,-71,]),'POWER':([15,17,27,30,35,36,76,80,82,83,86,89,96,97,98,99,100,101,102,108,109,110,111,112,113,119,],[-72,68,-49,-79,-69,-70,-72,-67,-72,-68,-72,-72,68,68,68,68,68,68,68,68,68,68,68,68,68,-71,]),'AND':([15,17,18,19,20,21,27,30,31,33,34,35,36,37,38,75,76,80,82,83,85,86,88,89,90,91,92,93,94,108,109,110,111,112,113,114,115,118,119,120,121,122,125,138,143,188,],[-89,-61,-62,69,-64,-65,-49,-79,-81,-85,-96,-69,-70,-87,-88,69,-89,-67,-72,-68,69,-89,-90,-66,-91,-92,-93,-94,-95,-73,-74,-75,-76,-77,-78,69,69,69,-71,-86,69,69,-80,-97,69,69,]),'OR':([15,17,18,19,20,21,27,30,31,33,34,35,36,37,38,75,76,80,82,83,85,86,88,89,90,91,92,93,94,108,109,110,111,112,113,114,115,118,119,120,121,122,125,138,143,188,],[-89,-61,-62,70,-64,-65,-49,-79,-81,-85,-96,-69,-70,-87,-88,70,-89,-67,-72,-68,70,-89,-90,-66,-91,-92,-93,-94,-95,-73,-74,-75,-76,-77,-78,70,70,70,-71,-86,70,70,-80,-97,70,70,]),'TERNARY_Q':([15,17,18,19,20,21,27,30,31,33,34,35,36,37,38,75,76,80,82,83,85,86,88,89,90,91,92,93,94,108,109,110,111,112,113,114,115,118,119,120,121,122,125,138,143,188,],[-89,-61,-62,71,-64,-65,-49,-79,-81,-85,-96,-69,-70,-87,-88,71,-89,-67,-72,-68,71,-89,-90,-66,-91,-92,-93,-94,-95,-73,-74,-75,-76,-77,-78,71,71,71,-71,-86,71,71,-80,-97,71,71,]),'RPAREN':([17,18,19,20,21,27,30,31,33,34,35,36,37,38,59,60,61,74,75,76,80,82,83,85,86,88,89,90,91,92,93,94,103,104,105,106,108,109,110,111,112,113,114,115,117,118,119,120,121,122,125,130,131,132,133,137,138,144,167,188,],[-61,-62,-63,-64,-65,-49,-79,-81,-85,-96,-69,-70,-87,-88,-59,-60,-98,119,120,-66,-67,-72,-68,-84,-89,-90,-66,-91,-92,-93,-94,-95,-36,127,-34,-35,-73,-74,-75,-76,-77,-78,-82,-83,-98,120,-71,-86,134,135,-80,-41,140,-38,-39,-37,-97,-40,184,191,]),'TERNARY_C':([17,18,19,20,21,27,30,31,33,34,35,36,37,38,80,82,83,85,86,88,89,90,91,92,93,94,108,109,110,111,112,113,114,115,116,119,120,125,138,],[-61,-62,-63,-64,-65,-49,-79,-81,-85,-96,-69,-70,-87,-88,-67,-72,-68,-84,-89,-90,-66,-91,-92,-93,-94,-95,-73,-74,-75,-76,-77,-78,-82,-83,129,-71,-86,-80,-97,]),'COMMA':([27,103,130,],[-49,126,139,]),'RETURN':([127,145,151,152,158,159,160,161,162,165,166,169,171,172,173,174,175,176,179,181,182,192,193,196,197,],[-33,164,164,-29,-23,-24,-25,-26,-27,-98,-47,-32,-18,-19,-20,-21,-22,-28,-42,-44,-45,-46,-48,-98,-43,]),'LBRACE':([134,135,140,183,184,191,],[141,142,145,186,187,194,]),'ELIF':([165,196,],[180,180,]),'ELSE':([165,196,],[183,183,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'block':([0,141,142,186,187,194,],[1,146,147,189,190,195,]),'statement_list':([0,3,141,142,186,187,194,],[2,39,2,2,2,2,2,]),'statement':([0,3,141,142,186,187,194,],[3,3,3,3,3,3,3,]),'empty':([0,3,61,117,141,142,145,151,164,165,186,187,194,196,],[4,4,106,133,4,4,152,152,178,182,4,4,4,182,]),'var_assign':([0,3,79,141,142,145,151,186,187,194,],[5,5,123,5,5,153,153,5,5,5,]),'final_assign':([0,3,141,142,145,151,186,187,194,],[6,6,6,6,154,154,6,6,6,]),'var_compound_assign':([0,3,141,142,145,151,186,187,194,],[7,7,7,7,155,155,7,7,7,]),'var_auto':([0,3,141,142,145,148,151,186,187,194,],[8,8,8,8,156,167,156,8,8,8,]),'expr':([0,3,23,32,45,46,47,48,49,50,51,69,70,71,73,77,78,81,107,129,136,141,142,145,151,164,185,186,187,194,],[9,9,74,87,88,90,91,92,93,94,95,87,87,116,74,87,87,74,128,138,87,9,9,157,157,177,87,9,9,9,]),'func_stmt':([0,3,141,142,145,151,186,187,194,],[10,10,10,10,158,158,10,10,10,]),'func_call':([0,3,141,142,145,151,186,187,194,],[11,11,11,11,159,159,11,11,11,]),'if_stmt':([0,3,141,142,145,151,186,187,194,],[12,12,12,12,160,160,12,12,12,]),'while_stmt':([0,3,141,142,145,151,186,187,194,],[13,13,13,13,161,161,13,13,13,]),'for_stmt':([0,3,141,142,145,151,186,187,194,],[14,14,14,14,162,162,14,14,14,]),'var':([0,3,16,22,23,28,29,32,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,63,64,65,66,67,68,69,70,71,73,77,78,79,81,107,117,126,129,136,139,141,142,145,148,151,164,185,186,187,194,],[15,15,62,72,76,82,82,86,89,89,89,89,89,89,89,82,82,82,82,82,82,82,103,82,82,82,82,82,82,86,86,89,76,86,86,124,89,89,130,103,89,86,130,15,15,15,168,15,89,86,15,15,15,]),'num_expr':([0,3,23,32,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,64,65,66,67,68,69,70,71,73,77,78,81,107,129,136,141,142,145,151,164,185,186,187,194,],[17,17,17,17,17,17,17,17,17,17,17,96,97,98,99,100,101,102,108,109,110,111,112,113,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'string_expr':([0,3,23,32,45,46,47,48,49,50,51,69,70,71,73,77,78,81,84,107,129,136,141,142,145,151,164,185,186,187,194,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,125,18,18,18,18,18,18,18,18,18,18,18,18,]),'boolean_expr':([0,3,23,32,45,46,47,48,49,50,51,69,70,71,73,77,78,81,107,129,136,141,142,145,151,164,185,186,187,194,],[19,19,75,85,19,19,19,19,19,19,19,114,115,19,118,121,122,19,19,19,143,19,19,19,19,19,188,19,19,19,]),'null_expr':([0,3,23,32,45,46,47,48,49,50,51,69,70,71,73,77,78,81,107,129,136,141,142,145,151,164,185,186,187,194,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'ternary_expr':([0,3,23,32,45,46,47,48,49,50,51,69,70,71,73,77,78,81,107,129,136,141,142,145,151,164,185,186,187,194,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'num_factor':([0,3,23,28,29,32,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,64,65,66,67,68,69,70,71,73,77,78,81,107,129,136,141,142,145,151,164,185,186,187,194,],[30,30,30,80,83,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'boolean_factor':([0,3,23,32,45,46,47,48,49,50,51,69,70,71,73,77,78,81,107,129,136,141,142,145,151,164,185,186,187,194,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'comparison':([0,3,23,32,45,46,47,48,49,50,51,69,70,71,73,77,78,81,107,129,136,141,142,145,151,164,185,186,187,194,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'arguments_list':([61,],[104,]),'non_empty_arguments_list':([61,126,],[105,137,]),'parameters_list':([117,],[131,]),'non_empty_parameters_list':([117,139,],[132,144,]),'scoped_block':([145,],[149,]),'scope_statement_list':([145,151,],[150,170,]),'scope_statement':([145,151,],[151,151,]),'return':([145,151,],[163,163,]),'elif_stmt':([165,196,],[179,197,]),'else_stmt':([165,196,],[181,181,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> block","S'",1,None,None,None),
  ('block -> statement_list','block',1,'p_block','parser.py',26),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser.py',34),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser.py',35),
  ('statement -> var_assign SEMI','statement',2,'p_statement','parser.py',45),
  ('statement -> final_assign SEMI','statement',2,'p_statement','parser.py',46),
  ('statement -> var_compound_assign SEMI','statement',2,'p_statement','parser.py',47),
  ('statement -> var_auto SEMI','statement',2,'p_statement','parser.py',48),
  ('statement -> expr SEMI','statement',2,'p_statement','parser.py',49),
  ('statement -> func_stmt','statement',1,'p_statement','parser.py',50),
  ('statement -> func_call','statement',1,'p_statement','parser.py',51),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',52),
  ('statement -> while_stmt','statement',1,'p_statement','parser.py',53),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',54),
  ('statement -> empty','statement',1,'p_statement','parser.py',55),
  ('scoped_block -> scope_statement_list','scoped_block',1,'p_scoped_block','parser.py',63),
  ('scope_statement_list -> scope_statement scope_statement_list','scope_statement_list',2,'p_scope_statement_list','parser.py',71),
  ('scope_statement_list -> empty','scope_statement_list',1,'p_scope_statement_list','parser.py',72),
  ('scope_statement -> var_assign SEMI','scope_statement',2,'p_scope_statement','parser.py',81),
  ('scope_statement -> final_assign SEMI','scope_statement',2,'p_scope_statement','parser.py',82),
  ('scope_statement -> var_compound_assign SEMI','scope_statement',2,'p_scope_statement','parser.py',83),
  ('scope_statement -> var_auto SEMI','scope_statement',2,'p_scope_statement','parser.py',84),
  ('scope_statement -> expr SEMI','scope_statement',2,'p_scope_statement','parser.py',85),
  ('scope_statement -> func_stmt','scope_statement',1,'p_scope_statement','parser.py',86),
  ('scope_statement -> func_call','scope_statement',1,'p_scope_statement','parser.py',87),
  ('scope_statement -> if_stmt','scope_statement',1,'p_scope_statement','parser.py',88),
  ('scope_statement -> while_stmt','scope_statement',1,'p_scope_statement','parser.py',89),
  ('scope_statement -> for_stmt','scope_statement',1,'p_scope_statement','parser.py',90),
  ('scope_statement -> return SEMI','scope_statement',2,'p_scope_statement','parser.py',91),
  ('scope_statement -> empty','scope_statement',1,'p_scope_statement','parser.py',92),
  ('return -> RETURN expr','return',2,'p_return','parser.py',96),
  ('return -> RETURN empty','return',2,'p_return','parser.py',97),
  ('func_stmt -> FN var LPAREN parameters_list RPAREN LBRACE scoped_block RBRACE','func_stmt',8,'p_func_stmt','parser.py',107),
  ('func_call -> var LPAREN arguments_list RPAREN','func_call',4,'p_func_call','parser.py',115),
  ('arguments_list -> non_empty_arguments_list','arguments_list',1,'p_arguments_list','parser.py',122),
  ('arguments_list -> empty','arguments_list',1,'p_arguments_list','parser.py',123),
  ('non_empty_arguments_list -> var','non_empty_arguments_list',1,'p_non_empty_arguments_list','parser.py',127),
  ('non_empty_arguments_list -> var COMMA non_empty_arguments_list','non_empty_arguments_list',3,'p_non_empty_arguments_list','parser.py',128),
  ('parameters_list -> non_empty_parameters_list','parameters_list',1,'p_parameters_list','parser.py',137),
  ('parameters_list -> empty','parameters_list',1,'p_parameters_list','parser.py',138),
  ('non_empty_parameters_list -> var COMMA non_empty_parameters_list','non_empty_parameters_list',3,'p_non_empty_parameters_list','parser.py',142),
  ('non_empty_parameters_list -> var','non_empty_parameters_list',1,'p_non_empty_parameters_list','parser.py',143),
  ('if_stmt -> IF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt','if_stmt',8,'p_if_stmt','parser.py',162),
  ('elif_stmt -> ELIF LPAREN boolean_expr RPAREN LBRACE block RBRACE elif_stmt','elif_stmt',8,'p_elif_stmt','parser.py',172),
  ('elif_stmt -> else_stmt','elif_stmt',1,'p_elif_stmt','parser.py',173),
  ('elif_stmt -> empty','elif_stmt',1,'p_elif_stmt','parser.py',174),
  ('else_stmt -> ELSE LBRACE block RBRACE','else_stmt',4,'p_else_stmt','parser.py',187),
  ('while_stmt -> WHILE LPAREN boolean_expr RPAREN LBRACE block RBRACE','while_stmt',7,'p_while_stmt','parser.py',196),
  ('for_stmt -> FOR LPAREN var_assign SEMI boolean_expr SEMI var_auto RPAREN LBRACE block RBRACE','for_stmt',11,'p_for_stmt','parser.py',202),
  ('var -> ID','var',1,'p_var','parser.py',214),
  ('var_assign -> var ASSIGN expr','var_assign',3,'p_var_assign','parser.py',219),
  ('final_assign -> FINAL var ASSIGN expr','final_assign',4,'p_final_assign','parser.py',225),
  ('var_compound_assign -> var PLUS_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',231),
  ('var_compound_assign -> var MINUS_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',232),
  ('var_compound_assign -> var TIMES_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',233),
  ('var_compound_assign -> var DIVIDE_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',234),
  ('var_compound_assign -> var POWER_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',235),
  ('var_compound_assign -> var MODULO_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',236),
  ('var_compound_assign -> var INT_DIVIDE_ASSIGN num_expr','var_compound_assign',3,'p_compound_assign','parser.py',237),
  ('var_auto -> var INCREMENT','var_auto',2,'p_var_auto','parser.py',245),
  ('var_auto -> var DECREMENT','var_auto',2,'p_var_auto','parser.py',246),
  ('expr -> num_expr','expr',1,'p_expr','parser.py',256),
  ('expr -> string_expr','expr',1,'p_expr','parser.py',257),
  ('expr -> boolean_expr','expr',1,'p_expr','parser.py',258),
  ('expr -> null_expr','expr',1,'p_expr','parser.py',259),
  ('expr -> ternary_expr','expr',1,'p_expr','parser.py',260),
  ('expr -> var','expr',1,'p_expr','parser.py',261),
  ('num_factor -> PLUS num_factor','num_factor',2,'p_num_factor','parser.py',267),
  ('num_factor -> MINUS num_factor','num_factor',2,'p_num_factor','parser.py',268),
  ('num_factor -> INTEGER','num_factor',1,'p_num_factor','parser.py',269),
  ('num_factor -> FLOAT','num_factor',1,'p_num_factor','parser.py',270),
  ('num_factor -> LPAREN expr RPAREN','num_factor',3,'p_num_factor','parser.py',271),
  ('num_factor -> var','num_factor',1,'p_num_factor','parser.py',272),
  ('num_expr -> num_expr PLUS num_expr','num_expr',3,'p_num_expr','parser.py',290),
  ('num_expr -> num_expr MINUS num_expr','num_expr',3,'p_num_expr','parser.py',291),
  ('num_expr -> num_expr TIMES num_expr','num_expr',3,'p_num_expr','parser.py',292),
  ('num_expr -> num_expr DIVIDE num_expr','num_expr',3,'p_num_expr','parser.py',293),
  ('num_expr -> num_expr INT_DIVIDE num_expr','num_expr',3,'p_num_expr','parser.py',294),
  ('num_expr -> num_expr POWER num_expr','num_expr',3,'p_num_expr','parser.py',295),
  ('num_expr -> num_factor','num_expr',1,'p_num_expr','parser.py',296),
  ('string_expr -> STRING PLUS string_expr','string_expr',3,'p_string_expr','parser.py',310),
  ('string_expr -> STRING','string_expr',1,'p_string_expr','parser.py',311),
  ('boolean_expr -> boolean_expr AND boolean_expr','boolean_expr',3,'p_boolean_expr','parser.py',325),
  ('boolean_expr -> boolean_expr OR boolean_expr','boolean_expr',3,'p_boolean_expr','parser.py',326),
  ('boolean_expr -> NOT boolean_expr','boolean_expr',2,'p_boolean_expr','parser.py',327),
  ('boolean_expr -> boolean_factor','boolean_expr',1,'p_boolean_expr','parser.py',328),
  ('boolean_factor -> LPAREN boolean_expr RPAREN','boolean_factor',3,'p_boolean_factor','parser.py',346),
  ('boolean_factor -> BOOLEAN','boolean_factor',1,'p_boolean_factor','parser.py',347),
  ('boolean_factor -> comparison','boolean_factor',1,'p_boolean_factor','parser.py',348),
  ('boolean_factor -> var','boolean_factor',1,'p_boolean_factor','parser.py',349),
  ('comparison -> expr EQ expr','comparison',3,'p_comparison','parser.py',364),
  ('comparison -> expr NE expr','comparison',3,'p_comparison','parser.py',365),
  ('comparison -> expr LT expr','comparison',3,'p_comparison','parser.py',366),
  ('comparison -> expr GT expr','comparison',3,'p_comparison','parser.py',367),
  ('comparison -> expr LE expr','comparison',3,'p_comparison','parser.py',368),
  ('comparison -> expr GE expr','comparison',3,'p_comparison','parser.py',369),
  ('null_expr -> NULL','null_expr',1,'p_null_expr','parser.py',379),
  ('ternary_expr -> boolean_expr TERNARY_Q expr TERNARY_C expr','ternary_expr',5,'p_ternary_expr','parser.py',388),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',396),
]
